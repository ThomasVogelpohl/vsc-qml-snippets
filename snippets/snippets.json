{
    "function": {
		"prefix": "function",
		"body": "\nfunction ${1:function_name}(${2:argument}) {\n    ${0:// body...}\n}",
		"description": "function() {}",
		"scope": "source.qml"
    },
    "property": {
		"prefix": "property",
		"body": "\nproperty ${1:var} ${2:name}\n",
		"description": "QML property",
		"scope": "source.qml"
	},
    "Abstract3DSeries": {
        "body": "\nAbstract3DSeries {\n    //baseColor: color\n    //baseGradient: ColorGradient\n    //colorStyle: Theme3D.ColorStyle\n    //itemLabel: string\n    //itemLabelFormat: string\n    //itemLabelVisible: bool\n    //mesh: Abstract3DSeries.Mesh\n    //meshRotation: quaternion\n    //meshSmooth: bool\n    //multiHighlightColor: color\n    //multiHighlightGradient: ColorGradient\n    //name: string\n    //singleHighlightColor: color\n    //singleHighlightGradient: ColorGradient\n    //type: Abstract3DSeries.SeriesType\n    //userDefinedMesh: string\n    //visible: bool\n}",
        "description": "Abstract3DSeries",
        "prefix": "Abstract3DSeries",
        "scope": "source.qml"
    },
    "AbstractAnimation": {
        "body": "\nAbstractAnimation {\n    //animationName: string\n    //animationType: enumeration\n    //duration: real\n    //position: real\n}",
        "description": "AbstractAnimation",
        "prefix": "AbstractAnimation",
        "scope": "source.qml"
    },
    "AbstractAxis": {
        "body": "\nAbstractAxis {\n    //alignment: alignment\n    //color: color\n    //gridLineColor: color\n    //gridVisible: bool\n    //labelsAngle: int\n    //labelsColor: color\n    //labelsFont: font\n    //labelsVisible: bool\n    //lineVisible: bool\n    //minorGridLineColor: color\n    //minorGridVisible: bool\n    //orientation: Qt.Orientation\n    //reverse: alignment\n    //shadesBorderColor: color\n    //shadesColor: color\n    //shadesVisible: bool\n    //titleFont: font\n    //titleText: string\n    //titleVisible: bool\n    //visible: bool\n}",
        "description": "AbstractAxis",
        "prefix": "AbstractAxis",
        "scope": "source.qml"
    },
    "AbstractAxis3D": {
        "body": "\nAbstractAxis3D {\n    //autoAdjustRange: bool\n    //labelAutoRotation: real\n    //labels: list\n    //max: real\n    //min: real\n    //orientation: AbstractAxis3D.AxisOrientation\n    //title: string\n    //titleFixed: bool\n    //titleVisible: bool\n    //type: AbstractAxis3D.AxisType\n}",
        "description": "AbstractAxis3D",
        "prefix": "AbstractAxis3D",
        "scope": "source.qml"
    },
    "AbstractAxisInput": {
        "body": "\nAbstractAxisInput {\n    //sourceDevice: AbstractPhysicalDevice\n}",
        "description": "AbstractAxisInput",
        "prefix": "AbstractAxisInput",
        "scope": "source.qml"
    },
    "AbstractBarSeries": {
        "body": "\nAbstractBarSeries {\n    //axisX: AbstractAxis\n    //axisXTop: AbstractAxis\n    //axisY: AbstractAxis\n    //axisYRight: AbstractAxis\n    //barWidth: real\n    //count: int\n    //labelsAngle: real\n    //labelsFormat: string\n    //labelsPosition: enumeration\n    //labelsPrecision: real\n    //labelsVisible: bool\n    //onBarsetsadded: { }\n    //onBarsetsremoved: { }\n    //onClear: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "AbstractBarSeries",
        "prefix": "AbstractBarSeries",
        "scope": "source.qml"
    },
    "AbstractButton": {
        "body": "\nAbstractButton {\n    //action: Action\n    //autoExclusive: bool\n    //autoRepeat: bool\n    //autoRepeatDelay: int\n    //autoRepeatInterval: int\n    //checkable: bool\n    //checked: bool\n    //display: enumeration\n    //down: bool\n    //icon.color: color\n    //icon.height: int\n    //icon.name: string\n    //icon.source: url\n    //icon.width: int\n    //indicator: Item\n    //pressX: real\n    //pressY: real\n    //pressed: bool\n    //text: string\n    //onCanceled: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onPressandhold: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onToggled: { }\n}",
        "description": "AbstractButton",
        "prefix": "AbstractButton",
        "scope": "source.qml"
    },
    "AbstractClipAnimator": {
        "body": "\nAbstractClipAnimator {\n    //loops: int\n}",
        "description": "AbstractClipAnimator",
        "prefix": "AbstractClipAnimator",
        "scope": "source.qml"
    },
    "AbstractDataProxy": {
        "body": "\nAbstractDataProxy {\n    //type: AbstractDataProxy.DataType\n}",
        "description": "AbstractDataProxy",
        "prefix": "AbstractDataProxy",
        "scope": "source.qml"
    },
    "AbstractGraph3D": {
        "body": "\nAbstractGraph3D {\n    //aspectRatio: real\n    //currentFps: int\n    //customItemList: list<Custom3DItem>\n    //horizontalAspectRatio: real\n    //inputHandler: AbstractInputHandler3D\n    //locale: locale\n    //margin: real\n    //measureFps: bool\n    //msaaSamples: int\n    //optimizationHints: AbstractGraph3D.OptimizationHints\n    //orthoProjection: bool\n    //polar: bool\n    //queriedGraphPosition: vector3d\n    //radialLabelOffset: real\n    //reflection: bool\n    //reflectivity: real\n    //renderingMode: AbstractGraph3D.RenderingMode\n    //scene: Scene3D\n    //selectedElement: AbstractGraph3D.ElementType\n    //selectionMode: AbstractGraph3D.SelectionMode\n    //shadowQuality: AbstractGraph3D.ShadowQuality\n    //shadowsSupported: bool\n    //theme: Theme3D\n}",
        "description": "AbstractGraph3D",
        "prefix": "AbstractGraph3D",
        "scope": "source.qml"
    },
    "AbstractRayCaster": {
        "body": "\nAbstractRayCaster {\n    //filterMode: enumeration\n    //hits: array\n    //runMode: enumeration\n}",
        "description": "AbstractRayCaster",
        "prefix": "AbstractRayCaster",
        "scope": "source.qml"
    },
    "AbstractSeries": {
        "body": "\nAbstractSeries {\n    //name: string\n    //opacity: real\n    //type: enumeration\n    //useOpenGL: bool\n    //visible: bool\n}",
        "description": "AbstractSeries",
        "prefix": "AbstractSeries",
        "scope": "source.qml"
    },
    "AbstractSkeleton": {
        "body": "\nAbstractSkeleton {\n    //childNodes: list<Node>\n    //data: list<QtQml::QtObject>\n    //propertyTrackingOverrides: QJSValue\n}",
        "description": "AbstractSkeleton",
        "prefix": "AbstractSkeleton",
        "scope": "source.qml"
    },
    "AbstractTextureImage": {
        "body": "\nAbstractTextureImage {\n    //face: enumeration\n    //layer: int\n    //mipLevel: int\n}",
        "description": "AbstractTextureImage",
        "prefix": "AbstractTextureImage",
        "scope": "source.qml"
    },
    "Accelerometer": {
        "body": "\nAccelerometer {\n    //accelerationMode: AccelerationMode\n}",
        "description": "Accelerometer",
        "prefix": "Accelerometer",
        "scope": "source.qml"
    },
    "AccelerometerReading": {
        "body": "\nAccelerometerReading {\n    //x: qreal\n    //y: qreal\n    //z: qreal\n}",
        "description": "AccelerometerReading",
        "prefix": "AccelerometerReading",
        "scope": "source.qml"
    },
    "Accessible": {
        "body": "\nAccessible {\n    //checkStateMixed: bool\n    //checkable: bool\n    //checked: bool\n    //defaultButton: bool\n    //description: string\n    //editable: bool\n    //focusable: bool\n    //focused: bool\n    //ignored: bool\n    //multiLine: bool\n    //name: string\n    //passwordEdit: bool\n    //pressed: bool\n    //readOnly: bool\n    //role: enumeration\n    //searchEdit: bool\n    //selectable: bool\n    //selectableText: bool\n    //selected: bool\n    //onDecreaseaction: { }\n    //onIncreaseaction: { }\n    //onNextpageaction: { }\n    //onPressaction: { }\n    //onPreviouspageaction: { }\n    //onScrolldownaction: { }\n    //onScrollleftaction: { }\n    //onScrollrightaction: { }\n    //onScrollupaction: { }\n    //onToggleaction: { }\n}",
        "description": "Accessible",
        "prefix": "Accessible",
        "scope": "source.qml"
    },
    "Action: Qt3D": {
        "body": "\nAction: Qt3D {\n    //action: bool\n    //inputs: list<AbstractActionInput>\n}",
        "description": "Action: Qt3D",
        "prefix": "Action: Qt3D",
        "scope": "source.qml"
    },
    "Action: QtQuickControls": {
        "body": "\nAction: QtQuickControls {\n    //checkable: bool\n    //checked: bool\n    //enabled: bool\n    //exclusiveGroup: ExclusiveGroup\n    //iconName: string\n    //iconSource: url\n    //shortcut: keysequence\n    //text: string\n    //tooltip: string\n    //onToggled: { }\n    //onTriggered: { }\n}",
        "description": "Action: QtQuickControls",
        "prefix": "Action: QtQuickControls",
        "scope": "source.qml"
    },
    "Action: QtQuickControls2": {
        "body": "\nAction: QtQuickControls2 {\n    //checkable: bool\n    //checked: bool\n    //enabled: bool\n    //icon.color: color\n    //icon.height: int\n    //icon.name: string\n    //icon.source: url\n    //icon.width: int\n    //shortcut: keysequence\n    //text: string\n    //onToggled: { }\n    //onTriggered: { }\n}",
        "description": "Action: QtQuickControls2",
        "prefix": "Action: QtQuickControls2",
        "scope": "source.qml"
    },
    "ActionGroup": {
        "body": "\nActionGroup {\n    //actions: list<Action>\n    //checkedAction: Action\n    //enabled: bool\n    //exclusive: bool\n    //group: ActionGroup [attached]\n    //onTriggered: { }\n}",
        "description": "ActionGroup",
        "prefix": "ActionGroup",
        "scope": "source.qml"
    },
    "ActionInput": {
        "body": "\nActionInput {\n    //buttons: list<int>\n    //sourceDevice: AbstractPhysicalDevice\n    //onButtonschanged: { }\n    //onSourcedevicechanged: { }\n}",
        "description": "ActionInput",
        "prefix": "ActionInput",
        "scope": "source.qml"
    },
    "AdditiveClipBlend": {
        "body": "\nAdditiveClipBlend {\n    //additiveClip: AbstractClipBlendNode\n    //additiveFactor: real\n    //baseClip: AbstractClipBlendNode\n}",
        "description": "AdditiveClipBlend",
        "prefix": "AdditiveClipBlend",
        "scope": "source.qml"
    },
    "Address": {
        "body": "\nAddress {\n    //address: QGeoAddress\n    //city: string\n    //country: string\n    //countryCode: string\n    //county: string\n    //district: string\n    //isTextGenerated: bool\n    //postalCode: string\n    //state: string\n    //street: string\n    //text: string\n}",
        "description": "Address",
        "prefix": "Address",
        "scope": "source.qml"
    },
    "Affector": {
        "body": "\nAffector {\n    //enabled: bool\n    //groups: list<string>\n    //once: bool\n    //shape: Shape\n    //system: ParticleSystem\n    //whenCollidingWith: list<string>\n    //onAffected: { }\n}",
        "description": "Affector",
        "prefix": "Affector",
        "scope": "source.qml"
    },
    "Age": {
        "body": "\nAge {\n    //advancePosition: bool\n    //lifeLeft: int\n}",
        "description": "Age",
        "prefix": "Age",
        "scope": "source.qml"
    },
    "AlphaCoverage": {
        "body": "\nAlphaCoverage {\n    //childNodes: list<Node>\n    //data: list<QtQml::QtObject>\n    //propertyTrackingOverrides: QJSValue\n}",
        "description": "AlphaCoverage",
        "prefix": "AlphaCoverage",
        "scope": "source.qml"
    },
    "AlphaTest": {
        "body": "\nAlphaTest {\n    //alphaFunction: enumeration\n    //referenceValue: real\n}",
        "description": "AlphaTest",
        "prefix": "AlphaTest",
        "scope": "source.qml"
    },
    "Altimeter": {
        "body": "\nAltimeter {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "Altimeter",
        "prefix": "Altimeter",
        "scope": "source.qml"
    },
    "AltimeterReading": {
        "body": "\nAltimeterReading {\n    //altitude: qreal\n}",
        "description": "AltimeterReading",
        "prefix": "AltimeterReading",
        "scope": "source.qml"
    },
    "AmbientLightReading": {
        "body": "\nAmbientLightReading {\n    //lightLevel: LightLevel\n}",
        "description": "AmbientLightReading",
        "prefix": "AmbientLightReading",
        "scope": "source.qml"
    },
    "AmbientLightSensor": {
        "body": "\nAmbientLightSensor {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "AmbientLightSensor",
        "prefix": "AmbientLightSensor",
        "scope": "source.qml"
    },
    "AmbientTemperatureReading": {
        "body": "\nAmbientTemperatureReading {\n    //temperature: qreal\n}",
        "description": "AmbientTemperatureReading",
        "prefix": "AmbientTemperatureReading",
        "scope": "source.qml"
    },
    "AmbientTemperatureSensor": {
        "body": "\nAmbientTemperatureSensor {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "AmbientTemperatureSensor",
        "prefix": "AmbientTemperatureSensor",
        "scope": "source.qml"
    },
    "AnalogAxisInput": {
        "body": "\nAnalogAxisInput {\n    //axis: int\n}",
        "description": "AnalogAxisInput",
        "prefix": "AnalogAxisInput",
        "scope": "source.qml"
    },
    "AnchorAnimation": {
        "body": "\nAnchorAnimation {\n    //duration: int\n    //easing.amplitude: real\n    //easing.overshoot: real\n    //easing.period: real\n    //easing.type: enumeration\n    //targets: list<Item>\n}",
        "description": "AnchorAnimation",
        "prefix": "AnchorAnimation",
        "scope": "source.qml"
    },
    "AnchorChanges": {
        "body": "\nAnchorChanges {\n    //anchors.baseline: AnchorLine\n    //anchors.bottom: AnchorLine\n    //anchors.horizontalCenter: AnchorLine\n    //anchors.left: AnchorLine\n    //anchors.right: AnchorLine\n    //anchors.top: AnchorLine\n    //anchors.verticalCenter: AnchorLine\n    //target: Item\n}",
        "description": "AnchorChanges",
        "prefix": "AnchorChanges",
        "scope": "source.qml"
    },
    "AngleDirection": {
        "body": "\nAngleDirection {\n    //angle: real\n    //angleVariation: real\n    //magnitude: real\n    //magnitudeVariation: real\n}",
        "description": "AngleDirection",
        "prefix": "AngleDirection",
        "scope": "source.qml"
    },
    "AnimatedImage": {
        "body": "\nAnimatedImage {\n    //currentFrame: int\n    //frameCount: int\n    //paused: bool\n    //playing: bool\n    //source: url\n    //speed: real\n}",
        "description": "AnimatedImage",
        "prefix": "AnimatedImage",
        "scope": "source.qml"
    },
    "AnimatedSprite": {
        "body": "\nAnimatedSprite {\n    //currentFrame: int\n    //frameCount: int\n    //frameDuration: int\n    //frameHeight: int\n    //frameRate: qreal\n    //frameSync: bool\n    //frameWidth: int\n    //frameX: int\n    //frameY: int\n    //interpolate: bool\n    //loops: int\n    //paused: bool\n    //reverse: bool\n    //running: bool\n    //source: url\n}",
        "description": "AnimatedSprite",
        "prefix": "AnimatedSprite",
        "scope": "source.qml"
    },
    "Animation": {
        "body": "\nAnimation {\n    //alwaysRunToEnd: bool\n    //loops: int\n    //paused: bool\n    //running: bool\n    //onComplete: { }\n    //onPause: { }\n    //onRestart: { }\n    //onResume: { }\n    //onStart: { }\n    //onStarted: { }\n    //onStop: { }\n    //onStopped: { }\n}",
        "description": "Animation",
        "prefix": "Animation",
        "scope": "source.qml"
    },
    "AnimationController: Qt3D": {
        "body": "\nAnimationController: Qt3D {\n    //activeAnimationGroup: int\n    //animationGroups: list<AnimationGroup>\n    //entity: Entity\n    //position: real\n    //positionOffset: real\n    //positionScale: real\n    //recursive: bool\n}",
        "description": "AnimationController: Qt3D",
        "prefix": "AnimationController: Qt3D",
        "scope": "source.qml"
    },
    "AnimationController: QtQuick": {
        "body": "\nAnimationController: QtQuick {\n    //animation: Animation\n    //progress: real\n    //onCompletetobeginning: { }\n    //onCompletetoend: { }\n    //onReload: { }\n}",
        "description": "AnimationController: QtQuick",
        "prefix": "AnimationController: QtQuick",
        "scope": "source.qml"
    },
    "AnimationGroup": {
        "body": "\nAnimationGroup {\n    //animations: list<AbstractAnimation>\n    //duration: real\n    //name: string\n    //position: real\n}",
        "description": "AnimationGroup",
        "prefix": "AnimationGroup",
        "scope": "source.qml"
    },
    "Animator": {
        "body": "\nAnimator {\n    //duration: int\n    //easing.amplitude: real\n    //easing.bezierCurve: list<real>\n    //easing.overshoot: real\n    //easing.period: real\n    //easing.type: enumeration\n    //from: real\n    //target: QtQuick::Item\n    //to: real\n}",
        "description": "Animator",
        "prefix": "Animator",
        "scope": "source.qml"
    },
    "ApplicationWindow: QtQuickControls": {
        "body": "\nApplicationWindow: QtQuickControls {\n    //contentItem: ContentItem\n    //menuBar: MenuBar\n    //statusBar: Item\n    //style: Component\n    //toolBar: Item\n}",
        "description": "ApplicationWindow: QtQuickControls",
        "prefix": "ApplicationWindow: QtQuickControls",
        "scope": "source.qml"
    },
    "ApplicationWindow: QtQuickControls2": {
        "body": "\nApplicationWindow: QtQuickControls2 {\n    //activeFocusControl: Control [attached]\n    //activeFocusControl: Control\n    //background: Item\n    //contentData: list<Object>\n    //contentItem: Item [attached]\n    //contentItem: Item\n    //font: font\n    //footer: Item [attached]\n    //footer: Item\n    //header: Item [attached]\n    //header: Item\n    //locale: Locale\n    //menuBar: Item [attached]\n    //menuBar: Item\n    //overlay: Item\n    //overlay: Item\n    //overlay.modal: Component\n    //overlay.modeless: Component\n    //palette: palette\n    //window: ApplicationWindow [attached]\n}",
        "description": "ApplicationWindow: QtQuickControls2",
        "prefix": "ApplicationWindow: QtQuickControls2",
        "scope": "source.qml"
    },
    "ApplicationWindowStyle": {
        "body": "\nApplicationWindowStyle {\n    //background: Component\n    //control: ApplicationWindow\n}",
        "description": "ApplicationWindowStyle",
        "prefix": "ApplicationWindowStyle",
        "scope": "source.qml"
    },
    "AreaSeries": {
        "body": "\nAreaSeries {\n    //axisAngular: AbstractAxis\n    //axisRadial: AbstractAxis\n    //axisX: AbstractAxis\n    //axisXTop: AbstractAxis\n    //axisY: AbstractAxis\n    //axisYRight: AbstractAxis\n    //borderColor: color\n    //borderWidth: real\n    //brushFilename: QString\n    //color: color\n    //lowerSeries: LineSeries\n    //pointLabelsClipping: bool\n    //pointLabelsColor: font\n    //pointLabelsFont: font\n    //pointLabelsFormat: string\n    //pointLabelsVisible: bool\n    //upperSeries: LineSeries\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "AreaSeries",
        "prefix": "AreaSeries",
        "scope": "source.qml"
    },
    "Armature": {
        "body": "\nArmature {\n    //skeleton: AbstractSkeleton\n}",
        "description": "Armature",
        "prefix": "Armature",
        "scope": "source.qml"
    },
    "AttenuationModelInverse": {
        "body": "\nAttenuationModelInverse {\n    //end: real\n    //name: string\n    //rolloff: real\n    //start: real\n}",
        "description": "AttenuationModelInverse",
        "prefix": "AttenuationModelInverse",
        "scope": "source.qml"
    },
    "AttenuationModelLinear": {
        "body": "\nAttenuationModelLinear {\n    //end: real\n    //name: string\n    //start: real\n}",
        "description": "AttenuationModelLinear",
        "prefix": "AttenuationModelLinear",
        "scope": "source.qml"
    },
    "Attractor": {
        "body": "\nAttractor {\n    //affectedParameter: AffectableParameter\n    //proportionalToDistance: Proportion\n}",
        "description": "Attractor",
        "prefix": "Attractor",
        "scope": "source.qml"
    },
    "Audio": {
        "body": "\nAudio {\n    //audioRole: enumeration\n    //autoLoad: bool\n    //autoPlay: bool\n    //availability: enumeration\n    //bufferProgress: real\n    //customAudioRole: string\n    //duration: int\n    //error: enumeration\n    //errorString: string\n    //hasAudio: bool\n    //hasVideo: bool\n    //loops: int\n    //mediaObject: variant\n    //metaData.albumArtist: variant\n    //metaData.albumTitle: variant\n    //metaData.audioBitRate: variant\n    //metaData.audioCodec: variant\n    //metaData.author: variant\n    //metaData.averageLevel: variant\n    //metaData.category: variant\n    //metaData.channelCount: variant\n    //metaData.chapterNumber: variant\n    //metaData.comment: variant\n    //metaData.composer: variant\n    //metaData.conductor: variant\n    //metaData.contributingArtist: variant\n    //metaData.copyright: variant\n    //metaData.coverArtUrlLarge: variant\n    //metaData.coverArtUrlSmall: variant\n    //metaData.date: variant\n    //metaData.description: variant\n    //metaData.director: variant\n    //metaData.genre: variant\n    //metaData.keywords: variant\n    //metaData.language: variant\n    //metaData.leadPerformer: variant\n    //metaData.lyrics: variant\n    //metaData.mediaType: variant\n    //metaData.mood: variant\n    //metaData.parentalRating: variant\n    //metaData.peakValue: variant\n    //metaData.pixelAspectRatio: variant\n    //metaData.posterUrl: variant\n    //metaData.publisher: variant\n    //metaData.ratingOrganization: variant\n    //metaData.resolution: variant\n    //metaData.sampleRate: variant\n    //metaData.size: variant\n    //metaData.subTitle: variant\n    //metaData.title: variant\n    //metaData.trackCount: variant\n    //metaData.trackNumber: variant\n    //metaData.userRating: variant\n    //metaData.videoBitRate: variant\n    //metaData.videoCodec: variant\n    //metaData.videoFrameRate: variant\n    //metaData.writer: variant\n    //metaData.year: variant\n    //muted: bool\n    //notifyInterval: int\n    //playbackRate: real\n    //playbackState: enumeration\n    //playlist: Playlist\n    //position: int\n    //seekable: bool\n    //source: url\n    //status: enumeration\n    //volume: real\n    //onError: { }\n    //onPause: { }\n    //onPaused: { }\n    //onPlay: { }\n    //onPlaybackstatechanged: { }\n    //onPlaying: { }\n    //onSeek: { }\n    //onStop: { }\n    //onStopped: { }\n}",
        "description": "Audio",
        "prefix": "Audio",
        "scope": "source.qml"
    },
    "AudioCategory": {
        "body": "\nAudioCategory {\n    //name: string\n    //volume: real\n    //onPause: { }\n    //onPause: { }\n    //onStop: { }\n}",
        "description": "AudioCategory",
        "prefix": "AudioCategory",
        "scope": "source.qml"
    },
    "AudioEngine": {
        "body": "\nAudioEngine {\n    //categories: map\n    //dopplerFactor: real\n    //listener: QtAudioEngine::AudioListener\n    //liveInstances: int\n    //loading: bool\n    //samples: map\n    //sounds: map\n    //speedOfSound: real\n    //onAddattenuationmodel: { }\n    //onAddaudiocategory: { }\n    //onAddaudiosample: { }\n    //onAddsound: { }\n    //onFinishedloading: { }\n    //onIsloadingchanged: { }\n    //onLiveinstancecountchanged: { }\n    //onReady: { }\n}",
        "description": "AudioEngine",
        "prefix": "AudioEngine",
        "scope": "source.qml"
    },
    "AudioListener": {
        "body": "\nAudioListener {\n    //direction: vector3d\n    //engine: QtAudioEngine::AudioEngine\n    //gain: real\n    //position: vector3d\n    //up: vector3d\n    //velocity: vector3d\n}",
        "description": "AudioListener",
        "prefix": "AudioListener",
        "scope": "source.qml"
    },
    "AudioSample": {
        "body": "\nAudioSample {\n    //loaded: bool\n    //name: string\n    //preloaded: bool\n    //source: url\n    //onLoadedchanged: { }\n}",
        "description": "AudioSample",
        "prefix": "AudioSample",
        "scope": "source.qml"
    },
    "AuthenticationDialogRequest": {
        "body": "\nAuthenticationDialogRequest {\n    //accepted: bool\n    //proxyHost: string\n    //realm: string\n    //type: enumeration\n    //url: url\n}",
        "description": "AuthenticationDialogRequest",
        "prefix": "AuthenticationDialogRequest",
        "scope": "source.qml"
    },
    "Axis": {
        "body": "\nAxis {\n    //buttons: QVariantList\n    //inputs: list<AbstractAxisInput>\n    //scale: real\n    //value: int\n    //velocity: real\n}",
        "description": "Axis",
        "prefix": "Axis",
        "scope": "source.qml"
    },
    "AxisAccumulator": {
        "body": "\nAxisAccumulator {\n    //sourceAxis: Axis\n    //sourceAxisType: SourceAxisType\n    //value: real\n}",
        "description": "AxisAccumulator",
        "prefix": "AxisAccumulator",
        "scope": "source.qml"
    },
    "AxisSetting": {
        "body": "\nAxisSetting {\n    //axes: list<int>\n    //axis: QVariantList\n    //deadZoneRadius: float\n    //smooth: bool\n    //onAxischanged: { }\n    //onDeadzoneradiuschanged: { }\n    //onSmoothchanged: { }\n}",
        "description": "AxisSetting",
        "prefix": "AxisSetting",
        "scope": "source.qml"
    },
    "BackspaceKey": {
        "body": "\nBackspaceKey {\n    //active: bool\n    //alternativeKeys: var\n    //displayText: string\n    //effectiveAlternativeKeys: var\n    //effectiveAlternativeKeysHighlightIndex: int\n    //functionKey: bool\n    //highlighted: bool\n    //key: int\n    //keyPanelDelegate: alias\n    //noKeyEvent: bool\n    //noModifier: bool\n    //pressed: bool\n    //repeat: bool\n    //showPreview: bool\n    //smallText: string\n    //smallTextVisible: bool\n    //soundEffect: url\n    //text: string\n    //uppercased: bool\n    //weight: real\n    //onClicked: { }\n}",
        "description": "BackspaceKey",
        "prefix": "BackspaceKey",
        "scope": "source.qml"
    },
    "Bar3DSeries": {
        "body": "\nBar3DSeries {\n    //dataProxy: BarDataProxy\n    //invalidSelectionPosition: point\n    //meshAngle: real\n    //selectedBar: point\n}",
        "description": "Bar3DSeries",
        "prefix": "Bar3DSeries",
        "scope": "source.qml"
    },
    "BarCategoryAxis": {
        "body": "\nBarCategoryAxis {\n    //categories: QStringList\n    //count: int\n    //max: string\n    //min: string\n    //onRangechanged: { }\n}",
        "description": "BarCategoryAxis",
        "prefix": "BarCategoryAxis",
        "scope": "source.qml"
    },
    "BarDataProxy": {
        "body": "\nBarDataProxy {\n    //columnLabels: list\n    //rowCount: int\n    //rowLabels: list\n    //series: Bar3DSeries\n}",
        "description": "BarDataProxy",
        "prefix": "BarDataProxy",
        "scope": "source.qml"
    },
    "BarSeries": {
        "body": "\nBarSeries {\n    //axisX: AbstractAxis\n    //axisXTop: AbstractAxis\n    //axisY: AbstractAxis\n    //axisYRight: AbstractAxis\n    //barWidth: real\n    //count: int\n    //labelsAngle: real\n    //labelsFormat: string\n    //labelsPosition: enumeration\n    //labelsPrecision: real\n    //labelsVisible: bool\n    //onBarsetsadded: { }\n    //onBarsetsremoved: { }\n    //onClear: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "BarSeries",
        "prefix": "BarSeries",
        "scope": "source.qml"
    },
    "BarSet": {
        "body": "\nBarSet {\n    //borderColor: color\n    //borderWidth: real\n    //brushFilename: string\n    //color: color\n    //count: int\n    //label: string\n    //labelColor: color\n    //labelFont: font\n    //values: QVariantList\n    //onAppend: { }\n    //onAt: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onRemove: { }\n    //onReplace: { }\n    //onValuechanged: { }\n    //onValuesadded: { }\n    //onValuesremoved: { }\n}",
        "description": "BarSet",
        "prefix": "BarSet",
        "scope": "source.qml"
    },
    "Bars3D": {
        "body": "\nBars3D {\n    //barSpacing: size\n    //barSpacingRelative: bool\n    //barThickness: real\n    //columnAxis: CategoryAxis3D\n    //floorLevel: real\n    //multiSeriesUniform: bool\n    //primarySeries: Bar3DSeries\n    //rowAxis: CategoryAxis3D\n    //selectedSeries: Bar3DSeries\n    //seriesList: list<Bar3DSeries>\n    //valueAxis: ValueAxis3D\n}",
        "description": "Bars3D",
        "prefix": "Bars3D",
        "scope": "source.qml"
    },
    "BaseKey": {
        "body": "\nBaseKey {\n    //active: bool\n    //alternativeKeys: var\n    //displayText: string\n    //effectiveAlternativeKeys: var\n    //effectiveAlternativeKeysHighlightIndex: int\n    //functionKey: bool\n    //highlighted: bool\n    //key: int\n    //keyPanelDelegate: alias\n    //noKeyEvent: bool\n    //noModifier: bool\n    //pressed: bool\n    //repeat: bool\n    //showPreview: bool\n    //smallText: string\n    //smallTextVisible: bool\n    //soundEffect: url\n    //text: string\n    //uppercased: bool\n    //weight: real\n    //onClicked: { }\n}",
        "description": "BaseKey",
        "prefix": "BaseKey",
        "scope": "source.qml"
    },
    "Behavior": {
        "body": "\nBehavior {\n    //animation: Animation\n    //enabled: bool\n}",
        "description": "Behavior",
        "prefix": "Behavior",
        "scope": "source.qml"
    },
    "Binding": {
        "body": "\nBinding {\n    //delayed: bool\n    //property: string\n    //target: Object\n    //value: any\n    //when: bool\n}",
        "description": "Binding",
        "prefix": "Binding",
        "scope": "source.qml"
    },
    "Blend": {
        "body": "\nBlend {\n    //cached: bool\n    //foregroundSource: variant\n    //mode: string\n    //source: variant\n}",
        "description": "Blend",
        "prefix": "Blend",
        "scope": "source.qml"
    },
    "BlendEquation": {
        "body": "\nBlendEquation {\n    //blendFunction: enumeration\n}",
        "description": "BlendEquation",
        "prefix": "BlendEquation",
        "scope": "source.qml"
    },
    "BlendEquationArguments": {
        "body": "\nBlendEquationArguments {\n    //DestinationAlpha: enumeration\n    //bufferIndex: int\n    //destinationRgb: enumeration\n    //sourceAlpha: enumeration\n    //sourceRgb: enumeration\n}",
        "description": "BlendEquationArguments",
        "prefix": "BlendEquationArguments",
        "scope": "source.qml"
    },
    "BlendedClipAnimator": {
        "body": "\nBlendedClipAnimator {\n    //blendTree: AbstractClipBlendNode\n}",
        "description": "BlendedClipAnimator",
        "prefix": "BlendedClipAnimator",
        "scope": "source.qml"
    },
    "BlitFramebuffer": {
        "body": "\nBlitFramebuffer {\n    //destination: RenderTarget\n    //destinationAttachmentPoint: RenderTargetOutput.AttachmentPoint\n    //destinationRect: Rect\n    //interpolationMethod: InterpolationMethod\n    //source: RenderTarget\n    //sourceAttachmentPoint: RenderTargetOutput.AttachmentPoint\n    //sourceRect: Rect\n}",
        "description": "BlitFramebuffer",
        "prefix": "BlitFramebuffer",
        "scope": "source.qml"
    },
    "BluetoothDiscoveryModel": {
        "body": "\nBluetoothDiscoveryModel {\n    //discoveryMode: enumeration\n    //error: enumeration\n    //remoteAddress: string\n    //running: bool\n    //uuidFilter: string\n    //onDevicediscovered: { }\n    //onServicediscovered: { }\n}",
        "description": "BluetoothDiscoveryModel",
        "prefix": "BluetoothDiscoveryModel",
        "scope": "source.qml"
    },
    "BluetoothService": {
        "body": "\nBluetoothService {\n    //deviceAddress: string\n    //deviceName: string\n    //registered: string\n    //serviceDescription: string\n    //serviceName: string\n    //serviceProtocol: enumeration\n    //serviceUuid: string\n    //onDetailschanged: { }\n}",
        "description": "BluetoothService",
        "prefix": "BluetoothService",
        "scope": "source.qml"
    },
    "BluetoothSocket": {
        "body": "\nBluetoothSocket {\n    //connected: bool\n    //error: enumeration\n    //service: BluetoothService\n    //state: enumeration\n    //stringData: string\n}",
        "description": "BluetoothSocket",
        "prefix": "BluetoothSocket",
        "scope": "source.qml"
    },
    "BorderImage": {
        "body": "\nBorderImage {\n    //asynchronous: bool\n    //border.bottom: int\n    //border.left: int\n    //border.right: int\n    //border.top: int\n    //cache: bool\n    //horizontalTileMode: enumeration\n    //mirror: bool\n    //progress: real\n    //smooth: bool\n    //source: url\n    //sourceSize: QSize\n    //status: enumeration\n    //verticalTileMode: enumeration\n}",
        "description": "BorderImage",
        "prefix": "BorderImage",
        "scope": "source.qml"
    },
    "BorderImageMesh": {
        "body": "\nBorderImageMesh {\n    //border.bottom: int\n    //border.left: int\n    //border.right: int\n    //border.top: int\n    //horizontalTileMode: enumeration\n    //size: size\n    //verticalTileMode: enumeration\n}",
        "description": "BorderImageMesh",
        "prefix": "BorderImageMesh",
        "scope": "source.qml"
    },
    "BoxPlotSeries": {
        "body": "\nBoxPlotSeries {\n    //axisX: AbstractAxis\n    //axisXTop: AbstractAxis\n    //axisY: AbstractAxis\n    //axisYRight: AbstractAxis\n    //boxOutlineVisible: bool\n    //boxWidth: real\n    //brushFilename: string\n    //count: int\n    //onAppend: { }\n    //onAppend: { }\n    //onAt: { }\n    //onBoxsetsadded: { }\n    //onBoxsetsremoved: { }\n    //onClear: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onInsert: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onRemove: { }\n}",
        "description": "BoxPlotSeries",
        "prefix": "BoxPlotSeries",
        "scope": "source.qml"
    },
    "BoxSet": {
        "body": "\nBoxSet {\n    //brushFilename: string\n    //count: int\n    //label: string\n    //values: list\n    //onCleared: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onValuechanged: { }\n    //onValueschanged: { }\n}",
        "description": "BoxSet",
        "prefix": "BoxSet",
        "scope": "source.qml"
    },
    "BrightnessContrast": {
        "body": "\nBrightnessContrast {\n    //brightness: real\n    //cached: bool\n    //contrast: real\n    //source: variant\n}",
        "description": "BrightnessContrast",
        "prefix": "BrightnessContrast",
        "scope": "source.qml"
    },
    "Buffer": {
        "body": "\nBuffer {\n    //syncData: bool\n    //type: QBuffer::BufferType\n    //usage: QBuffer::UsageType\n}",
        "description": "Buffer",
        "prefix": "Buffer",
        "scope": "source.qml"
    },
    "BusyIndicator: QtQuickControls": {
        "body": "\nBusyIndicator: QtQuickControls {\n    //running: bool\n    //style: Component\n}",
        "description": "BusyIndicator: QtQuickControls",
        "prefix": "BusyIndicator: QtQuickControls",
        "scope": "source.qml"
    },
    "BusyIndicator: QtQuickControls2": {
        "body": "\nBusyIndicator: QtQuickControls2 {\n    //running: bool\n}",
        "description": "BusyIndicator: QtQuickControls2",
        "prefix": "BusyIndicator: QtQuickControls2",
        "scope": "source.qml"
    },
    "BusyIndicatorStyle": {
        "body": "\nBusyIndicatorStyle {\n    //control: BusyIndicator\n    //indicator: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n}",
        "description": "BusyIndicatorStyle",
        "prefix": "BusyIndicatorStyle",
        "scope": "source.qml"
    },
    "Button: QtQuickControls": {
        "body": "\nButton: QtQuickControls {\n    //action: Action\n    //activeFocusOnPress: bool\n    //checkable: bool\n    //checked: bool\n    //exclusiveGroup: ExclusiveGroup\n    //hovered: bool\n    //iconName: string\n    //iconSource: url\n    //isDefault: bool\n    //menu: Menu\n    //pressed: bool\n    //style: Component\n    //text: string\n    //tooltip: string\n    //onClicked: { }\n}",
        "description": "Button: QtQuickControls",
        "prefix": "Button: QtQuickControls",
        "scope": "source.qml"
    },
    "Button: QtQuickControls2": {
        "body": "\nButton: QtQuickControls2 {\n    //flat: bool\n    //highlighted: bool\n}",
        "description": "Button: QtQuickControls2",
        "prefix": "Button: QtQuickControls2",
        "scope": "source.qml"
    },
    "ButtonAxisInput": {
        "body": "\nButtonAxisInput {\n    //acceleration: real\n    //buttons: list<var>\n    //deceleration: list<var>\n    //scale: real\n}",
        "description": "ButtonAxisInput",
        "prefix": "ButtonAxisInput",
        "scope": "source.qml"
    },
    "ButtonGroup": {
        "body": "\nButtonGroup {\n    //buttons: list<AbstractButton>\n    //checkState: enumeration\n    //checkedButton: AbstractButton\n    //exclusive: bool\n    //group: ButtonGroup [attached]\n    //onClicked: { }\n}",
        "description": "ButtonGroup",
        "prefix": "ButtonGroup",
        "scope": "source.qml"
    },
    "ButtonStyle": {
        "body": "\nButtonStyle {\n    //background: Component\n    //control: Button\n    //label: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n}",
        "description": "ButtonStyle",
        "prefix": "ButtonStyle",
        "scope": "source.qml"
    },
    "Calendar": {
        "body": "\nCalendar {\n    //dayOfWeekFormat: int\n    //frameVisible: bool\n    //locale: var\n    //maximumDate: date\n    //minimumDate: date\n    //navigationBarVisible: bool\n    //selectedDate: date\n    //style: Component\n    //visibleMonth: int\n    //visibleYear: int\n    //weekNumbersVisible: bool\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressandhold: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "Calendar",
        "prefix": "Calendar",
        "scope": "source.qml"
    },
    "CalendarStyle": {
        "body": "\nCalendarStyle {\n    //background: Component\n    //control: Calendar\n    //dayDelegate: Component\n    //dayOfWeekDelegate: Component\n    //gridColor: color\n    //gridVisible: bool\n    //navigationBar: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //weekNumberDelegate: Component\n}",
        "description": "CalendarStyle",
        "prefix": "CalendarStyle",
        "scope": "source.qml"
    },
    "Camera3D": {
        "body": "\nCamera3D {\n    //cameraPreset: Camera3D.CameraPreset\n    //maxZoomLevel: float\n    //minZoomLevel: float\n    //target: vector3d\n    //wrapXRotation: bool\n    //wrapYRotation: bool\n    //xRotation: float\n    //yRotation: float\n    //zoomLevel: float\n}",
        "description": "Camera3D",
        "prefix": "Camera3D",
        "scope": "source.qml"
    },
    "Camera: Qt3D": {
        "body": "\nCamera: Qt3D {\n    //aspectRatio: real\n    //bottom: real\n    //farPlane: real\n    //fieldOfView: real\n    //left: real\n    //nearPlane: real\n    //position: vector3d\n    //projectionMatrix: matrix4x4\n    //projectionType: enumeration\n    //right: real\n    //top: real\n    //upVector: vector3d\n    //viewCenter: vector3d\n    //viewMatrix: matrix4x4\n    //viewVector: vector3d\n}",
        "description": "Camera: Qt3D",
        "prefix": "Camera: Qt3D",
        "scope": "source.qml"
    },
    "Camera: QtMultimedia": {
        "body": "\nCamera: QtMultimedia {\n    //availability: enumeration\n    //cameraState: enumeration\n    //cameraStatus: enumeration\n    //captureMode: enumeration\n    //deviceId: string\n    //digitalZoom: real\n    //displayName: string\n    //errorCode: enumeration\n    //errorString: string\n    //lockStatus: enumeration\n    //maximumDigitalZoom: real\n    //maximumOpticalZoom: real\n    //mediaObject: variant\n    //metaData.cameraManufacturer: variant\n    //metaData.cameraModel: variant\n    //metaData.dateTimeOriginal: variant\n    //metaData.event: variant\n    //metaData.gpsAltitude: variant\n    //metaData.gpsImgDirection: variant\n    //metaData.gpsLatitude: variant\n    //metaData.gpsLongitude: variant\n    //metaData.gpsProcessingMethod: variant\n    //metaData.gpsSpeed: variant\n    //metaData.gpsTimestamp: variant\n    //metaData.gpsTrack: variant\n    //metaData.orientation: variant\n    //metaData.subject: variant\n    //opticalZoom: real\n    //orientation: int\n    //position: enumeration\n    //viewfinder.maximumFrameRate: real\n    //viewfinder.minimumFrameRate: real\n    //viewfinder.resolution: size\n    //onCamerastatechanged: { }\n    //onDigitalzoomchanged: { }\n    //onError: { }\n    //onLockstatuschanged: { }\n    //onManualwhitebalancechanged: { }\n    //onMaximumdigitalzoomchanged: { }\n    //onMaximumopticalzoomchanged: { }\n    //onOpticalzoomchanged: { }\n    //onSearchandlock: { }\n    //onStart: { }\n    //onStop: { }\n    //onUnlock: { }\n    //onWhitebalancemodechanged: { }\n}",
        "description": "Camera: QtMultimedia",
        "prefix": "Camera: QtMultimedia",
        "scope": "source.qml"
    },
    "CameraCapabilities": {
        "body": "\nCameraCapabilities {\n    //maximumFieldOfView: qreal\n    //maximumTilt: qreal\n    //maximumZoomLevel: qreal\n    //minimumFieldOfView: qreal\n    //minimumTilt: qreal\n    //minimumZoomLevel: qreal\n}",
        "description": "CameraCapabilities",
        "prefix": "CameraCapabilities",
        "scope": "source.qml"
    },
    "CameraCapture": {
        "body": "\nCameraCapture {\n    //capturedImagePath: string\n    //errorString: string\n    //ready: bool\n    //resolution: size\n    //supportedResolutions: list<size>\n    //onCancelcapture: { }\n    //onCapture: { }\n    //onCapturefailed: { }\n    //onCapturetolocation: { }\n    //onImagecaptured: { }\n    //onImagemetadataavailable: { }\n    //onImagesaved: { }\n    //onSetmetadata: { }\n}",
        "description": "CameraCapture",
        "prefix": "CameraCapture",
        "scope": "source.qml"
    },
    "CameraExposure": {
        "body": "\nCameraExposure {\n    //aperture: real\n    //exposureCompensation: real\n    //exposureMode: enumeration\n    //iso: int\n    //manualAperture: real\n    //manualIso: real\n    //manualShutterSpeed: real\n    //meteringMode: enumeration\n    //shutterSpeed: real\n    //spotMeteringPoint: QPointF\n    //supportedExposureModes: list<ExposureMode>\n    //onSetautoaperture: { }\n    //onSetautoisosensitivity: { }\n    //onSetautoshutterspeed: { }\n}",
        "description": "CameraExposure",
        "prefix": "CameraExposure",
        "scope": "source.qml"
    },
    "CameraFlash": {
        "body": "\nCameraFlash {\n    //mode: enumeration\n    //ready: bool\n    //supportedModes: list<FlashMode>\n    //onFlashmodechanged: { }\n    //onFlashready: { }\n}",
        "description": "CameraFlash",
        "prefix": "CameraFlash",
        "scope": "source.qml"
    },
    "CameraFocus": {
        "body": "\nCameraFocus {\n    //customFocusPoint: point\n    //focusMode: enumeration\n    //focusPointMode: enumeration\n    //focusZones: list<focusZone>\n    //supportedFocusModes: list<FocusMode>\n    //supportedFocusPointModes: list<enumeration>\n}",
        "description": "CameraFocus",
        "prefix": "CameraFocus",
        "scope": "source.qml"
    },
    "CameraImageProcessing": {
        "body": "\nCameraImageProcessing {\n    //brightness: qreal\n    //colorFilter: enumeration\n    //contrast: qreal\n    //denoisingLevel: qreal\n    //isAvailable: bool\n    //manualWhiteBalance: qreal\n    //saturation: qreal\n    //sharpeningLevel: qreal\n    //supportedColorFilters: list<ColorFilter>\n    //supportedWhiteBalanceModes: list<WhiteBalanceMode>\n    //whiteBalanceMode: enumeration\n}",
        "description": "CameraImageProcessing",
        "prefix": "CameraImageProcessing",
        "scope": "source.qml"
    },
    "CameraLens": {
        "body": "\nCameraLens {\n    //aspectRatio: real\n    //bottom: real\n    //farPlane: real\n    //fieldOfView: real\n    //left: real\n    //nearPlane: real\n    //projectionMatrix: matrix4x4\n    //projectionType: enumeration\n    //right: real\n    //top: real\n}",
        "description": "CameraLens",
        "prefix": "CameraLens",
        "scope": "source.qml"
    },
    "CameraRecorder": {
        "body": "\nCameraRecorder {\n    //actualLocation: string\n    //audioBitRate: int\n    //audioChannels: int\n    //audioCodec: string\n    //audioEncodingMode: enumeration\n    //audioSampleRate: int\n    //duration: int\n    //errorCode: enumeration\n    //errorString: string\n    //frameRate: qreal\n    //mediaContainer: string\n    //muted: bool\n    //outputLocation: string\n    //recorderState: enumeration\n    //recorderStatus: enumeration\n    //resolution: size\n    //videoBitRate: int\n    //videoCodec: string\n    //videoEncodingMode: enumeration\n    //onRecord: { }\n    //onSetmetadata: { }\n    //onStop: { }\n}",
        "description": "CameraRecorder",
        "prefix": "CameraRecorder",
        "scope": "source.qml"
    },
    "CameraSelector": {
        "body": "\nCameraSelector {\n    //camera: Entity\n}",
        "description": "CameraSelector",
        "prefix": "CameraSelector",
        "scope": "source.qml"
    },
    "CandlestickSeries": {
        "body": "\nCandlestickSeries {\n    //axisX: AbstractAxis\n    //axisXTop: AbstractAxis\n    //axisY: AbstractAxis\n    //axisYRight: AbstractAxis\n    //bodyOutlineVisible: bool\n    //bodyWidth: real\n    //brushFilename: string\n    //capsVisible: bool\n    //capsWidth: real\n    //count: int\n    //decreasingColor: color\n    //increasingColor: color\n    //maximumColumnWidth: real\n    //minimumColumnWidth: real\n    //onAppend: { }\n    //onAt: { }\n    //onCandlesticksetsadded: { }\n    //onCandlesticksetsremoved: { }\n    //onClear: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onInsert: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onRemove: { }\n}",
        "description": "CandlestickSeries",
        "prefix": "CandlestickSeries",
        "scope": "source.qml"
    },
    "CandlestickSet": {
        "body": "\nCandlestickSet {\n    //brushFilename: string\n    //close: real\n    //high: real\n    //low: real\n    //open: real\n    //timestamp: real\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "CandlestickSet",
        "prefix": "CandlestickSet",
        "scope": "source.qml"
    },
    "Canvas": {
        "body": "\nCanvas {\n    //available: bool\n    //canvasSize: size\n    //canvasWindow: rect\n    //context: object\n    //contextType: string\n    //renderStrategy: enumeration\n    //renderTarget: enumeration\n    //tileSize: size\n    //onCancelrequestanimationframe: { }\n    //onImageloaded: { }\n    //onIsimageerror: { }\n    //onIsimageloaded: { }\n    //onIsimageloading: { }\n    //onLoadimage: { }\n    //onMarkdirty: { }\n    //onPaint: { }\n    //onPainted: { }\n    //onRequestpaint: { }\n    //onUnloadimage: { }\n}",
        "description": "Canvas",
        "prefix": "Canvas",
        "scope": "source.qml"
    },
    "Canvas3D": {
        "body": "\nCanvas3D {\n    //context: Context3D\n    //devicePixelRatio: float\n    //fps: int\n    //pixelSize: size\n    //renderOnDemand: bool\n    //renderTarget: RenderTarget\n}",
        "description": "Canvas3D",
        "prefix": "Canvas3D",
        "scope": "source.qml"
    },
    "Canvas3DAbstractObject": {
        "body": "\nCanvas3DAbstractObject {\n    //invalidated: bool\n    //name: string\n}",
        "description": "Canvas3DAbstractObject",
        "prefix": "Canvas3DAbstractObject",
        "scope": "source.qml"
    },
    "Canvas3DActiveInfo": {
        "body": "\nCanvas3DActiveInfo {\n    //name: string\n    //size: string\n    //type: string\n}",
        "description": "Canvas3DActiveInfo",
        "prefix": "Canvas3DActiveInfo",
        "scope": "source.qml"
    },
    "Canvas3DBuffer": {
        "body": "\nCanvas3DBuffer {\n    //invalidated: bool\n    //name: string\n}",
        "description": "Canvas3DBuffer",
        "prefix": "Canvas3DBuffer",
        "scope": "source.qml"
    },
    "Canvas3DContextAttributes": {
        "body": "\nCanvas3DContextAttributes {\n    //alpha: bool\n    //antialias: bool\n    //depth: bool\n    //failIfMajorPerformanceCaveat: bool\n    //preferLowPowerToHighPerformance: bool\n    //premultipliedAlpha: bool\n    //preserveDrawingBuffer: bool\n    //stencil: bool\n}",
        "description": "Canvas3DContextAttributes",
        "prefix": "Canvas3DContextAttributes",
        "scope": "source.qml"
    },
    "Canvas3DFrameBuffer": {
        "body": "\nCanvas3DFrameBuffer {\n    //invalidated: bool\n    //name: string\n}",
        "description": "Canvas3DFrameBuffer",
        "prefix": "Canvas3DFrameBuffer",
        "scope": "source.qml"
    },
    "Canvas3DProgram": {
        "body": "\nCanvas3DProgram {\n    //invalidated: bool\n    //name: string\n}",
        "description": "Canvas3DProgram",
        "prefix": "Canvas3DProgram",
        "scope": "source.qml"
    },
    "Canvas3DRenderBuffer": {
        "body": "\nCanvas3DRenderBuffer {\n    //invalidated: bool\n    //name: string\n}",
        "description": "Canvas3DRenderBuffer",
        "prefix": "Canvas3DRenderBuffer",
        "scope": "source.qml"
    },
    "Canvas3DShader": {
        "body": "\nCanvas3DShader {\n    //invalidated: bool\n    //name: string\n}",
        "description": "Canvas3DShader",
        "prefix": "Canvas3DShader",
        "scope": "source.qml"
    },
    "Canvas3DShaderPrecisionFormat": {
        "body": "\nCanvas3DShaderPrecisionFormat {\n    //precision: int\n    //rangeMax: int\n    //rangeMin: int\n}",
        "description": "Canvas3DShaderPrecisionFormat",
        "prefix": "Canvas3DShaderPrecisionFormat",
        "scope": "source.qml"
    },
    "Canvas3DTexture": {
        "body": "\nCanvas3DTexture {\n    //invalidated: bool\n    //name: string\n}",
        "description": "Canvas3DTexture",
        "prefix": "Canvas3DTexture",
        "scope": "source.qml"
    },
    "Canvas3DTextureProvider": {
        "body": "\nCanvas3DTextureProvider",
        "description": "Canvas3DTextureProvider",
        "prefix": "Canvas3DTextureProvider",
        "scope": "source.qml"
    },
    "Canvas3DUniformLocation": {
        "body": "\nCanvas3DUniformLocation {\n    //invalidated: bool\n    //name: string\n}",
        "description": "Canvas3DUniformLocation",
        "prefix": "Canvas3DUniformLocation",
        "scope": "source.qml"
    },
    "CanvasGradient": {
        "body": "\nCanvasGradient",
        "description": "CanvasGradient",
        "prefix": "CanvasGradient",
        "scope": "source.qml"
    },
    "CanvasImageData": {
        "body": "\nCanvasImageData {\n    //data: object\n    //height: int\n    //width: int\n}",
        "description": "CanvasImageData",
        "prefix": "CanvasImageData",
        "scope": "source.qml"
    },
    "CanvasPixelArray": {
        "body": "\nCanvasPixelArray {\n    //length: int\n}",
        "description": "CanvasPixelArray",
        "prefix": "CanvasPixelArray",
        "scope": "source.qml"
    },
    "Category": {
        "body": "\nCategory {\n    //category: QPlaceCategory\n    //categoryId: string\n    //icon: PlaceIcon\n    //name: string\n    //plugin: Plugin\n    //status: enumeration\n    //visibility: enumeration\n}",
        "description": "Category",
        "prefix": "Category",
        "scope": "source.qml"
    },
    "CategoryAxis": {
        "body": "\nCategoryAxis {\n    //categoriesLabels: StringList\n    //count: int\n    //labelsPosition: enumeration\n    //startValue: int\n    //onAppend: { }\n    //onRemove: { }\n    //onReplace: { }\n}",
        "description": "CategoryAxis",
        "prefix": "CategoryAxis",
        "scope": "source.qml"
    },
    "CategoryAxis3D": {
        "body": "\nCategoryAxis3D {\n    //labels: list\n}",
        "description": "CategoryAxis3D",
        "prefix": "CategoryAxis3D",
        "scope": "source.qml"
    },
    "CategoryModel": {
        "body": "\nCategoryModel {\n    //hierarchical: bool\n    //plugin: Plugin\n    //status: enumeration\n    //onDatachanged: { }\n}",
        "description": "CategoryModel",
        "prefix": "CategoryModel",
        "scope": "source.qml"
    },
    "CategoryRange": {
        "body": "\nCategoryRange {\n    //endValue: int\n    //label: string\n}",
        "description": "CategoryRange",
        "prefix": "CategoryRange",
        "scope": "source.qml"
    },
    "ChangeLanguageKey": {
        "body": "\nChangeLanguageKey {\n    //customLayoutsOnly: bool\n}",
        "description": "ChangeLanguageKey",
        "prefix": "ChangeLanguageKey",
        "scope": "source.qml"
    },
    "ChartView": {
        "body": "\nChartView {\n    //animationDuration: int\n    //animationEasingCurve: easing\n    //animationOptions: enumeration\n    //axes: list<AbstractAxis>\n    //backgroundColor: color\n    //backgroundRoundness: real\n    //count: int\n    //dropShadowEnabled: bool\n    //legend: Legend\n    //locale: locale\n    //localizeNumbers: bool\n    //margins: Margins\n    //plotArea: rect\n    //plotAreaColor: color\n    //theme: enumeration\n    //title: string\n    //titleColor: color\n    //titleFont: font\n    //onIszoomed: { }\n    //onRemoveallseries: { }\n    //onRemoveseries: { }\n    //onScrolldown: { }\n    //onScrollleft: { }\n    //onScrollright: { }\n    //onScrollup: { }\n    //onSeriesadded: { }\n    //onSeriesremoved: { }\n    //onSetaxisx: { }\n    //onSetaxisy: { }\n    //onZoom: { }\n    //onZoomin: { }\n    //onZoomin: { }\n    //onZoomout: { }\n    //onZoomreset: { }\n}",
        "description": "ChartView",
        "prefix": "ChartView",
        "scope": "source.qml"
    },
    "CheckBox: QtQuickControls": {
        "body": "\nCheckBox: QtQuickControls {\n    //activeFocusOnPress: bool\n    //checked: bool\n    //checkedState: int\n    //exclusiveGroup: ExclusiveGroup\n    //hovered: bool\n    //partiallyCheckedEnabled: bool\n    //pressed: bool\n    //style: Component\n    //text: string\n    //tooltip: string\n    //onClicked: { }\n}",
        "description": "CheckBox: QtQuickControls",
        "prefix": "CheckBox: QtQuickControls",
        "scope": "source.qml"
    },
    "CheckBox: QtQuickControls2": {
        "body": "\nCheckBox: QtQuickControls2 {\n    //checkState: enumeration\n    //nextCheckState: function\n    //tristate: bool\n}",
        "description": "CheckBox: QtQuickControls2",
        "prefix": "CheckBox: QtQuickControls2",
        "scope": "source.qml"
    },
    "CheckBoxStyle": {
        "body": "\nCheckBoxStyle {\n    //background: Component\n    //control: CheckBox\n    //indicator: Component\n    //label: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //spacing: int\n}",
        "description": "CheckBoxStyle",
        "prefix": "CheckBoxStyle",
        "scope": "source.qml"
    },
    "CheckDelegate": {
        "body": "\nCheckDelegate {\n    //checkState: enumeration\n    //nextCheckState: function\n    //tristate: bool\n}",
        "description": "CheckDelegate",
        "prefix": "CheckDelegate",
        "scope": "source.qml"
    },
    "CircularGauge": {
        "body": "\nCircularGauge {\n    //maximumValue: real\n    //minimumValue: real\n    //stepSize: real\n    //style: Component\n    //tickmarksVisible: bool\n    //value: alias\n}",
        "description": "CircularGauge",
        "prefix": "CircularGauge",
        "scope": "source.qml"
    },
    "CircularGaugeStyle": {
        "body": "\nCircularGaugeStyle {\n    //angleRange: real\n    //background: Component\n    //control: CircularGauge\n    //foreground: Component\n    //labelCount: int\n    //labelInset: real\n    //labelStepSize: real\n    //maximumValueAngle: real\n    //minimumValueAngle: real\n    //minorTickmark: Component\n    //minorTickmarkCount: int\n    //minorTickmarkInset: real\n    //needle: Component\n    //needleRotation: real\n    //outerRadius: real\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //tickmark: Component\n    //tickmarkCount: int\n    //tickmarkInset: real\n    //tickmarkLabel: Component\n    //tickmarkStepSize: real\n}",
        "description": "CircularGaugeStyle",
        "prefix": "CircularGaugeStyle",
        "scope": "source.qml"
    },
    "ClearBuffers": {
        "body": "\nClearBuffers {\n    //buffers: enumeration\n    //clearDepthValue: real\n    //clearStencilValue: int\n    //color: color\n    //colorbuffer: RenderTargetOutput\n}",
        "description": "ClearBuffers",
        "prefix": "ClearBuffers",
        "scope": "source.qml"
    },
    "ClipAnimator": {
        "body": "\nClipAnimator {\n    //clip: var\n}",
        "description": "ClipAnimator",
        "prefix": "ClipAnimator",
        "scope": "source.qml"
    },
    "ClipPlane": {
        "body": "\nClipPlane {\n    //distance: real\n    //normal: vector3d\n    //planeIndex: int\n}",
        "description": "ClipPlane",
        "prefix": "ClipPlane",
        "scope": "source.qml"
    },
    "CloseEvent": {
        "body": "\nCloseEvent {\n    //accepted: bool\n}",
        "description": "CloseEvent",
        "prefix": "CloseEvent",
        "scope": "source.qml"
    },
    "ColorAnimation": {
        "body": "\nColorAnimation {\n    //from: color\n    //to: color\n}",
        "description": "ColorAnimation",
        "prefix": "ColorAnimation",
        "scope": "source.qml"
    },
    "ColorDialog": {
        "body": "\nColorDialog {\n    //color: color\n    //currentColor: color\n    //modality: Qt::WindowModality\n    //showAlphaChannel: bool\n    //title: string\n    //visible: bool\n}",
        "description": "ColorDialog",
        "prefix": "ColorDialog",
        "scope": "source.qml"
    },
    "ColorDialogRequest": {
        "body": "\nColorDialogRequest {\n    //accepted: bool\n    //color: color\n}",
        "description": "ColorDialogRequest",
        "prefix": "ColorDialogRequest",
        "scope": "source.qml"
    },
    "ColorGradient": {
        "body": "\nColorGradient {\n    //stops: list<ColorGradientStop>\n}",
        "description": "ColorGradient",
        "prefix": "ColorGradient",
        "scope": "source.qml"
    },
    "ColorGradientStop": {
        "body": "\nColorGradientStop {\n    //color: color\n    //position: real\n}",
        "description": "ColorGradientStop",
        "prefix": "ColorGradientStop",
        "scope": "source.qml"
    },
    "ColorMask": {
        "body": "\nColorMask {\n    //alphaMasked: bool\n    //blueMasked: bool\n    //greenMasked: bool\n    //redMasked: bool\n}",
        "description": "ColorMask",
        "prefix": "ColorMask",
        "scope": "source.qml"
    },
    "ColorOverlay": {
        "body": "\nColorOverlay {\n    //cached: bool\n    //color: color\n    //source: variant\n}",
        "description": "ColorOverlay",
        "prefix": "ColorOverlay",
        "scope": "source.qml"
    },
    "Colorize": {
        "body": "\nColorize {\n    //cached: bool\n    //hue: real\n    //lightness: real\n    //saturation: real\n    //source: variant\n}",
        "description": "Colorize",
        "prefix": "Colorize",
        "scope": "source.qml"
    },
    "Column": {
        "body": "\nColumn {\n    //add: Transition\n    //bottomPadding: real\n    //leftPadding: real\n    //move: Transition\n    //padding: real\n    //populate: Transition\n    //rightPadding: real\n    //spacing: real\n    //topPadding: real\n    //onForcelayout: { }\n    //onPositioningcomplete: { }\n}",
        "description": "Column",
        "prefix": "Column",
        "scope": "source.qml"
    },
    "ColumnLayout": {
        "body": "\nColumnLayout {\n    //layoutDirection: enumeration\n    //spacing: real\n}",
        "description": "ColumnLayout",
        "prefix": "ColumnLayout",
        "scope": "source.qml"
    },
    "ComboBox: QtQuickControls": {
        "body": "\nComboBox: QtQuickControls {\n    //acceptableInput: bool\n    //activeFocusOnPress: bool\n    //count: int\n    //currentIndex: int\n    //currentText: string\n    //editText: string\n    //editable: bool\n    //hovered: bool\n    //inputMethodComposing: bool\n    //inputMethodHints: enumeration\n    //menu: Component\n    //model: model\n    //pressed: bool\n    //selectByMouse: bool\n    //style: Component\n    //textRole: string\n    //validator: Validator\n    //onAccepted: { }\n    //onActivated: { }\n}",
        "description": "ComboBox: QtQuickControls",
        "prefix": "ComboBox: QtQuickControls",
        "scope": "source.qml"
    },
    "ComboBox: QtQuickControls2": {
        "body": "\nComboBox: QtQuickControls2 {\n    //acceptableInput: bool\n    //count: int\n    //currentIndex: int\n    //currentText: string\n    //delegate: Component\n    //displayText: string\n    //down: bool\n    //editText: string\n    //editable: bool\n    //flat: bool\n    //highlightedIndex: int\n    //indicator: Item\n    //inputMethodComposing: bool\n    //inputMethodHints: flags\n    //model: model\n    //popup: Popup\n    //pressed: bool\n    //textRole: string\n    //validator: Validator\n}",
        "description": "ComboBox: QtQuickControls2",
        "prefix": "ComboBox: QtQuickControls2",
        "scope": "source.qml"
    },
    "ComboBoxStyle": {
        "body": "\nComboBoxStyle {\n    //background: Component\n    //control: ComboBox\n    //dropDownButtonWidth: int\n    //font: font\n    //label: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //renderType: int\n    //selectedTextColor: color\n    //selectionColor: color\n    //textColor: color\n}",
        "description": "ComboBoxStyle",
        "prefix": "ComboBoxStyle",
        "scope": "source.qml"
    },
    "Compass": {
        "body": "\nCompass {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "Compass",
        "prefix": "Compass",
        "scope": "source.qml"
    },
    "CompassReading": {
        "body": "\nCompassReading {\n    //azimuth: qreal\n    //calibrationLevel: qreal\n}",
        "description": "CompassReading",
        "prefix": "CompassReading",
        "scope": "source.qml"
    },
    "Component": {
        "body": "\nComponent {\n    //progress: real\n    //status: enumeration\n    //url: url\n    //onCompleted: { }\n    //onDestruction: { }\n}",
        "description": "Component",
        "prefix": "Component",
        "scope": "source.qml"
    },
    "Component3D": {
        "body": "\nComponent3D {\n    //isShareable: bool\n}",
        "description": "Component3D",
        "prefix": "Component3D",
        "scope": "source.qml"
    },
    "ComputeCommand": {
        "body": "\nComputeCommand {\n    //workGroupX: int\n    //workGroupY: int\n    //workGroupZ: int\n}",
        "description": "ComputeCommand",
        "prefix": "ComputeCommand",
        "scope": "source.qml"
    },
    "ConeGeometry": {
        "body": "\nConeGeometry {\n    //bottomRadius: real\n    //hasBottomEndcap: bool\n    //hasTopEndcap: bool\n    //indexAttribute: Attribute\n    //length: real\n    //normalAttribute: Attribute\n    //positionAttribute: Attribute\n    //rings: int\n    //slices: int\n    //texCoordAttribute: Attribute\n    //topRadius: real\n}",
        "description": "ConeGeometry",
        "prefix": "ConeGeometry",
        "scope": "source.qml"
    },
    "ConeMesh": {
        "body": "\nConeMesh {\n    //bottomRadius: real\n    //hasBottomEndcap: bool\n    //hasTopEndcap: bool\n    //length: real\n    //rings: int\n    //slices: int\n    //topRadius: real\n}",
        "description": "ConeMesh",
        "prefix": "ConeMesh",
        "scope": "source.qml"
    },
    "ConicalGradient: QtGraphicalEffects": {
        "body": "\nConicalGradient: QtGraphicalEffects {\n    //angle: real\n    //cached: bool\n    //gradient: Gradient\n    //horizontalOffset: real\n    //source: variant\n    //verticalOffset: real\n}",
        "description": "ConicalGradient: QtGraphicalEffects",
        "prefix": "ConicalGradient: QtGraphicalEffects",
        "scope": "source.qml"
    },
    "ConicalGradient: QtQuick": {
        "body": "\nConicalGradient: QtQuick {\n    //angle: real\n    //centerX: real\n    //centerY: real\n}",
        "description": "ConicalGradient: QtQuick",
        "prefix": "ConicalGradient: QtQuick",
        "scope": "source.qml"
    },
    "Connections": {
        "body": "\nConnections {\n    //enabled: bool\n    //ignoreUnknownSignals: bool\n    //target: Object\n}",
        "description": "Connections",
        "prefix": "Connections",
        "scope": "source.qml"
    },
    "ContactDetail": {
        "body": "\nContactDetail {\n    //contactDetail: QPlaceContactDetail\n    //label: string\n    //value: string\n}",
        "description": "ContactDetail",
        "prefix": "ContactDetail",
        "scope": "source.qml"
    },
    "ContactDetails": {
        "body": "\nContactDetails",
        "description": "ContactDetails",
        "prefix": "ContactDetails",
        "scope": "source.qml"
    },
    "Container": {
        "body": "\nContainer {\n    //contentChildren: list<Item>\n    //contentData: list<Object>\n    //contentModel: model\n    //count: int\n    //currentIndex: int\n    //currentItem: Item\n}",
        "description": "Container",
        "prefix": "Container",
        "scope": "source.qml"
    },
    "Context2D": {
        "body": "\nContext2D {\n    //canvas: QtQuick::Canvas\n    //fillRule: enumeration\n    //fillStyle: variant\n    //font: string\n    //globalAlpha: real\n    //globalCompositeOperation: string\n    //lineCap: string\n    //lineJoin: string\n    //lineWidth: real\n    //miterLimit: real\n    //shadowBlur: real\n    //shadowColor: string\n    //shadowOffsetX: qreal\n    //shadowOffsetY: qreal\n    //strokeStyle: variant\n    //textAlign: string\n    //textBaseline: string\n    //onDrawimage: { }\n    //onDrawimage: { }\n    //onDrawimage: { }\n}",
        "description": "Context2D",
        "prefix": "Context2D",
        "scope": "source.qml"
    },
    "Context3D": {
        "body": "\nContext3D {\n    //canvas: Canvas3D\n    //drawingBufferHeight: int\n    //drawingBufferWidth: int\n    //onViewport: { }\n}",
        "description": "Context3D",
        "prefix": "Context3D",
        "scope": "source.qml"
    },
    "ContextMenuRequest": {
        "body": "\nContextMenuRequest {\n    //accepted: bool\n    //editFlags: flags\n    //isContentEditable: bool\n    //linkText: string\n    //linkUrl: url\n    //mediaFlags: flags\n    //mediaType: enumeration\n    //mediaUrl: url\n    //misspelledWord: string\n    //selectedText: string\n    //spellCheckerSuggestions: stringlist\n    //x: int\n    //y: int\n}",
        "description": "ContextMenuRequest",
        "prefix": "ContextMenuRequest",
        "scope": "source.qml"
    },
    "Control": {
        "body": "\nControl {\n    //availableHeight: real\n    //availableWidth: real\n    //background: Item\n    //bottomPadding: real\n    //contentItem: Item\n    //focusPolicy: enumeration\n    //focusReason: enumeration\n    //font: font\n    //hoverEnabled: bool\n    //hovered: bool\n    //leftPadding: real\n    //locale: Locale\n    //mirrored: bool\n    //padding: real\n    //palette: palette\n    //rightPadding: real\n    //spacing: real\n    //topPadding: real\n    //visualFocus: bool\n    //wheelEnabled: bool\n}",
        "description": "Control",
        "prefix": "Control",
        "scope": "source.qml"
    },
    "CoordinateAnimation": {
        "body": "\nCoordinateAnimation {\n    //direction: enumeration\n    //from: coordinate\n    //to: coordinate\n}",
        "description": "CoordinateAnimation",
        "prefix": "CoordinateAnimation",
        "scope": "source.qml"
    },
    "CuboidGeometry": {
        "body": "\nCuboidGeometry {\n    //indexAttribute: Attribute\n    //normalAttribute: Attribute\n    //positionAttribute: Attribute\n    //tangentAttribute: Attribute\n    //texCoordAttribute: Attribute\n    //xExtent: real\n    //xyMeshResolution: size\n    //xzMeshResolution: size\n    //yExtent: real\n    //yzMeshResolution: size\n    //zExtent: real\n}",
        "description": "CuboidGeometry",
        "prefix": "CuboidGeometry",
        "scope": "source.qml"
    },
    "CuboidMesh": {
        "body": "\nCuboidMesh {\n    //xExtent: real\n    //xyMeshResolution: size\n    //xzMeshResolution: size\n    //yExtent: real\n    //yzMeshResolution: size\n    //zExtent: real\n}",
        "description": "CuboidMesh",
        "prefix": "CuboidMesh",
        "scope": "source.qml"
    },
    "CullFace": {
        "body": "\nCullFace {\n    //mode: enumeration\n}",
        "description": "CullFace",
        "prefix": "CullFace",
        "scope": "source.qml"
    },
    "Custom3DItem": {
        "body": "\nCustom3DItem {\n    //meshFile: string\n    //position: vector3d\n    //positionAbsolute: bool\n    //rotation: quaternion\n    //scaling: vector3d\n    //scalingAbsolute: bool\n    //shadowCasting: bool\n    //textureFile: string\n    //visible: bool\n}",
        "description": "Custom3DItem",
        "prefix": "Custom3DItem",
        "scope": "source.qml"
    },
    "Custom3DLabel": {
        "body": "\nCustom3DLabel {\n    //backgroundColor: color\n    //backgroundEnabled: bool\n    //borderEnabled: bool\n    //facingCamera: bool\n    //font: font\n    //text: string\n    //textColor: color\n}",
        "description": "Custom3DLabel",
        "prefix": "Custom3DLabel",
        "scope": "source.qml"
    },
    "Custom3DVolume": {
        "body": "\nCustom3DVolume {\n    //alphaMultiplier: real\n    //drawSliceFrames: bool\n    //drawSlices: bool\n    //preserveOpacity: bool\n    //sliceFrameColor: color\n    //sliceFrameGaps: vector3d\n    //sliceFrameThicknesses: vector3d\n    //sliceFrameWidths: vector3d\n    //sliceIndexX: int\n    //sliceIndexY: int\n    //sliceIndexZ: int\n    //textureDepth: int\n    //textureHeight: int\n    //textureWidth: int\n    //useHighDefShader: bool\n}",
        "description": "Custom3DVolume",
        "prefix": "Custom3DVolume",
        "scope": "source.qml"
    },
    "CustomParticle": {
        "body": "\nCustomParticle {\n    //fragmentShader: string\n    //vertexShader: string\n}",
        "description": "CustomParticle",
        "prefix": "CustomParticle",
        "scope": "source.qml"
    },
    "CylinderGeometry": {
        "body": "\nCylinderGeometry {\n    //indexAttribute: Attribute\n    //length: real\n    //normalAttribute: Attribute\n    //positionAttribute: Attribute\n    //radius: real\n    //rings: int\n    //slices: int\n    //texCoordAttribute: Attribute\n}",
        "description": "CylinderGeometry",
        "prefix": "CylinderGeometry",
        "scope": "source.qml"
    },
    "CylinderMesh": {
        "body": "\nCylinderMesh {\n    //length: real\n    //radius: real\n    //rings: int\n    //slices: int\n}",
        "description": "CylinderMesh",
        "prefix": "CylinderMesh",
        "scope": "source.qml"
    },
    "Date": {
        "body": "\nDate",
        "description": "Date",
        "prefix": "Date",
        "scope": "source.qml"
    },
    "DateTimeAxis": {
        "body": "\nDateTimeAxis {\n    //format: string\n    //max: datetime\n    //min: datetime\n    //tickCount: int\n    //onRangechanged: { }\n}",
        "description": "DateTimeAxis",
        "prefix": "DateTimeAxis",
        "scope": "source.qml"
    },
    "DelayButton: QtQuickControls2": {
        "body": "\nDelayButton: QtQuickControls2 {\n    //delay: int\n    //progress: real\n    //transition: Transition\n    //onActivated: { }\n}",
        "description": "DelayButton: QtQuickControls2",
        "prefix": "DelayButton: QtQuickControls2",
        "scope": "source.qml"
    },
    "DelayButton: QtQuickExtras": {
        "body": "\nDelayButton: QtQuickExtras {\n    //delay: int\n    //progress: real\n    //onActivated: { }\n}",
        "description": "DelayButton: QtQuickExtras",
        "prefix": "DelayButton: QtQuickExtras",
        "scope": "source.qml"
    },
    "DelayButtonStyle": {
        "body": "\nDelayButtonStyle {\n    //control: DelayButton\n    //foreground: Component\n    //progressBarDropShadowColor: color\n    //progressBarGradient: Gradient\n}",
        "description": "DelayButtonStyle",
        "prefix": "DelayButtonStyle",
        "scope": "source.qml"
    },
    "DelegateModel": {
        "body": "\nDelegateModel {\n    //count: int\n    //delegate: Component\n    //filterOnGroup: string\n    //groups: stringlist [attached]\n    //groups: list<DelegateModelGroup>\n    //inItems: int [attached]\n    //inPersistedItems: int [attached]\n    //isUnresolved: bool [attached]\n    //items: DelegateModelGroup\n    //itemsIndex: int [attached]\n    //model: int [attached]\n    //model: model\n    //parts: object\n    //persistedItems: DelegateModelGroup\n    //persistedItemsIndex: int [attached]\n    //rootIndex: QModelIndex\n}",
        "description": "DelegateModel",
        "prefix": "DelegateModel",
        "scope": "source.qml"
    },
    "DelegateModelGroup": {
        "body": "\nDelegateModelGroup {\n    //count: int\n    //includeByDefault: bool\n    //name: string\n    //onAddgroups: { }\n    //onChanged: { }\n    //onCreate: { }\n    //onCreate: { }\n    //onCreate: { }\n    //onInsert: { }\n    //onInsert: { }\n    //onMove: { }\n    //onRemove: { }\n    //onRemovegroups: { }\n    //onResolve: { }\n    //onSetgroups: { }\n    //onSetgroups: { }\n}",
        "description": "DelegateModelGroup",
        "prefix": "DelegateModelGroup",
        "scope": "source.qml"
    },
    "DepthTest": {
        "body": "\nDepthTest {\n    //depthFunction: enumeration\n}",
        "description": "DepthTest",
        "prefix": "DepthTest",
        "scope": "source.qml"
    },
    "Desaturate": {
        "body": "\nDesaturate {\n    //cached: bool\n    //desaturation: real\n    //source: variant\n}",
        "description": "Desaturate",
        "prefix": "Desaturate",
        "scope": "source.qml"
    },
    "Dial: QtQuickControls2": {
        "body": "\nDial: QtQuickControls2 {\n    //angle: real\n    //from: real\n    //handle: Item\n    //live: bool\n    //position: real\n    //pressed: bool\n    //snapMode: enumeration\n    //stepSize: real\n    //to: real\n    //value: real\n    //wrap: bool\n    //onMoved: { }\n}",
        "description": "Dial: QtQuickControls2",
        "prefix": "Dial: QtQuickControls2",
        "scope": "source.qml"
    },
    "Dial: QtQuickExtras": {
        "body": "\nDial: QtQuickExtras {\n    //activeFocusOnPress: bool\n    //hovered: real\n    //maximumValue: real\n    //minimumValue: real\n    //pressed: bool\n    //stepSize: real\n    //style: Component\n    //tickmarksVisible: bool\n    //value: real\n}",
        "description": "Dial: QtQuickExtras",
        "prefix": "Dial: QtQuickExtras",
        "scope": "source.qml"
    },
    "DialStyle": {
        "body": "\nDialStyle {\n    //background: Component\n    //control: Dial\n    //handle: Component\n    //handleInset: real\n    //labelCount: int\n    //labelInset: real\n    //labelStepSize: real\n    //minorTickmark: Component\n    //minorTickmarkCount: int\n    //minorTickmarkInset: real\n    //outerRadius: real\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //tickmark: Component\n    //tickmarkCount: int\n    //tickmarkInset: real\n    //tickmarkLabel: Component\n    //tickmarkStepSize: real\n}",
        "description": "DialStyle",
        "prefix": "DialStyle",
        "scope": "source.qml"
    },
    "Dialog: QtQuickControls2": {
        "body": "\nDialog: QtQuickControls2 {\n    //footer: Item\n    //header: Item\n    //result: int\n    //standardButtons: enumeration\n    //title: string\n    //onAccepted: { }\n    //onApplied: { }\n    //onDiscarded: { }\n    //onHelprequested: { }\n    //onRejected: { }\n    //onReset: { }\n}",
        "description": "Dialog: QtQuickControls2",
        "prefix": "Dialog: QtQuickControls2",
        "scope": "source.qml"
    },
    "Dialog: QtQuickDialogs": {
        "body": "\nDialog: QtQuickDialogs {\n    //clickedButton: StandardButton\n    //contentItem: QObject\n    //modality: Qt::WindowModality\n    //standardButtons: StandardButtons\n    //title: string\n    //visible: bool\n    //onAccepted: { }\n    //onApply: { }\n    //onDiscard: { }\n    //onHelp: { }\n    //onNo: { }\n    //onRejected: { }\n    //onReset: { }\n    //onYes: { }\n}",
        "description": "Dialog: QtQuickDialogs",
        "prefix": "Dialog: QtQuickDialogs",
        "scope": "source.qml"
    },
    "DialogButtonBox": {
        "body": "\nDialogButtonBox {\n    //alignment: flags\n    //buttonBox: DialogButtonBox [attached]\n    //buttonRole: enumeration [attached]\n    //delegate: Component\n    //position: enumeration\n    //standardButtons: enumeration\n    //onAccepted: { }\n    //onApplied: { }\n    //onClicked: { }\n    //onDiscarded: { }\n    //onHelprequested: { }\n    //onRejected: { }\n    //onReset: { }\n}",
        "description": "DialogButtonBox",
        "prefix": "DialogButtonBox",
        "scope": "source.qml"
    },
    "DiffuseMapMaterial": {
        "body": "\nDiffuseMapMaterial {\n    //ambient: color\n    //diffuse: TextureImage\n    //shininess: real\n    //specular: color\n    //textureScale: real\n}",
        "description": "DiffuseMapMaterial",
        "prefix": "DiffuseMapMaterial",
        "scope": "source.qml"
    },
    "DiffuseSpecularMapMaterial": {
        "body": "\nDiffuseSpecularMapMaterial {\n    //ambient: color\n    //diffuse: TextureImage\n    //shininess: real\n    //specular: TextureImage\n    //textureScale: real\n}",
        "description": "DiffuseSpecularMapMaterial",
        "prefix": "DiffuseSpecularMapMaterial",
        "scope": "source.qml"
    },
    "DiffuseSpecularMaterial": {
        "body": "\nDiffuseSpecularMaterial {\n    //alphaBlending: bool\n    //ambient: color\n    //diffuse: var\n    //normal: var\n    //shininess: real\n    //specular: var\n    //textureScale: real\n}",
        "description": "DiffuseSpecularMaterial",
        "prefix": "DiffuseSpecularMaterial",
        "scope": "source.qml"
    },
    "DirectionalBlur": {
        "body": "\nDirectionalBlur {\n    //angle: real\n    //cached: bool\n    //length: real\n    //samples: int\n    //source: variant\n    //transparentBorder: bool\n}",
        "description": "DirectionalBlur",
        "prefix": "DirectionalBlur",
        "scope": "source.qml"
    },
    "DirectionalLight": {
        "body": "\nDirectionalLight {\n    //worldDirection: vector3d\n}",
        "description": "DirectionalLight",
        "prefix": "DirectionalLight",
        "scope": "source.qml"
    },
    "DispatchCompute": {
        "body": "\nDispatchCompute {\n    //workGroupX: int\n    //workGroupY: int\n    //workGroupZ: int\n}",
        "description": "DispatchCompute",
        "prefix": "DispatchCompute",
        "scope": "source.qml"
    },
    "Displace": {
        "body": "\nDisplace {\n    //cached: bool\n    //displacement: real\n    //displacementSource: variant\n    //source: variant\n}",
        "description": "Displace",
        "prefix": "Displace",
        "scope": "source.qml"
    },
    "DistanceReading": {
        "body": "\nDistanceReading {\n    //distance: qreal\n}",
        "description": "DistanceReading",
        "prefix": "DistanceReading",
        "scope": "source.qml"
    },
    "DistanceSensor": {
        "body": "\nDistanceSensor {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "DistanceSensor",
        "prefix": "DistanceSensor",
        "scope": "source.qml"
    },
    "Dithering": {
        "body": "\nDithering {\n    //childNodes: list<Node>\n    //data: list<QtQml::QtObject>\n    //propertyTrackingOverrides: QJSValue\n}",
        "description": "Dithering",
        "prefix": "Dithering",
        "scope": "source.qml"
    },
    "DoubleValidator": {
        "body": "\nDoubleValidator {\n    //bottom: real\n    //decimals: int\n    //locale: string\n    //notation: enumeration\n    //top: real\n}",
        "description": "DoubleValidator",
        "prefix": "DoubleValidator",
        "scope": "source.qml"
    },
    "Drag": {
        "body": "\nDrag {\n    //active: bool [attached]\n    //dragType: enumeration [attached]\n    //hotSpot: QPointF [attached]\n    //imageSource: QUrl [attached]\n    //keys: stringlist [attached]\n    //mimeData: stringlist [attached]\n    //proposedAction: enumeration [attached]\n    //source: Object [attached]\n    //supportedActions: flags [attached]\n    //target: Object [attached]\n    //onDragfinished: { }\n    //onDragstarted: { }\n}",
        "description": "Drag",
        "prefix": "Drag",
        "scope": "source.qml"
    },
    "DragEvent": {
        "body": "\nDragEvent {\n    //accepted: bool\n    //action: enumeration\n    //colorData: color\n    //drag.source: Object\n    //formats: stringlist\n    //hasColor: bool\n    //hasHtml: bool\n    //hasText: bool\n    //hasUrls: bool\n    //html: string\n    //keys: stringlist\n    //proposedAction: flags\n    //supportedActions: flags\n    //text: string\n    //urls: urllist\n    //x: real\n    //y: real\n    //onAccept: { }\n    //onAccept: { }\n    //onAcceptproposedaction: { }\n}",
        "description": "DragEvent",
        "prefix": "DragEvent",
        "scope": "source.qml"
    },
    "DragHandler": {
        "body": "\nDragHandler {\n    //acceptedButtons: int\n    //acceptedDevices: int\n    //acceptedModifiers: int\n    //acceptedPointerTypes: int\n    //active: bool\n    //enabled: bool\n    //grabPermission: bool\n    //parent: Item\n    //point: HandlerPoint\n    //target: Item\n    //translation: QVector2D\n    //xAxis.enabled: bool\n    //xAxis.maximum: real\n    //xAxis.minimum: real\n    //yAxis.enabled: bool\n    //yAxis.maximum: real\n    //yAxis.minimum: real\n    //onCanceled: { }\n    //onGrabchanged: { }\n}",
        "description": "DragHandler",
        "prefix": "DragHandler",
        "scope": "source.qml"
    },
    "Drawer": {
        "body": "\nDrawer {\n    //dragMargin: real\n    //edge: enumeration\n    //interactive: bool\n    //position: real\n}",
        "description": "Drawer",
        "prefix": "Drawer",
        "scope": "source.qml"
    },
    "DropArea": {
        "body": "\nDropArea {\n    //containsDrag: bool\n    //drag.source: Object\n    //drag.x: qreal\n    //drag.y: qreal\n    //keys: stringlist\n    //onDropped: { }\n    //onEntered: { }\n    //onExited: { }\n    //onPositionchanged: { }\n}",
        "description": "DropArea",
        "prefix": "DropArea",
        "scope": "source.qml"
    },
    "DropShadow": {
        "body": "\nDropShadow {\n    //cached: alias\n    //color: alias\n    //horizontalOffset: real\n    //radius: int\n    //samples: alias\n    //source: alias\n    //spread: alias\n    //transparentBorder: alias\n    //verticalOffset: real\n}",
        "description": "DropShadow",
        "prefix": "DropShadow",
        "scope": "source.qml"
    },
    "DwmFeatures": {
        "body": "\nDwmFeatures {\n    //blurBehindEnabled: bool\n    //bottomGlassMargin: int\n    //excludedFromPeek: bool\n    //flip3DPolicy: QtWin::WindowFlip3DPolicy\n    //leftGlassMargin: int\n    //peekDisallowed: bool\n    //rightGlassMargin: int\n    //topGlassMargin: int\n}",
        "description": "DwmFeatures",
        "prefix": "DwmFeatures",
        "scope": "source.qml"
    },
    "DynamicParameter": {
        "body": "\nDynamicParameter {\n    //type: string\n}",
        "description": "DynamicParameter",
        "prefix": "DynamicParameter",
        "scope": "source.qml"
    },
    "EditorialModel": {
        "body": "\nEditorialModel {\n    //batchSize: int\n    //place: Place\n    //totalCount: int\n}",
        "description": "EditorialModel",
        "prefix": "EditorialModel",
        "scope": "source.qml"
    },
    "Effect": {
        "body": "\nEffect {\n    //parameters: list<Parameter>\n    //techniques: list<Technique>\n}",
        "description": "Effect",
        "prefix": "Effect",
        "scope": "source.qml"
    },
    "EllipseShape": {
        "body": "\nEllipseShape {\n    //fill: bool\n}",
        "description": "EllipseShape",
        "prefix": "EllipseShape",
        "scope": "source.qml"
    },
    "Emitter": {
        "body": "\nEmitter {\n    //acceleration: StochasticDirection\n    //emitRate: real\n    //enabled: bool\n    //endSize: real\n    //group: string\n    //lifeSpan: int\n    //lifeSpanVariation: int\n    //maximumEmitted: int\n    //shape: Shape\n    //size: real\n    //sizeVariation: real\n    //startTime: int\n    //system: ParticleSystem\n    //velocity: StochasticDirection\n    //velocityFromMovement: qreal\n    //onBurst: { }\n    //onBurst: { }\n    //onEmitparticles: { }\n    //onPulse: { }\n}",
        "description": "Emitter",
        "prefix": "Emitter",
        "scope": "source.qml"
    },
    "EnterKey: QtQuick": {
        "body": "\nEnterKey: QtQuick {\n    //type: enumeration [attached]\n}",
        "description": "EnterKey: QtQuick",
        "prefix": "EnterKey: QtQuick",
        "scope": "source.qml"
    },
    "EnterKey: QtVirtualKeyboard": {
        "body": "\nEnterKey: QtVirtualKeyboard {\n    //actionId: int\n}",
        "description": "EnterKey: QtVirtualKeyboard",
        "prefix": "EnterKey: QtVirtualKeyboard",
        "scope": "source.qml"
    },
    "EnterKeyAction": {
        "body": "\nEnterKeyAction {\n    //actionId: int [attached]\n    //enabled: bool [attached]\n    //label: string [attached]\n}",
        "description": "EnterKeyAction",
        "prefix": "EnterKeyAction",
        "scope": "source.qml"
    },
    "Entity": {
        "body": "\nEntity {\n    //components: list<Component3D>\n}",
        "description": "Entity",
        "prefix": "Entity",
        "scope": "source.qml"
    },
    "EntityLoader": {
        "body": "\nEntityLoader {\n    //entity: QtQml::QtObject\n    //source: url\n    //status: Status\n}",
        "description": "EntityLoader",
        "prefix": "EntityLoader",
        "scope": "source.qml"
    },
    "EnvironmentLight": {
        "body": "\nEnvironmentLight {\n    //irradiance: Texture\n    //specular: Texture\n}",
        "description": "EnvironmentLight",
        "prefix": "EnvironmentLight",
        "scope": "source.qml"
    },
    "EventConnection": {
        "body": "\nEventConnection {\n    //events: stringlist\n    //stateMachine: ScxmlStateMachine\n    //onOccurred: { }\n}",
        "description": "EventConnection",
        "prefix": "EventConnection",
        "scope": "source.qml"
    },
    "EventPoint": {
        "body": "\nEventPoint {\n    //accepted: bool\n    //pointId: int\n    //position: point\n    //sceneGrabPosition: point\n    //scenePosition: point\n    //scenePressPosition: point\n    //state: int\n    //timeHeld: real\n    //velocity: vector2d\n}",
        "description": "EventPoint",
        "prefix": "EventPoint",
        "scope": "source.qml"
    },
    "EventTouchPoint": {
        "body": "\nEventTouchPoint {\n    //ellipseDiameters: size\n    //pressure: qreal\n    //rotation: qreal\n    //uniqueId: QPointerUniqueId\n}",
        "description": "EventTouchPoint",
        "prefix": "EventTouchPoint",
        "scope": "source.qml"
    },
    "ExclusiveGroup": {
        "body": "\nExclusiveGroup {\n    //current: object\n}",
        "description": "ExclusiveGroup",
        "prefix": "ExclusiveGroup",
        "scope": "source.qml"
    },
    "ExtendedAttributes": {
        "body": "\nExtendedAttributes",
        "description": "ExtendedAttributes",
        "prefix": "ExtendedAttributes",
        "scope": "source.qml"
    },
    "ExtrudedTextGeometry": {
        "body": "\nExtrudedTextGeometry {\n    //depth: float\n    //font: QFont\n    //indexAttribute: Attribute\n    //normalAttribute: Attribute\n    //positionAttribute: Attribute\n    //text: QString\n}",
        "description": "ExtrudedTextGeometry",
        "prefix": "ExtrudedTextGeometry",
        "scope": "source.qml"
    },
    "ExtrudedTextMesh": {
        "body": "\nExtrudedTextMesh {\n    //depth: float\n    //font: QFont\n    //text: QString\n}",
        "description": "ExtrudedTextMesh",
        "prefix": "ExtrudedTextMesh",
        "scope": "source.qml"
    },
    "FastBlur": {
        "body": "\nFastBlur {\n    //cached: bool\n    //radius: real\n    //source: variant\n    //transparentBorder: bool\n}",
        "description": "FastBlur",
        "prefix": "FastBlur",
        "scope": "source.qml"
    },
    "FileDialog": {
        "body": "\nFileDialog {\n    //defaultSuffix: string\n    //fileUrl: url\n    //fileUrls: list<url>\n    //folder: url\n    //modality: Qt::WindowModality\n    //nameFilters: list<string>\n    //selectExisting: bool\n    //selectFolder: bool\n    //selectMultiple: bool\n    //selectedNameFilter: string\n    //shortcuts: Object\n    //sidebarVisible: bool\n    //title: string\n    //visible: bool\n}",
        "description": "FileDialog",
        "prefix": "FileDialog",
        "scope": "source.qml"
    },
    "FileDialogRequest": {
        "body": "\nFileDialogRequest {\n    //accepted: bool\n    //acceptedMimeTypes: stringlist\n    //defaultFileName: string\n    //mode: enumeration\n}",
        "description": "FileDialogRequest",
        "prefix": "FileDialogRequest",
        "scope": "source.qml"
    },
    "FillerKey": {
        "body": "\nFillerKey {\n    //active: bool\n    //alternativeKeys: var\n    //displayText: string\n    //effectiveAlternativeKeys: var\n    //effectiveAlternativeKeysHighlightIndex: int\n    //functionKey: bool\n    //highlighted: bool\n    //key: int\n    //keyPanelDelegate: alias\n    //noKeyEvent: bool\n    //noModifier: bool\n    //pressed: bool\n    //repeat: bool\n    //showPreview: bool\n    //smallText: string\n    //smallTextVisible: bool\n    //soundEffect: url\n    //text: string\n    //uppercased: bool\n    //weight: real\n    //onClicked: { }\n}",
        "description": "FillerKey",
        "prefix": "FillerKey",
        "scope": "source.qml"
    },
    "FilterKey": {
        "body": "\nFilterKey {\n    //name: string\n    //value: variant\n}",
        "description": "FilterKey",
        "prefix": "FilterKey",
        "scope": "source.qml"
    },
    "FinalState": {
        "body": "\nFinalState {\n    //active: bool\n    //onEntered: { }\n    //onExited: { }\n}",
        "description": "FinalState",
        "prefix": "FinalState",
        "scope": "source.qml"
    },
    "FirstPersonCameraController": {
        "body": "\nFirstPersonCameraController {\n    //acceleration: real\n    //camera: Camera\n    //deceleration: real\n    //linearSpeed: real\n    //lookSpeed: real\n}",
        "description": "FirstPersonCameraController",
        "prefix": "FirstPersonCameraController",
        "scope": "source.qml"
    },
    "Flickable": {
        "body": "\nFlickable {\n    //atXBeginning: bool\n    //atXEnd: bool\n    //atYBeginning: bool\n    //atYEnd: bool\n    //bottomMargin: real\n    //boundsBehavior: enumeration\n    //boundsMovement: enumeration\n    //contentHeight: real\n    //contentItem: Item\n    //contentWidth: real\n    //contentX: real\n    //contentY: real\n    //dragging: bool\n    //draggingHorizontally: bool\n    //draggingVertically: bool\n    //flickDeceleration: real\n    //flickableDirection: enumeration\n    //flicking: bool\n    //flickingHorizontally: bool\n    //flickingVertically: bool\n    //horizontalOvershoot: real\n    //horizontalVelocity: real\n    //interactive: bool\n    //leftMargin: real\n    //maximumFlickVelocity: real\n    //moving: bool\n    //movingHorizontally: bool\n    //movingVertically: bool\n    //originX: real\n    //originY: real\n    //pixelAligned: bool\n    //pressDelay: int\n    //rebound: Transition\n    //rightMargin: real\n    //topMargin: real\n    //verticalOvershoot: real\n    //verticalVelocity: real\n    //visibleArea.heightRatio: real\n    //visibleArea.widthRatio: real\n    //visibleArea.xPosition: real\n    //visibleArea.yPosition: real\n    //onCancelflick: { }\n    //onFlick: { }\n    //onFlickended: { }\n    //onFlickstarted: { }\n    //onMovementended: { }\n    //onMovementstarted: { }\n    //onResizecontent: { }\n    //onReturntobounds: { }\n}",
        "description": "Flickable",
        "prefix": "Flickable",
        "scope": "source.qml"
    },
    "Flipable": {
        "body": "\nFlipable {\n    //back: Item\n    //front: Item\n    //side: enumeration\n}",
        "description": "Flipable",
        "prefix": "Flipable",
        "scope": "source.qml"
    },
    "Flow": {
        "body": "\nFlow {\n    //add: Transition\n    //bottomPadding: real\n    //effectiveLayoutDirection: enumeration\n    //flow: enumeration\n    //layoutDirection: enumeration\n    //leftPadding: real\n    //move: Transition\n    //padding: real\n    //populate: Transition\n    //rightPadding: real\n    //spacing: real\n    //topPadding: real\n    //onForcelayout: { }\n    //onPositioningcomplete: { }\n}",
        "description": "Flow",
        "prefix": "Flow",
        "scope": "source.qml"
    },
    "FocusScope": {
        "body": "\nFocusScope {\n    //activeFocus: bool\n    //activeFocusOnTab: bool\n    //anchors.alignWhenCentered: bool\n    //anchors.baseline: AnchorLine\n    //anchors.baselineOffset: real\n    //anchors.bottom: AnchorLine\n    //anchors.bottomMargin: real\n    //anchors.centerIn: Item\n    //anchors.fill: Item\n    //anchors.horizontalCenter: AnchorLine\n    //anchors.horizontalCenterOffset: real\n    //anchors.left: AnchorLine\n    //anchors.leftMargin: real\n    //anchors.margins: real\n    //anchors.right: AnchorLine\n    //anchors.rightMargin: real\n    //anchors.top: AnchorLine\n    //anchors.topMargin: real\n    //anchors.verticalCenter: AnchorLine\n    //anchors.verticalCenterOffset: real\n    //antialiasing: bool\n    //baselineOffset: int\n    //children: list<Item>\n    //childrenRect.height: real\n    //childrenRect.width: real\n    //childrenRect.x: real\n    //childrenRect.y: real\n    //clip: bool\n    //containmentMask: QObject*\n    //data: list<Object>\n    //enabled: bool\n    //focus: bool\n    //height: real\n    //implicitHeight: real\n    //implicitWidth: real\n    //layer.effect: Component\n    //layer.enabled: bool\n    //layer.format: enumeration\n    //layer.mipmap: bool\n    //layer.samplerName: string\n    //layer.samples: enumeration\n    //layer.smooth: bool\n    //layer.sourceRect: rect\n    //layer.textureMirroring: enumeration\n    //layer.textureSize: size\n    //layer.wrapMode: enumeration\n    //opacity: real\n    //parent: Item\n    //resources: list<Object>\n    //rotation: real\n    //scale: real\n    //smooth: bool\n    //state: string\n    //states: list<State>\n    //transform: list<Transform>\n    //transformOrigin: enumeration\n    //transitions: list<Transition>\n    //visible: bool\n    //visibleChildren: list<Item>\n    //width: real\n    //x: real\n    //y: real\n    //z: real\n    //onChildat: { }\n    //onForceactivefocus: { }\n    //onForceactivefocus: { }\n    //onNextiteminfocuschain: { }\n}",
        "description": "FocusScope",
        "prefix": "FocusScope",
        "scope": "source.qml"
    },
    "FolderListModel": {
        "body": "\nFolderListModel {\n    //caseSensitive: bool\n    //count: int\n    //folder: url\n    //nameFilters: list<string>\n    //parentFolder: url\n    //rootFolder: url\n    //showDirs: bool\n    //showDirsFirst: bool\n    //showDotAndDotDot: bool\n    //showFiles: bool\n    //showHidden: bool\n    //showOnlyReadable: bool\n    //sortField: enumeration\n    //sortReversed: bool\n    //status: enumeration\n}",
        "description": "FolderListModel",
        "prefix": "FolderListModel",
        "scope": "source.qml"
    },
    "FontDialog": {
        "body": "\nFontDialog {\n    //currentFont: font\n    //font: font\n    //modality: Qt::WindowModality\n    //monospacedFonts: bool\n    //nonScalableFonts: bool\n    //proportionalFonts: bool\n    //scalableFonts: bool\n    //title: string\n    //visible: bool\n}",
        "description": "FontDialog",
        "prefix": "FontDialog",
        "scope": "source.qml"
    },
    "FontLoader": {
        "body": "\nFontLoader {\n    //name: string\n    //source: url\n    //status: enumeration\n}",
        "description": "FontLoader",
        "prefix": "FontLoader",
        "scope": "source.qml"
    },
    "FontMetrics": {
        "body": "\nFontMetrics {\n    //ascent: real\n    //averageCharacterWidth: real\n    //descent: real\n    //font: font\n    //height: real\n    //leading: real\n    //lineSpacing: real\n    //lineWidth: real\n    //maximumCharacterWidth: real\n    //minimumLeftBearing: real\n    //minimumRightBearing: real\n    //overlinePosition: real\n    //strikeOutPosition: real\n    //underlinePosition: real\n    //xHeight: real\n}",
        "description": "FontMetrics",
        "prefix": "FontMetrics",
        "scope": "source.qml"
    },
    "FormValidationMessageRequest": {
        "body": "\nFormValidationMessageRequest {\n    //accepted: bool\n    //anchor: rectangle\n    //subText: bool\n    //text: bool\n    //type: enumeration\n}",
        "description": "FormValidationMessageRequest",
        "prefix": "FormValidationMessageRequest",
        "scope": "source.qml"
    },
    "ForwardRenderer": {
        "body": "\nForwardRenderer {\n    //camera: Entity\n    //clearColor: color\n    //frustumCulling: bool\n    //gamma: real\n    //surface: Object\n    //viewportRect: rect\n    //window: Object\n}",
        "description": "ForwardRenderer",
        "prefix": "ForwardRenderer",
        "scope": "source.qml"
    },
    "Frame": {
        "body": "\nFrame {\n    //contentChildren: list<Item>\n    //contentData: list<Object>\n    //contentHeight: real\n    //contentWidth: real\n}",
        "description": "Frame",
        "prefix": "Frame",
        "scope": "source.qml"
    },
    "FrameAction": {
        "body": "\nFrameAction {\n    //onTriggered: { }\n}",
        "description": "FrameAction",
        "prefix": "FrameAction",
        "scope": "source.qml"
    },
    "FrameGraphNode": {
        "body": "\nFrameGraphNode {\n    //childNodes: list<Node>\n    //data: list<QtQml::QtObject>\n    //propertyTrackingOverrides: QJSValue\n}",
        "description": "FrameGraphNode",
        "prefix": "FrameGraphNode",
        "scope": "source.qml"
    },
    "Friction": {
        "body": "\nFriction {\n    //factor: real\n    //threshold: real\n}",
        "description": "Friction",
        "prefix": "Friction",
        "scope": "source.qml"
    },
    "FrontFace": {
        "body": "\nFrontFace {\n    //direction: enumeration\n}",
        "description": "FrontFace",
        "prefix": "FrontFace",
        "scope": "source.qml"
    },
    "FrustumCulling": {
        "body": "\nFrustumCulling {\n    //childNodes: list<Node>\n    //data: list<QtQml::QtObject>\n    //propertyTrackingOverrides: QJSValue\n}",
        "description": "FrustumCulling",
        "prefix": "FrustumCulling",
        "scope": "source.qml"
    },
    "FullScreenRequest": {
        "body": "\nFullScreenRequest {\n    //origin: url\n    //toggleOn: bool\n}",
        "description": "FullScreenRequest",
        "prefix": "FullScreenRequest",
        "scope": "source.qml"
    },
    "GLStateDumpExt": {
        "body": "\nGLStateDumpExt",
        "description": "GLStateDumpExt",
        "prefix": "GLStateDumpExt",
        "scope": "source.qml"
    },
    "GammaAdjust": {
        "body": "\nGammaAdjust {\n    //cached: bool\n    //gamma: real\n    //source: variant\n}",
        "description": "GammaAdjust",
        "prefix": "GammaAdjust",
        "scope": "source.qml"
    },
    "Gauge": {
        "body": "\nGauge {\n    //font: font\n    //formatValue: var\n    //maximumValue: alias\n    //minimumValue: alias\n    //minorTickmarkCount: int\n    //orientation: int\n    //style: Component\n    //tickmarkAlignment: int\n    //tickmarkStepSize: real\n    //value: alias\n}",
        "description": "Gauge",
        "prefix": "Gauge",
        "scope": "source.qml"
    },
    "GaugeStyle": {
        "body": "\nGaugeStyle {\n    //background: Component\n    //control: Gauge\n    //foreground: Component\n    //minorTickmark: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //tickmark: Component\n    //tickmarkLabel: Component\n    //valueBar: Component\n    //valuePosition: real\n}",
        "description": "GaugeStyle",
        "prefix": "GaugeStyle",
        "scope": "source.qml"
    },
    "GaussianBlur": {
        "body": "\nGaussianBlur {\n    //cached: bool\n    //deviation: real\n    //radius: real\n    //samples: int\n    //source: variant\n    //transparentBorder: bool\n}",
        "description": "GaussianBlur",
        "prefix": "GaussianBlur",
        "scope": "source.qml"
    },
    "GeocodeModel": {
        "body": "\nGeocodeModel {\n    //autoUpdate: bool\n    //bounds: geoshape\n    //count: int\n    //error: enumeration\n    //errorString: string\n    //limit: int\n    //offset: int\n    //plugin: Plugin\n    //query: QVariant\n    //status: enumeration\n    //onLocationschanged: { }\n}",
        "description": "GeocodeModel",
        "prefix": "GeocodeModel",
        "scope": "source.qml"
    },
    "Geometry": {
        "body": "\nGeometry {\n    //attributes: list<Attribute>\n    //boundingVolumePositionAttribute: Attribute\n}",
        "description": "Geometry",
        "prefix": "Geometry",
        "scope": "source.qml"
    },
    "GeometryRenderer": {
        "body": "\nGeometryRenderer {\n    //firstInstance: int\n    //firstVertex: int\n    //geometry: Geometry\n    //indexBufferByteOffset: int\n    //indexOffset: int\n    //instanceCount: int\n    //primitiveRestart: bool\n    //primitiveType: enumeration\n    //restartIndex: int\n    //vertexCount: int\n    //verticesPerPatch: int\n}",
        "description": "GeometryRenderer",
        "prefix": "GeometryRenderer",
        "scope": "source.qml"
    },
    "GestureEvent": {
        "body": "\nGestureEvent {\n    //dragThreshold: real\n    //touchPoints: list<TouchPoint>\n    //onGrab: { }\n}",
        "description": "GestureEvent",
        "prefix": "GestureEvent",
        "scope": "source.qml"
    },
    "Glow": {
        "body": "\nGlow {\n    //cached: alias\n    //color: alias\n    //radius: alias\n    //samples: alias\n    //source: alias\n    //spread: alias\n    //transparentBorder: alias\n}",
        "description": "Glow",
        "prefix": "Glow",
        "scope": "source.qml"
    },
    "GoochMaterial": {
        "body": "\nGoochMaterial {\n    //alpha: real\n    //beta: real\n    //cool: color\n    //diffuse: color\n    //shininess: real\n    //specular: color\n    //warm: color\n}",
        "description": "GoochMaterial",
        "prefix": "GoochMaterial",
        "scope": "source.qml"
    },
    "Gradient": {
        "body": "\nGradient {\n    //stops: list<GradientStop>\n}",
        "description": "Gradient",
        "prefix": "Gradient",
        "scope": "source.qml"
    },
    "GradientStop": {
        "body": "\nGradientStop {\n    //color: color\n    //position: real\n}",
        "description": "GradientStop",
        "prefix": "GradientStop",
        "scope": "source.qml"
    },
    "GraphicsApiFilter": {
        "body": "\nGraphicsApiFilter {\n    //api: enumeration\n    //extensions: stringlist\n    //majorVersion: int\n    //minorVersion: int\n    //profile: enumeration\n    //vendor: string\n}",
        "description": "GraphicsApiFilter",
        "prefix": "GraphicsApiFilter",
        "scope": "source.qml"
    },
    "GraphicsInfo": {
        "body": "\nGraphicsInfo {\n    //api: enumeration\n    //majorVersion: int\n    //minorVersion: int\n    //profile: enumeration\n    //renderableType: enumeration\n    //shaderCompilationType: enumeration\n    //shaderSourceType: enumeration\n    //shaderType: enumeration\n}",
        "description": "GraphicsInfo",
        "prefix": "GraphicsInfo",
        "scope": "source.qml"
    },
    "Gravity": {
        "body": "\nGravity {\n    //acceleration: real\n    //angle: real\n    //magnitude: real\n}",
        "description": "Gravity",
        "prefix": "Gravity",
        "scope": "source.qml"
    },
    "Grid": {
        "body": "\nGrid {\n    //add: Transition\n    //bottomPadding: real\n    //columnSpacing: qreal\n    //columns: int\n    //effectiveHorizontalItemAlignment: enumeration\n    //effectiveLayoutDirection: enumeration\n    //flow: enumeration\n    //horizontalItemAlignment: enumeration\n    //layoutDirection: enumeration\n    //leftPadding: real\n    //move: Transition\n    //padding: real\n    //populate: Transition\n    //rightPadding: real\n    //rowSpacing: qreal\n    //rows: int\n    //spacing: qreal\n    //topPadding: real\n    //verticalItemAlignment: enumeration\n    //onForcelayout: { }\n    //onPositioningcomplete: { }\n}",
        "description": "Grid",
        "prefix": "Grid",
        "scope": "source.qml"
    },
    "GridLayout": {
        "body": "\nGridLayout {\n    //columnSpacing: real\n    //columns: int\n    //flow: enumeration\n    //layoutDirection: enumeration\n    //rowSpacing: real\n    //rows: int\n}",
        "description": "GridLayout",
        "prefix": "GridLayout",
        "scope": "source.qml"
    },
    "GridMesh": {
        "body": "\nGridMesh {\n    //resolution: size\n}",
        "description": "GridMesh",
        "prefix": "GridMesh",
        "scope": "source.qml"
    },
    "GridView": {
        "body": "\nGridView {\n    //add: Transition\n    //addDisplaced: Transition\n    //cacheBuffer: int\n    //cellHeight: real\n    //cellWidth: real\n    //count: int\n    //currentIndex: int\n    //currentItem: Item\n    //delayRemove: bool [attached]\n    //delegate: Component\n    //displaced: Transition\n    //displayMarginBeginning: int\n    //displayMarginEnd: int\n    //effectiveLayoutDirection: enumeration\n    //flow: enumeration\n    //footer: Component\n    //footerItem: Item\n    //header: Component\n    //headerItem: Item\n    //highlight: Component\n    //highlightFollowsCurrentItem: bool\n    //highlightItem: Item\n    //highlightMoveDuration: int\n    //highlightRangeMode: enumeration\n    //isCurrentItem: bool [attached]\n    //keyNavigationEnabled: bool\n    //keyNavigationWraps: bool\n    //layoutDirection: enumeration\n    //model: model\n    //move: Transition\n    //moveDisplaced: Transition\n    //populate: Transition\n    //preferredHighlightBegin: real\n    //preferredHighlightEnd: real\n    //remove: Transition\n    //removeDisplaced: Transition\n    //snapMode: enumeration\n    //verticalLayoutDirection: enumeration\n    //view: GridView [attached]\n    //onAdd: { }\n    //onForcelayout: { }\n    //onMovecurrentindexdown: { }\n    //onMovecurrentindexleft: { }\n    //onMovecurrentindexright: { }\n    //onMovecurrentindexup: { }\n    //onPositionviewatbeginning: { }\n    //onPositionviewatend: { }\n    //onPositionviewatindex: { }\n    //onRemove: { }\n}",
        "description": "GridView",
        "prefix": "GridView",
        "scope": "source.qml"
    },
    "GroupBox: QtQuickControls": {
        "body": "\nGroupBox: QtQuickControls {\n    //checkable: bool\n    //checked: bool\n    //contentItem: Item\n    //flat: bool\n    //title: string\n}",
        "description": "GroupBox: QtQuickControls",
        "prefix": "GroupBox: QtQuickControls",
        "scope": "source.qml"
    },
    "GroupBox: QtQuickControls2": {
        "body": "\nGroupBox: QtQuickControls2 {\n    //label: Item\n    //title: string\n}",
        "description": "GroupBox: QtQuickControls2",
        "prefix": "GroupBox: QtQuickControls2",
        "scope": "source.qml"
    },
    "GroupGoal": {
        "body": "\nGroupGoal {\n    //goalState: string\n    //jump: bool\n}",
        "description": "GroupGoal",
        "prefix": "GroupGoal",
        "scope": "source.qml"
    },
    "Gyroscope": {
        "body": "\nGyroscope {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "Gyroscope",
        "prefix": "Gyroscope",
        "scope": "source.qml"
    },
    "GyroscopeReading": {
        "body": "\nGyroscopeReading {\n    //x: qreal\n    //y: qreal\n    //z: qreal\n}",
        "description": "GyroscopeReading",
        "prefix": "GyroscopeReading",
        "scope": "source.qml"
    },
    "HBarModelMapper": {
        "body": "\nHBarModelMapper {\n    //columnCount: int\n    //firstBarSetRow: int\n    //firstColumn: int\n    //lastBarSetRow: int\n    //model: SomeModel\n    //series: AbstractBarSeries\n}",
        "description": "HBarModelMapper",
        "prefix": "HBarModelMapper",
        "scope": "source.qml"
    },
    "HBoxPlotModelMapper": {
        "body": "\nHBoxPlotModelMapper {\n    //columnCount: int\n    //firstBoxSetRow: int\n    //firstColumn: int\n    //lastBoxSetRow: int\n    //model: SomeModel\n    //series: AbstractBarSeries\n}",
        "description": "HBoxPlotModelMapper",
        "prefix": "HBoxPlotModelMapper",
        "scope": "source.qml"
    },
    "HCandlestickModelMapper": {
        "body": "\nHCandlestickModelMapper {\n    //closeColumn: int\n    //firstSetRow: int\n    //highColumn: int\n    //lastSetRow: int\n    //lowColumn: int\n    //model: QAbstractItemModel\n    //openColumn: int\n    //series: CandlestickSeries\n    //timestampColumn: int\n}",
        "description": "HCandlestickModelMapper",
        "prefix": "HCandlestickModelMapper",
        "scope": "source.qml"
    },
    "HPieModelMapper": {
        "body": "\nHPieModelMapper {\n    //columnCount: int\n    //firstColumn: int\n    //labelsRow: int\n    //model: SomeModel\n    //series: PieSeries\n    //valuesRow: int\n}",
        "description": "HPieModelMapper",
        "prefix": "HPieModelMapper",
        "scope": "source.qml"
    },
    "HXYModelMapper": {
        "body": "\nHXYModelMapper {\n    //columnCount: int\n    //firstColumn: int\n    //model: SomeModel\n    //series: XYSeries\n    //xRow: int\n    //yRow: int\n}",
        "description": "HXYModelMapper",
        "prefix": "HXYModelMapper",
        "scope": "source.qml"
    },
    "HandlerPoint": {
        "body": "\nHandlerPoint {\n    //ellipseDiameters: size\n    //id: int\n    //position: QPointF\n    //pressPosition: QPointF\n    //pressedButtons: enum\n    //pressure: qreal\n    //rotation: qreal\n    //sceneGrabPosition: QPointF\n    //scenePosition: QPointF\n    //scenePressPosition: QPointF\n    //uniqueId: PointingDeviceUniqueId\n    //velocity: QVector2D\n}",
        "description": "HandlerPoint",
        "prefix": "HandlerPoint",
        "scope": "source.qml"
    },
    "HandwritingInputPanel": {
        "body": "\nHandwritingInputPanel {\n    //active: bool\n    //available: bool\n    //inputPanel: var\n}",
        "description": "HandwritingInputPanel",
        "prefix": "HandwritingInputPanel",
        "scope": "source.qml"
    },
    "HandwritingModeKey": {
        "body": "\nHandwritingModeKey {\n    //active: bool\n    //alternativeKeys: var\n    //displayText: string\n    //effectiveAlternativeKeys: var\n    //effectiveAlternativeKeysHighlightIndex: int\n    //functionKey: bool\n    //highlighted: bool\n    //key: int\n    //keyPanelDelegate: alias\n    //noKeyEvent: bool\n    //noModifier: bool\n    //pressed: bool\n    //repeat: bool\n    //showPreview: bool\n    //smallText: string\n    //smallTextVisible: bool\n    //soundEffect: url\n    //text: string\n    //uppercased: bool\n    //weight: real\n    //onClicked: { }\n}",
        "description": "HandwritingModeKey",
        "prefix": "HandwritingModeKey",
        "scope": "source.qml"
    },
    "HeightMapSurfaceDataProxy": {
        "body": "\nHeightMapSurfaceDataProxy {\n    //heightMapFile: string\n    //maxXValue: real\n    //maxZValue: real\n    //minXValue: real\n    //minZValue: real\n}",
        "description": "HeightMapSurfaceDataProxy",
        "prefix": "HeightMapSurfaceDataProxy",
        "scope": "source.qml"
    },
    "HideKeyboardKey": {
        "body": "\nHideKeyboardKey {\n    //active: bool\n    //alternativeKeys: var\n    //displayText: string\n    //effectiveAlternativeKeys: var\n    //effectiveAlternativeKeysHighlightIndex: int\n    //functionKey: bool\n    //highlighted: bool\n    //key: int\n    //keyPanelDelegate: alias\n    //noKeyEvent: bool\n    //noModifier: bool\n    //pressed: bool\n    //repeat: bool\n    //showPreview: bool\n    //smallText: string\n    //smallTextVisible: bool\n    //soundEffect: url\n    //text: string\n    //uppercased: bool\n    //weight: real\n    //onClicked: { }\n}",
        "description": "HideKeyboardKey",
        "prefix": "HideKeyboardKey",
        "scope": "source.qml"
    },
    "HistoryState": {
        "body": "\nHistoryState {\n    //defaultState: QAbstractState\n    //historyType: enumeration\n}",
        "description": "HistoryState",
        "prefix": "HistoryState",
        "scope": "source.qml"
    },
    "HolsterReading": {
        "body": "\nHolsterReading {\n    //holstered: qreal\n}",
        "description": "HolsterReading",
        "prefix": "HolsterReading",
        "scope": "source.qml"
    },
    "HolsterSensor": {
        "body": "\nHolsterSensor {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "HolsterSensor",
        "prefix": "HolsterSensor",
        "scope": "source.qml"
    },
    "HorizontalBarSeries": {
        "body": "\nHorizontalBarSeries {\n    //axisX: AbstractAxis\n    //axisXTop: AbstractAxis\n    //axisY: AbstractAxis\n    //axisYRight: AbstractAxis\n    //barWidth: real\n    //count: int\n    //labelsAngle: real\n    //labelsFormat: string\n    //labelsPosition: enumeration\n    //labelsPrecision: real\n    //labelsVisible: bool\n    //onBarsetsadded: { }\n    //onBarsetsremoved: { }\n    //onClear: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "HorizontalBarSeries",
        "prefix": "HorizontalBarSeries",
        "scope": "source.qml"
    },
    "HorizontalPercentBarSeries": {
        "body": "\nHorizontalPercentBarSeries {\n    //axisX: AbstractAxis\n    //axisXTop: AbstractAxis\n    //axisY: AbstractAxis\n    //axisYRight: AbstractAxis\n    //barWidth: real\n    //count: int\n    //labelsAngle: real\n    //labelsFormat: string\n    //labelsPosition: enumeration\n    //labelsPrecision: real\n    //labelsVisible: bool\n    //onBarsetsadded: { }\n    //onBarsetsremoved: { }\n    //onClear: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "HorizontalPercentBarSeries",
        "prefix": "HorizontalPercentBarSeries",
        "scope": "source.qml"
    },
    "HorizontalStackedBarSeries": {
        "body": "\nHorizontalStackedBarSeries {\n    //axisX: AbstractAxis\n    //axisXTop: AbstractAxis\n    //axisY: AbstractAxis\n    //axisYRight: AbstractAxis\n    //barWidth: real\n    //count: int\n    //labelsAngle: real\n    //labelsFormat: string\n    //labelsPosition: enumeration\n    //labelsPrecision: real\n    //labelsVisible: bool\n    //onBarsetsadded: { }\n    //onBarsetsremoved: { }\n    //onClear: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "HorizontalStackedBarSeries",
        "prefix": "HorizontalStackedBarSeries",
        "scope": "source.qml"
    },
    "HueSaturation": {
        "body": "\nHueSaturation {\n    //cached: bool\n    //hue: real\n    //lightness: real\n    //saturation: real\n    //source: variant\n}",
        "description": "HueSaturation",
        "prefix": "HueSaturation",
        "scope": "source.qml"
    },
    "HumidityReading": {
        "body": "\nHumidityReading {\n    //absoluteHumidity: qreal\n    //relativeHumidity: qreal\n}",
        "description": "HumidityReading",
        "prefix": "HumidityReading",
        "scope": "source.qml"
    },
    "HumiditySensor": {
        "body": "\nHumiditySensor {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "HumiditySensor",
        "prefix": "HumiditySensor",
        "scope": "source.qml"
    },
    "IRProximityReading": {
        "body": "\nIRProximityReading {\n    //reflectance: qreal\n}",
        "description": "IRProximityReading",
        "prefix": "IRProximityReading",
        "scope": "source.qml"
    },
    "IRProximitySensor": {
        "body": "\nIRProximitySensor {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "IRProximitySensor",
        "prefix": "IRProximitySensor",
        "scope": "source.qml"
    },
    "Icon": {
        "body": "\nIcon {\n    //icon: QPlaceIcon\n    //parameters: Object\n    //plugin: Plugin\n}",
        "description": "Icon",
        "prefix": "Icon",
        "scope": "source.qml"
    },
    "Image": {
        "body": "\nImage {\n    //asynchronous: bool\n    //autoTransform: bool\n    //cache: bool\n    //fillMode: enumeration\n    //horizontalAlignment: enumeration\n    //mipmap: bool\n    //mirror: bool\n    //paintedHeight: real\n    //paintedWidth: real\n    //progress: real\n    //smooth: bool\n    //source: url\n    //sourceSize: QSize\n    //status: enumeration\n    //verticalAlignment: enumeration\n}",
        "description": "Image",
        "prefix": "Image",
        "scope": "source.qml"
    },
    "ImageModel": {
        "body": "\nImageModel {\n    //batchSize: int\n    //place: Place\n    //totalCount: int\n}",
        "description": "ImageModel",
        "prefix": "ImageModel",
        "scope": "source.qml"
    },
    "ImageParticle": {
        "body": "\nImageParticle {\n    //alpha: real\n    //alphaVariation: real\n    //autoRotation: bool\n    //blueVariation: real\n    //color: color\n    //colorTable: url\n    //colorVariation: real\n    //entryEffect: EntryEffect\n    //greenVariation: real\n    //opacityTable: url\n    //redVariation: real\n    //rotation: real\n    //rotationVariation: real\n    //rotationVelocity: real\n    //rotationVelocityVariation: real\n    //sizeTable: url\n    //source: url\n    //sprites: list<Sprite>\n    //spritesInterpolate: bool\n    //status: Status\n    //xVector: StochasticDirection\n    //yVector: StochasticDirection\n}",
        "description": "ImageParticle",
        "prefix": "ImageParticle",
        "scope": "source.qml"
    },
    "InnerShadow": {
        "body": "\nInnerShadow {\n    //cached: bool\n    //color: color\n    //fast: bool\n    //horizontalOffset: real\n    //radius: real\n    //samples: int\n    //source: variant\n    //spread: real\n    //verticalOffset: real\n}",
        "description": "InnerShadow",
        "prefix": "InnerShadow",
        "scope": "source.qml"
    },
    "InputChord": {
        "body": "\nInputChord {\n    //chords: list<AbstractActionInput>\n    //timeout: int\n}",
        "description": "InputChord",
        "prefix": "InputChord",
        "scope": "source.qml"
    },
    "InputContext": {
        "body": "\nInputContext {\n    //anchorPosition: int\n    //anchorRectangle: rect\n    //animating: bool\n    //capsLock: bool\n    //cursorPosition: int\n    //cursorRectangle: rect\n    //focus: bool\n    //inputEngine: InputEngine\n    //inputItem: QtObject\n    //inputMethodHints: int\n    //keyboardRectangle: rect\n    //locale: string\n    //preeditText: string\n    //previewRectangle: rect\n    //previewVisible: bool\n    //selectedText: string\n    //shift: bool\n    //shiftHandler: ShiftHandler\n    //surroundingText: string\n    //uppercase: bool\n    //onFocuseditorchanged: { }\n}",
        "description": "InputContext",
        "prefix": "InputContext",
        "scope": "source.qml"
    },
    "InputEngine": {
        "body": "\nInputEngine {\n    //activeKey: int\n    //inputMethod: InputMethod\n    //inputMode: int\n    //inputModes: list<int>\n    //patternRecognitionModes: list<int>\n    //previousKey: int\n    //wordCandidateListModel: SelectionListModel\n    //wordCandidateListVisibleHint: bool\n}",
        "description": "InputEngine",
        "prefix": "InputEngine",
        "scope": "source.qml"
    },
    "InputHandler3D": {
        "body": "\nInputHandler3D {\n    //rotationEnabled: bool\n    //selectionEnabled: bool\n    //zoomAtTargetEnabled: bool\n    //zoomEnabled: bool\n}",
        "description": "InputHandler3D",
        "prefix": "InputHandler3D",
        "scope": "source.qml"
    },
    "InputMethod": {
        "body": "\nInputMethod {\n    //inputContext: InputContext\n    //inputEngine: InputEngine\n    //onReset: { }\n    //onSelectionlistactiveitemchanged: { }\n    //onSelectionlistchanged: { }\n    //onSelectionlistschanged: { }\n    //onUpdate: { }\n}",
        "description": "InputMethod",
        "prefix": "InputMethod",
        "scope": "source.qml"
    },
    "InputModeKey": {
        "body": "\nInputModeKey {\n    //inputModeCount: int\n    //inputModeNameList: var\n    //inputModes: var\n}",
        "description": "InputModeKey",
        "prefix": "InputModeKey",
        "scope": "source.qml"
    },
    "InputPanel": {
        "body": "\nInputPanel {\n    //active: bool\n    //externalLanguageSwitchEnabled: bool\n    //onExternallanguageswitch: { }\n}",
        "description": "InputPanel",
        "prefix": "InputPanel",
        "scope": "source.qml"
    },
    "InputSequence": {
        "body": "\nInputSequence {\n    //buttonInterval: int\n    //sequences: list<AbstractActionInput>\n    //timeout: int\n    //onButtonintervalchanged: { }\n    //onTimeoutchanged: { }\n}",
        "description": "InputSequence",
        "prefix": "InputSequence",
        "scope": "source.qml"
    },
    "InputSettings": {
        "body": "\nInputSettings {\n    //eventSource: Object\n}",
        "description": "InputSettings",
        "prefix": "InputSettings",
        "scope": "source.qml"
    },
    "Instantiator": {
        "body": "\nInstantiator {\n    //active: bool\n    //asynchronous: bool\n    //count: int\n    //delegate: QtQml::Component\n    //model: variant\n    //object: QtObject\n    //onObjectadded: { }\n    //onObjectremoved: { }\n}",
        "description": "Instantiator",
        "prefix": "Instantiator",
        "scope": "source.qml"
    },
    "IntValidator": {
        "body": "\nIntValidator {\n    //bottom: int\n    //locale: string\n    //top: int\n}",
        "description": "IntValidator",
        "prefix": "IntValidator",
        "scope": "source.qml"
    },
    "InvokedServices": {
        "body": "\nInvokedServices {\n    //children: var\n    //qmlChildren: list<QtObject>\n    //stateMachine: ScxmlStateMachine\n}",
        "description": "InvokedServices",
        "prefix": "InvokedServices",
        "scope": "source.qml"
    },
    "Item": {
        "body": "\nItem {\n    //activeFocus: bool\n    //activeFocusOnTab: bool\n    //anchors.alignWhenCentered: bool\n    //anchors.baseline: AnchorLine\n    //anchors.baselineOffset: real\n    //anchors.bottom: AnchorLine\n    //anchors.bottomMargin: real\n    //anchors.centerIn: Item\n    //anchors.fill: Item\n    //anchors.horizontalCenter: AnchorLine\n    //anchors.horizontalCenterOffset: real\n    //anchors.left: AnchorLine\n    //anchors.leftMargin: real\n    //anchors.margins: real\n    //anchors.right: AnchorLine\n    //anchors.rightMargin: real\n    //anchors.top: AnchorLine\n    //anchors.topMargin: real\n    //anchors.verticalCenter: AnchorLine\n    //anchors.verticalCenterOffset: real\n    //antialiasing: bool\n    //baselineOffset: int\n    //children: list<Item>\n    //childrenRect.height: real\n    //childrenRect.width: real\n    //childrenRect.x: real\n    //childrenRect.y: real\n    //clip: bool\n    //containmentMask: QObject*\n    //data: list<Object>\n    //enabled: bool\n    //focus: bool\n    //height: real\n    //implicitHeight: real\n    //implicitWidth: real\n    //layer.effect: Component\n    //layer.enabled: bool\n    //layer.format: enumeration\n    //layer.mipmap: bool\n    //layer.samplerName: string\n    //layer.samples: enumeration\n    //layer.smooth: bool\n    //layer.sourceRect: rect\n    //layer.textureMirroring: enumeration\n    //layer.textureSize: size\n    //layer.wrapMode: enumeration\n    //opacity: real\n    //parent: Item\n    //resources: list<Object>\n    //rotation: real\n    //scale: real\n    //smooth: bool\n    //state: string\n    //states: list<State>\n    //transform: list<Transform>\n    //transformOrigin: enumeration\n    //transitions: list<Transition>\n    //visible: bool\n    //visibleChildren: list<Item>\n    //width: real\n    //x: real\n    //y: real\n    //z: real\n    //onChildat: { }\n    //onForceactivefocus: { }\n    //onForceactivefocus: { }\n    //onNextiteminfocuschain: { }\n}",
        "description": "Item",
        "prefix": "Item",
        "scope": "source.qml"
    },
    "ItemDelegate": {
        "body": "\nItemDelegate {\n    //highlighted: bool\n}",
        "description": "ItemDelegate",
        "prefix": "ItemDelegate",
        "scope": "source.qml"
    },
    "ItemGrabResult": {
        "body": "\nItemGrabResult",
        "description": "ItemGrabResult",
        "prefix": "ItemGrabResult",
        "scope": "source.qml"
    },
    "ItemModelBarDataProxy": {
        "body": "\nItemModelBarDataProxy {\n    //autoColumnCategories: bool\n    //autoRowCategories: bool\n    //columnCategories: list<String>\n    //columnRole: string\n    //columnRolePattern: regExp\n    //columnRoleReplace: string\n    //itemModel: model\n    //multiMatchBehavior: ItemModelBarDataProxy.MultiMatchBehavior\n    //rotationRole: string\n    //rotationRolePattern: regExp\n    //rotationRoleReplace: string\n    //rowCategories: list<String>\n    //rowRole: string\n    //rowRolePattern: regExp\n    //rowRoleReplace: string\n    //useModelCategories: bool\n    //valueRole: string\n    //valueRolePattern: regExp\n    //valueRoleReplace: string\n}",
        "description": "ItemModelBarDataProxy",
        "prefix": "ItemModelBarDataProxy",
        "scope": "source.qml"
    },
    "ItemModelScatterDataProxy": {
        "body": "\nItemModelScatterDataProxy {\n    //itemModel: model\n    //rotationRole: string\n    //rotationRolePattern: regExp\n    //rotationRoleReplace: string\n    //xPosRole: string\n    //xPosRolePattern: regExp\n    //xPosRoleReplace: string\n    //yPosRole: string\n    //yPosRolePattern: regExp\n    //yPosRoleReplace: string\n    //zPosRole: string\n    //zPosRolePattern: regExp\n    //zPosRoleReplace: string\n}",
        "description": "ItemModelScatterDataProxy",
        "prefix": "ItemModelScatterDataProxy",
        "scope": "source.qml"
    },
    "ItemModelSurfaceDataProxy": {
        "body": "\nItemModelSurfaceDataProxy {\n    //autoColumnCategories: bool\n    //autoRowCategories: bool\n    //columnCategories: list<String>\n    //columnRole: string\n    //columnRolePattern: regExp\n    //columnRoleReplace: string\n    //itemModel: model\n    //multiMatchBehavior: ItemModelSurfaceDataProxy.MultiMatchBehavior\n    //rowCategories: list<String>\n    //rowRole: string\n    //rowRolePattern: regExp\n    //rowRoleReplace: string\n    //useModelCategories: bool\n    //xPosRole: string\n    //xPosRolePattern: regExp\n    //xPosRoleReplace: string\n    //yPosRole: string\n    //yPosRolePattern: regExp\n    //yPosRoleReplace: string\n    //zPosRole: string\n    //zPosRolePattern: regExp\n    //zPosRoleReplace: string\n}",
        "description": "ItemModelSurfaceDataProxy",
        "prefix": "ItemModelSurfaceDataProxy",
        "scope": "source.qml"
    },
    "ItemParticle": {
        "body": "\nItemParticle {\n    //delegate: Component\n    //fade: bool\n    //onFreeze: { }\n    //onGive: { }\n    //onTake: { }\n    //onUnfreeze: { }\n}",
        "description": "ItemParticle",
        "prefix": "ItemParticle",
        "scope": "source.qml"
    },
    "ItemSelectionModel": {
        "body": "\nItemSelectionModel {\n    //currentIndex: QModelIndex\n    //hasSelection: bool\n    //model: QAbstractItemModel\n    //selectedIndexes: QModelIndexList\n    //selection: object\n    //onCurrentchanged: { }\n    //onSelectionchanged: { }\n}",
        "description": "ItemSelectionModel",
        "prefix": "ItemSelectionModel",
        "scope": "source.qml"
    },
    "IviApplication": {
        "body": "\nIviApplication",
        "description": "IviApplication",
        "prefix": "IviApplication",
        "scope": "source.qml"
    },
    "IviSurface": {
        "body": "\nIviSurface {\n    //iviId: int\n    //surface: WaylandSurface\n}",
        "description": "IviSurface",
        "prefix": "IviSurface",
        "scope": "source.qml"
    },
    "JavaScriptDialogRequest": {
        "body": "\nJavaScriptDialogRequest {\n    //accepted: bool\n    //defaultText: string\n    //message: string\n    //securityOrigin: url\n    //title: string\n    //type: enumeration\n}",
        "description": "JavaScriptDialogRequest",
        "prefix": "JavaScriptDialogRequest",
        "scope": "source.qml"
    },
    "Joint": {
        "body": "\nJoint {\n    //childJoints: list<Joint>\n    //inverseBindMatrix: matrix4x4\n    //rotation: quaternion\n    //rotationX: real\n    //rotationY: real\n    //rotationZ: real\n    //scale: vector3d\n    //translation: vector3d\n}",
        "description": "Joint",
        "prefix": "Joint",
        "scope": "source.qml"
    },
    "JumpList": {
        "body": "\nJumpList {\n    //categories: list<JumpListCategory>\n    //frequent: JumpListCategory\n    //recent: JumpListCategory\n    //tasks: JumpListCategory\n}",
        "description": "JumpList",
        "prefix": "JumpList",
        "scope": "source.qml"
    },
    "JumpListCategory": {
        "body": "\nJumpListCategory {\n    //items: list<JumpListItem>\n    //title: string\n    //visible: bool\n}",
        "description": "JumpListCategory",
        "prefix": "JumpListCategory",
        "scope": "source.qml"
    },
    "JumpListDestination": {
        "body": "\nJumpListDestination {\n    //filePath: string\n}",
        "description": "JumpListDestination",
        "prefix": "JumpListDestination",
        "scope": "source.qml"
    },
    "JumpListLink": {
        "body": "\nJumpListLink {\n    //arguments: string\n    //description: string\n    //executablePath: string\n    //iconPath: string\n    //title: string\n}",
        "description": "JumpListLink",
        "prefix": "JumpListLink",
        "scope": "source.qml"
    },
    "Key": {
        "body": "\nKey {\n    //active: bool\n    //alternativeKeys: var\n    //displayText: string\n    //effectiveAlternativeKeys: var\n    //effectiveAlternativeKeysHighlightIndex: int\n    //functionKey: bool\n    //highlighted: bool\n    //key: int\n    //keyPanelDelegate: alias\n    //noKeyEvent: bool\n    //noModifier: bool\n    //pressed: bool\n    //repeat: bool\n    //showPreview: bool\n    //smallText: string\n    //smallTextVisible: bool\n    //soundEffect: url\n    //text: string\n    //uppercased: bool\n    //weight: real\n    //onClicked: { }\n}",
        "description": "Key",
        "prefix": "Key",
        "scope": "source.qml"
    },
    "KeyEvent: Qt3D": {
        "body": "\nKeyEvent: Qt3D {\n    //accepted: bool\n    //count: int\n    //isAutoRepeat: bool\n    //key: int\n    //modifiers: int\n    //nativeScanCode: quint32\n    //text: string\n}",
        "description": "KeyEvent: Qt3D",
        "prefix": "KeyEvent: Qt3D",
        "scope": "source.qml"
    },
    "KeyEvent: QtQuick": {
        "body": "\nKeyEvent: QtQuick {\n    //accepted: bool\n    //count: int\n    //isAutoRepeat: bool\n    //key: int\n    //modifiers: int\n    //nativeScanCode: quint32\n    //text: string\n}",
        "description": "KeyEvent: QtQuick",
        "prefix": "KeyEvent: QtQuick",
        "scope": "source.qml"
    },
    "KeyIcon": {
        "body": "\nKeyIcon {\n    //color: alias\n    //source: alias\n}",
        "description": "KeyIcon",
        "prefix": "KeyIcon",
        "scope": "source.qml"
    },
    "KeyNavigation": {
        "body": "\nKeyNavigation {\n    //backtab: Item\n    //down: Item\n    //left: Item\n    //priority: enumeration\n    //right: Item\n    //tab: Item\n    //up: Item\n}",
        "description": "KeyNavigation",
        "prefix": "KeyNavigation",
        "scope": "source.qml"
    },
    "KeyPanel": {
        "body": "\nKeyPanel {\n    //control: Item\n    //soundEffect: url\n}",
        "description": "KeyPanel",
        "prefix": "KeyPanel",
        "scope": "source.qml"
    },
    "KeyboardColumn": {
        "body": "\nKeyboardColumn {\n    //keyWeight: real\n    //smallTextVisible: bool\n}",
        "description": "KeyboardColumn",
        "prefix": "KeyboardColumn",
        "scope": "source.qml"
    },
    "KeyboardDevice": {
        "body": "\nKeyboardDevice {\n    //activeInput: KeyboardHandler\n}",
        "description": "KeyboardDevice",
        "prefix": "KeyboardDevice",
        "scope": "source.qml"
    },
    "KeyboardHandler": {
        "body": "\nKeyboardHandler {\n    //focus: bool\n    //sourceDevice: KeyboardDevice\n    //onAsteriskpressed: { }\n    //onBackpressed: { }\n    //onBacktabpressed: { }\n    //onCallpressed: { }\n    //onCancelpressed: { }\n    //onContext1Pressed: { }\n    //onContext2Pressed: { }\n    //onContext3Pressed: { }\n    //onContext4Pressed: { }\n    //onDeletepressed: { }\n    //onDigit0Pressed: { }\n    //onDigit1Pressed: { }\n    //onDigit2Pressed: { }\n    //onDigit3Pressed: { }\n    //onDigit4Pressed: { }\n    //onDigit5Pressed: { }\n    //onDigit6Pressed: { }\n    //onDigit7Pressed: { }\n    //onDigit8Pressed: { }\n    //onDigit9Pressed: { }\n    //onDownpressed: { }\n    //onEnterpressed: { }\n    //onEscapepressed: { }\n    //onFlippressed: { }\n    //onHanguppressed: { }\n    //onLeftpressed: { }\n    //onMenupressed: { }\n    //onNopressed: { }\n    //onNumbersignpressed: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onReturnpressed: { }\n    //onRightpressed: { }\n    //onSelectpressed: { }\n    //onSpacepressed: { }\n    //onTabpressed: { }\n    //onUppressed: { }\n    //onVolumedownpressed: { }\n    //onVolumeuppressed: { }\n    //onYespressed: { }\n}",
        "description": "KeyboardHandler",
        "prefix": "KeyboardHandler",
        "scope": "source.qml"
    },
    "KeyboardLayout": {
        "body": "\nKeyboardLayout {\n    //inputMethod: var\n    //inputMode: int\n    //keyWeight: real\n    //sharedLayouts: var\n    //smallTextVisible: bool\n    //onCreateinputmethod: { }\n}",
        "description": "KeyboardLayout",
        "prefix": "KeyboardLayout",
        "scope": "source.qml"
    },
    "KeyboardLayoutLoader": {
        "body": "\nKeyboardLayoutLoader {\n    //inputMethod: var\n    //inputMode: int\n    //sharedLayouts: var\n    //onCreateinputmethod: { }\n}",
        "description": "KeyboardLayoutLoader",
        "prefix": "KeyboardLayoutLoader",
        "scope": "source.qml"
    },
    "KeyboardRow": {
        "body": "\nKeyboardRow {\n    //keyWeight: real\n    //smallTextVisible: bool\n}",
        "description": "KeyboardRow",
        "prefix": "KeyboardRow",
        "scope": "source.qml"
    },
    "KeyboardStyle": {
        "body": "\nKeyboardStyle {\n    //alternateKeysListBackground: Component\n    //alternateKeysListBottomMargin: real\n    //alternateKeysListDelegate: Component\n    //alternateKeysListHighlight: Component\n    //alternateKeysListItemHeight: real\n    //alternateKeysListItemWidth: real\n    //alternateKeysListLeftMargin: real\n    //alternateKeysListRightMargin: real\n    //alternateKeysListTopMargin: real\n    //backspaceKeyPanel: Component\n    //characterPreviewDelegate: Component\n    //characterPreviewMargin: real\n    //enterKeyPanel: Component\n    //fullScreenInputBackground: Component\n    //fullScreenInputColor: color\n    //fullScreenInputContainerBackground: Component\n    //fullScreenInputCursor: Component\n    //fullScreenInputFont: font\n    //fullScreenInputMargins: real\n    //fullScreenInputPadding: real\n    //fullScreenInputPasswordCharacter: string\n    //fullScreenInputSelectedTextColor: color\n    //fullScreenInputSelectionColor: color\n    //handwritingKeyPanel: Component\n    //hideKeyPanel: Component\n    //keyPanel: Component\n    //keyboardBackground: Component\n    //keyboardDesignHeight: real\n    //keyboardDesignWidth: real\n    //keyboardHeight: real\n    //keyboardRelativeBottomMargin: real\n    //keyboardRelativeLeftMargin: real\n    //keyboardRelativeRightMargin: real\n    //keyboardRelativeTopMargin: real\n    //languageKeyPanel: Component\n    //languageListAdd: Transition\n    //languageListBackground: Component\n    //languageListDelegate: Component\n    //languageListHighlight: Component\n    //languageListRemove: Transition\n    //languagePopupListEnabled: bool\n    //modeKeyPanel: Component\n    //navigationHighlight: Component\n    //popupListAdd: Transition\n    //popupListBackground: Component\n    //popupListDelegate: Component\n    //popupListHighlight: Component\n    //popupListRemove: Transition\n    //scaleHint: real\n    //selectionHandle: Component\n    //selectionListAdd: Transition\n    //selectionListBackground: Component\n    //selectionListDelegate: Component\n    //selectionListHeight: real\n    //selectionListHighlight: Component\n    //selectionListRemove: Transition\n    //shiftKeyPanel: Component\n    //spaceKeyPanel: Component\n    //symbolKeyPanel: Component\n    //traceCanvasDelegate: Component\n    //traceInputKeyPanelDelegate: Component\n}",
        "description": "KeyboardStyle",
        "prefix": "KeyboardStyle",
        "scope": "source.qml"
    },
    "KeyframeAnimation": {
        "body": "\nKeyframeAnimation {\n    //easing: EasingCurve\n    //endMode: enumeration\n    //framePositions: list<real>\n    //keyframes: list<Transform>\n    //startMode: enumeration\n    //target: Transform\n    //targetName: string\n}",
        "description": "KeyframeAnimation",
        "prefix": "KeyframeAnimation",
        "scope": "source.qml"
    },
    "Keys": {
        "body": "\nKeys {\n    //enabled: bool\n    //forwardTo: list<Object>\n    //priority: enumeration\n    //onAsteriskpressed: { }\n    //onBackpressed: { }\n    //onBacktabpressed: { }\n    //onCallpressed: { }\n    //onCancelpressed: { }\n    //onContext1Pressed: { }\n    //onContext2Pressed: { }\n    //onContext3Pressed: { }\n    //onContext4Pressed: { }\n    //onDeletepressed: { }\n    //onDigit0Pressed: { }\n    //onDigit1Pressed: { }\n    //onDigit2Pressed: { }\n    //onDigit3Pressed: { }\n    //onDigit4Pressed: { }\n    //onDigit5Pressed: { }\n    //onDigit6Pressed: { }\n    //onDigit7Pressed: { }\n    //onDigit8Pressed: { }\n    //onDigit9Pressed: { }\n    //onDownpressed: { }\n    //onEnterpressed: { }\n    //onEscapepressed: { }\n    //onFlippressed: { }\n    //onHanguppressed: { }\n    //onLeftpressed: { }\n    //onMenupressed: { }\n    //onNopressed: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onReturnpressed: { }\n    //onRightpressed: { }\n    //onSelectpressed: { }\n    //onShortcutoverride: { }\n    //onSpacepressed: { }\n    //onTabpressed: { }\n    //onUppressed: { }\n    //onVolumedownpressed: { }\n    //onVolumeuppressed: { }\n    //onYespressed: { }\n}",
        "description": "Keys",
        "prefix": "Keys",
        "scope": "source.qml"
    },
    "Label: QtQuickControls": {
        "body": "\nLabel: QtQuickControls {\n    //advance: size\n    //baseUrl: url\n    //bottomPadding: real\n    //clip: bool\n    //color: color\n    //contentHeight: real\n    //contentWidth: real\n    //effectiveHorizontalAlignment: enumeration\n    //elide: enumeration\n    //font.bold: bool\n    //font.capitalization: enumeration\n    //font.family: string\n    //font.hintingPreference: enumeration\n    //font.italic: bool\n    //font.kerning: bool\n    //font.letterSpacing: real\n    //font.pixelSize: int\n    //font.pointSize: real\n    //font.preferShaping: bool\n    //font.strikeout: bool\n    //font.styleName: string\n    //font.underline: bool\n    //font.weight: enumeration\n    //font.wordSpacing: real\n    //fontInfo.bold: bool\n    //fontInfo.family: string\n    //fontInfo.italic: bool\n    //fontInfo.pixelSize: string\n    //fontInfo.pointSize: real\n    //fontInfo.styleName: string\n    //fontInfo.weight: int\n    //fontSizeMode: enumeration\n    //horizontalAlignment: enumeration\n    //hoveredLink: string\n    //leftPadding: real\n    //lineCount: int\n    //lineHeight: real\n    //lineHeightMode: enumeration\n    //linkColor: color\n    //maximumLineCount: int\n    //minimumPixelSize: int\n    //minimumPointSize: int\n    //padding: real\n    //renderType: enumeration\n    //rightPadding: real\n    //style: enumeration\n    //styleColor: color\n    //text: string\n    //textFormat: enumeration\n    //topPadding: real\n    //truncated: bool\n    //verticalAlignment: enumeration\n    //wrapMode: enumeration\n    //onDolayout: { }\n    //onForcelayout: { }\n    //onLinelaidout: { }\n    //onLinkactivated: { }\n    //onLinkat: { }\n    //onLinkhovered: { }\n}",
        "description": "Label: QtQuickControls",
        "prefix": "Label: QtQuickControls",
        "scope": "source.qml"
    },
    "Label: QtQuickControls2": {
        "body": "\nLabel: QtQuickControls2 {\n    //background: Item\n    //palette: palette\n}",
        "description": "Label: QtQuickControls2",
        "prefix": "Label: QtQuickControls2",
        "scope": "source.qml"
    },
    "Layer": {
        "body": "\nLayer {\n    //recursive: bool\n}",
        "description": "Layer",
        "prefix": "Layer",
        "scope": "source.qml"
    },
    "LayerFilter": {
        "body": "\nLayerFilter {\n    //filterMode: enumeration\n    //layers: list<Layer>\n}",
        "description": "LayerFilter",
        "prefix": "LayerFilter",
        "scope": "source.qml"
    },
    "Layout": {
        "body": "\nLayout {\n    //alignment: Qt.Alignment [attached]\n    //bottomMargin: real [attached]\n    //column: int [attached]\n    //columnSpan: int [attached]\n    //fillHeight: bool [attached]\n    //fillWidth: bool [attached]\n    //leftMargin: real [attached]\n    //margins: real [attached]\n    //maximumHeight: real [attached]\n    //maximumWidth: real [attached]\n    //minimumHeight: real [attached]\n    //minimumWidth: real [attached]\n    //preferredHeight: real [attached]\n    //preferredWidth: real [attached]\n    //rightMargin: real [attached]\n    //row: int [attached]\n    //rowSpan: int [attached]\n    //topMargin: real [attached]\n}",
        "description": "Layout",
        "prefix": "Layout",
        "scope": "source.qml"
    },
    "LayoutMirroring": {
        "body": "\nLayoutMirroring {\n    //childrenInherit: bool\n    //enabled: bool\n}",
        "description": "LayoutMirroring",
        "prefix": "LayoutMirroring",
        "scope": "source.qml"
    },
    "Legend": {
        "body": "\nLegend {\n    //alignment: alignment\n    //backgroundVisible: bool\n    //borderColor: color\n    //color: color\n    //font: Font\n    //labelColor: color\n    //markerShape: enumeration\n    //reverseMarkers: bool\n    //showToolTips: bool\n    //visible: bool\n}",
        "description": "Legend",
        "prefix": "Legend",
        "scope": "source.qml"
    },
    "LerpBlend": {
        "body": "\nLerpBlend {\n    //blendFactor: real\n}",
        "description": "LerpBlend",
        "prefix": "LerpBlend",
        "scope": "source.qml"
    },
    "LevelAdjust": {
        "body": "\nLevelAdjust {\n    //cached: bool\n    //gamma: variant\n    //maximumInput: color\n    //maximumOutput: color\n    //minimumInput: color\n    //minimumOutput: color\n    //source: variant\n}",
        "description": "LevelAdjust",
        "prefix": "LevelAdjust",
        "scope": "source.qml"
    },
    "LevelOfDetail": {
        "body": "\nLevelOfDetail {\n    //ThresholdType: enumeration\n    //camera: Camera\n    //currentIndex: int\n    //thresholdType: int\n    //thresholds: QVector<qreal>\n    //volumeOverride: int\n}",
        "description": "LevelOfDetail",
        "prefix": "LevelOfDetail",
        "scope": "source.qml"
    },
    "LevelOfDetailBoundingSphere": {
        "body": "\nLevelOfDetailBoundingSphere {\n    //center: QVector3D\n    //radius: qreal\n}",
        "description": "LevelOfDetailBoundingSphere",
        "prefix": "LevelOfDetailBoundingSphere",
        "scope": "source.qml"
    },
    "LevelOfDetailLoader": {
        "body": "\nLevelOfDetailLoader {\n    //sources: list<string>\n}",
        "description": "LevelOfDetailLoader",
        "prefix": "LevelOfDetailLoader",
        "scope": "source.qml"
    },
    "LevelOfDetailSwitch": {
        "body": "\nLevelOfDetailSwitch {\n    //currentIndex: int\n}",
        "description": "LevelOfDetailSwitch",
        "prefix": "LevelOfDetailSwitch",
        "scope": "source.qml"
    },
    "LidReading": {
        "body": "\nLidReading {\n    //backLidClosed: qreal\n    //frontLidClosed: qreal\n}",
        "description": "LidReading",
        "prefix": "LidReading",
        "scope": "source.qml"
    },
    "LidSensor": {
        "body": "\nLidSensor {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "LidSensor",
        "prefix": "LidSensor",
        "scope": "source.qml"
    },
    "Light3D": {
        "body": "\nLight3D {\n    //autoPosition: bool\n}",
        "description": "Light3D",
        "prefix": "Light3D",
        "scope": "source.qml"
    },
    "LightReading": {
        "body": "\nLightReading {\n    //illuminance: qreal\n}",
        "description": "LightReading",
        "prefix": "LightReading",
        "scope": "source.qml"
    },
    "LightSensor": {
        "body": "\nLightSensor {\n    //fieldOfView: qreal\n}",
        "description": "LightSensor",
        "prefix": "LightSensor",
        "scope": "source.qml"
    },
    "LineSeries": {
        "body": "\nLineSeries {\n    //capStyle: Qt::PenCapStyle\n    //count: int\n    //style: Qt::PenStyle\n    //width: real\n}",
        "description": "LineSeries",
        "prefix": "LineSeries",
        "scope": "source.qml"
    },
    "LineShape": {
        "body": "\nLineShape {\n    //mirrored: bool\n}",
        "description": "LineShape",
        "prefix": "LineShape",
        "scope": "source.qml"
    },
    "LineWidth": {
        "body": "\nLineWidth {\n    //value: real\n}",
        "description": "LineWidth",
        "prefix": "LineWidth",
        "scope": "source.qml"
    },
    "LinearGradient: QtGraphicalEffects": {
        "body": "\nLinearGradient: QtGraphicalEffects {\n    //cached: bool\n    //end: variant\n    //gradient: Gradient\n    //source: variant\n    //start: variant\n}",
        "description": "LinearGradient: QtGraphicalEffects",
        "prefix": "LinearGradient: QtGraphicalEffects",
        "scope": "source.qml"
    },
    "LinearGradient: QtQuick": {
        "body": "\nLinearGradient: QtQuick {\n    //x1: real\n    //x2: real\n    //y1: real\n    //y2: real\n}",
        "description": "LinearGradient: QtQuick",
        "prefix": "LinearGradient: QtQuick",
        "scope": "source.qml"
    },
    "ListModel": {
        "body": "\nListModel {\n    //count: int\n    //dynamicRoles: bool\n    //onAppend: { }\n    //onClear: { }\n    //onInsert: { }\n    //onMove: { }\n    //onRemove: { }\n    //onSet: { }\n    //onSetproperty: { }\n    //onSync: { }\n}",
        "description": "ListModel",
        "prefix": "ListModel",
        "scope": "source.qml"
    },
    "ListView": {
        "body": "\nListView {\n    //add: Transition\n    //addDisplaced: Transition\n    //cacheBuffer: int\n    //count: int\n    //currentIndex: int\n    //currentItem: Item\n    //currentSection: string\n    //delayRemove: bool [attached]\n    //delegate: Component\n    //displaced: Transition\n    //displayMarginBeginning: int\n    //displayMarginEnd: int\n    //effectiveLayoutDirection: enumeration\n    //footer: Component\n    //footerItem: Item\n    //footerPositioning: enumeration\n    //header: Component\n    //headerItem: Item\n    //headerPositioning: enumeration\n    //highlight: Component\n    //highlightFollowsCurrentItem: bool\n    //highlightItem: Item\n    //highlightMoveDuration: int\n    //highlightMoveVelocity: real\n    //highlightRangeMode: enumeration\n    //highlightResizeDuration: int\n    //highlightResizeVelocity: real\n    //isCurrentItem: bool [attached]\n    //keyNavigationEnabled: bool\n    //keyNavigationWraps: bool\n    //layoutDirection: enumeration\n    //model: model\n    //move: Transition\n    //moveDisplaced: Transition\n    //nextSection: string [attached]\n    //orientation: enumeration\n    //populate: Transition\n    //preferredHighlightBegin: real\n    //preferredHighlightEnd: real\n    //previousSection: string [attached]\n    //remove: Transition\n    //removeDisplaced: Transition\n    //section: string [attached]\n    //section.criteria: enumeration\n    //section.delegate: Component\n    //section.labelPositioning: enumeration\n    //section.property: string\n    //snapMode: enumeration\n    //spacing: real\n    //verticalLayoutDirection: enumeration\n    //view: ListView [attached]\n    //onAdd: { }\n    //onDecrementcurrentindex: { }\n    //onForcelayout: { }\n    //onIncrementcurrentindex: { }\n    //onPositionviewatbeginning: { }\n    //onPositionviewatend: { }\n    //onPositionviewatindex: { }\n    //onRemove: { }\n}",
        "description": "ListView",
        "prefix": "ListView",
        "scope": "source.qml"
    },
    "Loader": {
        "body": "\nLoader {\n    //active: bool\n    //asynchronous: bool\n    //item: object\n    //progress: real\n    //source: url\n    //sourceComponent: Component\n    //status: enumeration\n    //onLoaded: { }\n}",
        "description": "Loader",
        "prefix": "Loader",
        "scope": "source.qml"
    },
    "Locale": {
        "body": "\nLocale {\n    //amText: string\n    //decimalPoint: string\n    //exponential: string\n    //firstDayOfWeek: enumeration\n    //groupSeparator: string\n    //measurementSystem: enumeration\n    //name: string\n    //nativeCountryName: string\n    //nativeLanguageName: string\n    //negativeSign: string\n    //percent: string\n    //pmText: string\n    //positiveSign: string\n    //textDirection: enumeration\n    //uiLanguages: Array<string>\n    //weekDays: Array<int>\n    //zeroDigit: string\n}",
        "description": "Locale",
        "prefix": "Locale",
        "scope": "source.qml"
    },
    "Location": {
        "body": "\nLocation {\n    //address: Address\n    //boundingBox: georectangle\n    //coordinate: coordinate\n    //location: QGeoLocation\n}",
        "description": "Location",
        "prefix": "Location",
        "scope": "source.qml"
    },
    "LogValueAxis": {
        "body": "\nLogValueAxis {\n    //base: real\n    //labelFormat: real\n    //max: real\n    //min: real\n    //minorTickCount: int\n    //tickCount: int\n    //onMinortickcountchanged: { }\n    //onTickcountchanged: { }\n}",
        "description": "LogValueAxis",
        "prefix": "LogValueAxis",
        "scope": "source.qml"
    },
    "LogValueAxis3DFormatter": {
        "body": "\nLogValueAxis3DFormatter {\n    //autoSubGrid: bool\n    //base: real\n    //showEdgeLabels: bool\n}",
        "description": "LogValueAxis3DFormatter",
        "prefix": "LogValueAxis3DFormatter",
        "scope": "source.qml"
    },
    "LoggingCategory": {
        "body": "\nLoggingCategory {\n    //name: string\n}",
        "description": "LoggingCategory",
        "prefix": "LoggingCategory",
        "scope": "source.qml"
    },
    "LogicalDevice": {
        "body": "\nLogicalDevice {\n    //actions: list<Action>\n    //axis: list<Axis>\n}",
        "description": "LogicalDevice",
        "prefix": "LogicalDevice",
        "scope": "source.qml"
    },
    "Magnetometer": {
        "body": "\nMagnetometer {\n    //returnGeoValues: bool\n}",
        "description": "Magnetometer",
        "prefix": "Magnetometer",
        "scope": "source.qml"
    },
    "MagnetometerReading": {
        "body": "\nMagnetometerReading {\n    //calibrationLevel: qreal\n    //x: qreal\n    //y: qreal\n    //z: qreal\n}",
        "description": "MagnetometerReading",
        "prefix": "MagnetometerReading",
        "scope": "source.qml"
    },
    "Map": {
        "body": "\nMap {\n    //activeMapType: MapType\n    //bearing: real\n    //center: coordinate\n    //color: color\n    //copyrightsVisible: bool\n    //error: enumeration\n    //errorString: string\n    //fieldOfView: real\n    //gesture: MapGestureArea\n    //mapItems: list<MapItem>\n    //mapParameters: list<MapParameters>\n    //mapReady: bool\n    //maximumFieldOfView: real\n    //maximumTilt: real\n    //maximumZoomLevel: real\n    //minimumFieldOfView: real\n    //minimumTilt: real\n    //minimumZoomLevel: real\n    //plugin: Plugin\n    //supportedMapTypes: list<MapType>\n    //tilt: real\n    //visibleRegion: geoshape\n    //zoomLevel: real\n    //onCopyrightlinkactivated: { }\n}",
        "description": "Map",
        "prefix": "Map",
        "scope": "source.qml"
    },
    "MapCircle": {
        "body": "\nMapCircle {\n    //border.color: color\n    //border.width: int\n    //center: coordinate\n    //color: color\n    //opacity: real\n    //radius: real\n}",
        "description": "MapCircle",
        "prefix": "MapCircle",
        "scope": "source.qml"
    },
    "MapCircleObject": {
        "body": "\nMapCircleObject {\n    //border.color: color\n    //border.width: int\n    //center: coordinate\n    //color: color\n    //radius: real\n}",
        "description": "MapCircleObject",
        "prefix": "MapCircleObject",
        "scope": "source.qml"
    },
    "MapCopyrightNotice": {
        "body": "\nMapCopyrightNotice {\n    //mapSource: Map\n    //styleSheet: string\n}",
        "description": "MapCopyrightNotice",
        "prefix": "MapCopyrightNotice",
        "scope": "source.qml"
    },
    "MapGestureArea": {
        "body": "\nMapGestureArea {\n    //acceptedGestures: enumeration\n    //enabled: bool\n    //flickDeceleration: real\n    //maximumZoomLevelChange: real\n    //panActive: bool\n    //pinchActive: bool\n    //preventStealing: bool\n    //rotationActive: bool\n    //tiltActive: bool\n    //onFlickfinished: { }\n    //onFlickstarted: { }\n    //onPanfinished: { }\n    //onPanstarted: { }\n    //onPinchfinished: { }\n    //onPinchstarted: { }\n    //onPinchupdated: { }\n    //onRotationfinished: { }\n    //onRotationstarted: { }\n    //onRotationupdated: { }\n    //onTiltfinished: { }\n    //onTiltstarted: { }\n    //onTiltupdated: { }\n}",
        "description": "MapGestureArea",
        "prefix": "MapGestureArea",
        "scope": "source.qml"
    },
    "MapIconObject": {
        "body": "\nMapIconObject {\n    //content: Variant\n    //coordinate: Variant\n    //size: Variant\n}",
        "description": "MapIconObject",
        "prefix": "MapIconObject",
        "scope": "source.qml"
    },
    "MapItemView": {
        "body": "\nMapItemView {\n    //autoFitViewport: Component\n    //delegate: Component\n    //model: model\n}",
        "description": "MapItemView",
        "prefix": "MapItemView",
        "scope": "source.qml"
    },
    "MapObjectView": {
        "body": "\nMapObjectView {\n    //delegate: Component\n    //model: Variant\n}",
        "description": "MapObjectView",
        "prefix": "MapObjectView",
        "scope": "source.qml"
    },
    "MapPinchEvent": {
        "body": "\nMapPinchEvent {\n    //accepted: bool\n    //angle: real\n    //center: QPoint\n    //point1: QPoint\n    //point2: QPoint\n    //pointCount: int\n}",
        "description": "MapPinchEvent",
        "prefix": "MapPinchEvent",
        "scope": "source.qml"
    },
    "MapPolygon": {
        "body": "\nMapPolygon {\n    //border.color: color\n    //border.width: int\n    //color: color\n    //path: list<coordinate>\n}",
        "description": "MapPolygon",
        "prefix": "MapPolygon",
        "scope": "source.qml"
    },
    "MapPolygonObject": {
        "body": "\nMapPolygonObject {\n    //border.color: color\n    //border.width: int\n    //color: color\n    //path: VariantList\n}",
        "description": "MapPolygonObject",
        "prefix": "MapPolygonObject",
        "scope": "source.qml"
    },
    "MapPolyline": {
        "body": "\nMapPolyline {\n    //line.color: color\n    //line.width: int\n    //path: list<coordinate>\n}",
        "description": "MapPolyline",
        "prefix": "MapPolyline",
        "scope": "source.qml"
    },
    "MapPolylineObject": {
        "body": "\nMapPolylineObject {\n    //line.color: color\n    //line.width: int\n    //path: VariantList\n}",
        "description": "MapPolylineObject",
        "prefix": "MapPolylineObject",
        "scope": "source.qml"
    },
    "MapQuickItem": {
        "body": "\nMapQuickItem {\n    //anchorPoint: QPointF\n    //coordinate: coordinate\n    //sourceItem: object\n    //zoomLevel: real\n}",
        "description": "MapQuickItem",
        "prefix": "MapQuickItem",
        "scope": "source.qml"
    },
    "MapRectangle": {
        "body": "\nMapRectangle {\n    //border.color: color\n    //border.width: int\n    //bottomRight: coordinate\n    //color: color\n    //opacity: real\n    //topLeft: coordinate\n}",
        "description": "MapRectangle",
        "prefix": "MapRectangle",
        "scope": "source.qml"
    },
    "MapRoute": {
        "body": "\nMapRoute {\n    //line.color: color\n    //line.width: int\n    //route: Route\n}",
        "description": "MapRoute",
        "prefix": "MapRoute",
        "scope": "source.qml"
    },
    "MapRouteObject": {
        "body": "\nMapRouteObject {\n    //route: Route\n}",
        "description": "MapRouteObject",
        "prefix": "MapRouteObject",
        "scope": "source.qml"
    },
    "MapType": {
        "body": "\nMapType {\n    //cameraCapabilities: CameraCapabilities\n    //description: string\n    //metadata: VariantMap\n    //mobile: bool\n    //name: string\n    //night: bool\n    //style: enumeration\n}",
        "description": "MapType",
        "prefix": "MapType",
        "scope": "source.qml"
    },
    "Margins": {
        "body": "\nMargins {\n    //bottom: int\n    //left: int\n    //right: int\n    //top: int\n}",
        "description": "Margins",
        "prefix": "Margins",
        "scope": "source.qml"
    },
    "MaskShape": {
        "body": "\nMaskShape {\n    //source: url\n}",
        "description": "MaskShape",
        "prefix": "MaskShape",
        "scope": "source.qml"
    },
    "MaskedBlur": {
        "body": "\nMaskedBlur {\n    //cached: alias\n    //maskSource: alias\n    //radius: alias\n    //samples: alias\n    //source: alias\n}",
        "description": "MaskedBlur",
        "prefix": "MaskedBlur",
        "scope": "source.qml"
    },
    "Material": {
        "body": "\nMaterial {\n    //effect: Effect\n    //parameters: list<Parameter>\n}",
        "description": "Material",
        "prefix": "Material",
        "scope": "source.qml"
    },
    "Matrix4x4": {
        "body": "\nMatrix4x4 {\n    //matrix: QMatrix4x4\n}",
        "description": "Matrix4x4",
        "prefix": "Matrix4x4",
        "scope": "source.qml"
    },
    "MediaPlayer": {
        "body": "\nMediaPlayer {\n    //audioRole: enumeration\n    //autoLoad: bool\n    //autoPlay: bool\n    //availability: enumeration\n    //bufferProgress: real\n    //customAudioRole: string\n    //duration: int\n    //error: enumeration\n    //errorString: string\n    //hasAudio: bool\n    //hasVideo: bool\n    //loops: int\n    //mediaObject: variant\n    //metaData.albumArtist: variant\n    //metaData.albumTitle: variant\n    //metaData.audioBitRate: variant\n    //metaData.audioCodec: variant\n    //metaData.author: variant\n    //metaData.averageLevel: variant\n    //metaData.category: variant\n    //metaData.channelCount: variant\n    //metaData.chapterNumber: variant\n    //metaData.comment: variant\n    //metaData.composer: variant\n    //metaData.conductor: variant\n    //metaData.contributingArtist: variant\n    //metaData.copyright: variant\n    //metaData.coverArtUrlLarge: variant\n    //metaData.coverArtUrlSmall: variant\n    //metaData.date: variant\n    //metaData.description: variant\n    //metaData.director: variant\n    //metaData.genre: variant\n    //metaData.keywords: variant\n    //metaData.language: variant\n    //metaData.leadPerformer: variant\n    //metaData.lyrics: variant\n    //metaData.mediaType: variant\n    //metaData.mood: variant\n    //metaData.parentalRating: variant\n    //metaData.peakValue: variant\n    //metaData.pixelAspectRatio: variant\n    //metaData.posterUrl: variant\n    //metaData.publisher: variant\n    //metaData.ratingOrganization: variant\n    //metaData.resolution: variant\n    //metaData.sampleRate: variant\n    //metaData.size: variant\n    //metaData.subTitle: variant\n    //metaData.title: variant\n    //metaData.trackCount: variant\n    //metaData.trackNumber: variant\n    //metaData.userRating: variant\n    //metaData.videoBitRate: variant\n    //metaData.videoCodec: variant\n    //metaData.videoFrameRate: variant\n    //metaData.writer: variant\n    //metaData.year: variant\n    //muted: bool\n    //notifyInterval: int\n    //playbackRate: real\n    //playbackState: enumeration\n    //playlist: Playlist\n    //position: int\n    //seekable: bool\n    //source: url\n    //status: enumeration\n    //volume: real\n    //onError: { }\n    //onPause: { }\n    //onPaused: { }\n    //onPlay: { }\n    //onPlaybackstatechanged: { }\n    //onPlaying: { }\n    //onSeek: { }\n    //onStop: { }\n    //onStopped: { }\n}",
        "description": "MediaPlayer",
        "prefix": "MediaPlayer",
        "scope": "source.qml"
    },
    "MemoryBarrier": {
        "body": "\nMemoryBarrier {\n    //childNodes: list<Node>\n    //data: list<QtQml::QtObject>\n    //propertyTrackingOverrides: QJSValue\n}",
        "description": "MemoryBarrier",
        "prefix": "MemoryBarrier",
        "scope": "source.qml"
    },
    "Menu: QtQuickControls": {
        "body": "\nMenu: QtQuickControls {\n    //enabled: bool\n    //iconName: string\n    //iconSource: url\n    //items: list<Object>\n    //style: Component\n    //title: string\n    //type: enumeration\n    //visible: bool\n    //onAbouttohide: { }\n    //onAbouttoshow: { }\n}",
        "description": "Menu: QtQuickControls",
        "prefix": "Menu: QtQuickControls",
        "scope": "source.qml"
    },
    "Menu: QtQuickControls2": {
        "body": "\nMenu: QtQuickControls2 {\n    //cascade: bool\n    //contentData: list<Object>\n    //contentModel: model\n    //count: int\n    //currentIndex: int\n    //delegate: Component\n    //overlap: real\n    //title: string\n}",
        "description": "Menu: QtQuickControls2",
        "prefix": "Menu: QtQuickControls2",
        "scope": "source.qml"
    },
    "MenuBar: QtQuickControls": {
        "body": "\nMenuBar: QtQuickControls {\n    //menus: list<Menu>\n    //style: Component\n}",
        "description": "MenuBar: QtQuickControls",
        "prefix": "MenuBar: QtQuickControls",
        "scope": "source.qml"
    },
    "MenuBar: QtQuickControls2": {
        "body": "\nMenuBar: QtQuickControls2 {\n    //contentHeight: real\n    //contentWidth: real\n    //delegate: Component\n    //menus: list<Menu>\n}",
        "description": "MenuBar: QtQuickControls2",
        "prefix": "MenuBar: QtQuickControls2",
        "scope": "source.qml"
    },
    "MenuBarItem": {
        "body": "\nMenuBarItem {\n    //highlighted: bool\n    //menu: Menu\n    //menuBar: Menu\n}",
        "description": "MenuBarItem",
        "prefix": "MenuBarItem",
        "scope": "source.qml"
    },
    "MenuBarStyle": {
        "body": "\nMenuBarStyle {\n    //background: Component\n    //font: font\n    //itemDelegate: Component\n    //menuStyle: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n}",
        "description": "MenuBarStyle",
        "prefix": "MenuBarStyle",
        "scope": "source.qml"
    },
    "MenuItem: QtQuickControls": {
        "body": "\nMenuItem: QtQuickControls {\n    //action: Action\n    //checkable: bool\n    //checked: bool\n    //enabled: bool\n    //exclusiveGroup: ExclusiveGroup\n    //iconName: string\n    //iconSource: url\n    //shortcut: keysequence\n    //text: string\n    //type: enumeration\n    //visible: bool\n    //onToggled: { }\n    //onTriggered: { }\n}",
        "description": "MenuItem: QtQuickControls",
        "prefix": "MenuItem: QtQuickControls",
        "scope": "source.qml"
    },
    "MenuItem: QtQuickControls2": {
        "body": "\nMenuItem: QtQuickControls2 {\n    //arrow: Item\n    //highlighted: bool\n    //menu: Menu\n    //subMenu: Menu\n}",
        "description": "MenuItem: QtQuickControls2",
        "prefix": "MenuItem: QtQuickControls2",
        "scope": "source.qml"
    },
    "MenuSeparator: QtQuickControls": {
        "body": "\nMenuSeparator: QtQuickControls {\n    //type: enumeration\n    //visible: bool\n}",
        "description": "MenuSeparator: QtQuickControls",
        "prefix": "MenuSeparator: QtQuickControls",
        "scope": "source.qml"
    },
    "MenuSeparator: QtQuickControls2": {
        "body": "\nMenuSeparator: QtQuickControls2 {\n    //availableHeight: real\n    //availableWidth: real\n    //background: Item\n    //bottomPadding: real\n    //contentItem: Item\n    //focusPolicy: enumeration\n    //focusReason: enumeration\n    //font: font\n    //hoverEnabled: bool\n    //hovered: bool\n    //leftPadding: real\n    //locale: Locale\n    //mirrored: bool\n    //padding: real\n    //palette: palette\n    //rightPadding: real\n    //spacing: real\n    //topPadding: real\n    //visualFocus: bool\n    //wheelEnabled: bool\n}",
        "description": "MenuSeparator: QtQuickControls2",
        "prefix": "MenuSeparator: QtQuickControls2",
        "scope": "source.qml"
    },
    "MenuStyle": {
        "body": "\nMenuStyle {\n    //font: font\n    //frame: Component\n    //itemDelegate: Object\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //scrollIndicator: Component\n    //separator: Component\n    //submenuOverlap: int\n    //submenuPopupDelay: int\n}",
        "description": "MenuStyle",
        "prefix": "MenuStyle",
        "scope": "source.qml"
    },
    "Mesh": {
        "body": "\nMesh {\n    //meshName: string\n    //source: url\n    //status: enumeration\n}",
        "description": "Mesh",
        "prefix": "Mesh",
        "scope": "source.qml"
    },
    "MessageDialog": {
        "body": "\nMessageDialog {\n    //clickedButton: StandardButton\n    //detailedText: string\n    //icon: QQuickStandardIcon::Icon\n    //informativeText: string\n    //modality: Qt::WindowModality\n    //standardButtons: StandardButtons\n    //text: string\n    //title: string\n    //visible: bool\n    //onAccepted: { }\n    //onApply: { }\n    //onDiscard: { }\n    //onHelp: { }\n    //onNo: { }\n    //onRejected: { }\n    //onReset: { }\n    //onYes: { }\n}",
        "description": "MessageDialog",
        "prefix": "MessageDialog",
        "scope": "source.qml"
    },
    "ModeKey": {
        "body": "\nModeKey {\n    //mode: bool\n}",
        "description": "ModeKey",
        "prefix": "ModeKey",
        "scope": "source.qml"
    },
    "MorphTarget": {
        "body": "\nMorphTarget {\n    //attributeNames: list<string>\n    //attributes: list<Attribute>\n}",
        "description": "MorphTarget",
        "prefix": "MorphTarget",
        "scope": "source.qml"
    },
    "MorphingAnimation": {
        "body": "\nMorphingAnimation {\n    //easing: EasingCurve\n    //interpolator: real\n    //method: enumeration\n    //morphTargets: list<MorphTarget>\n    //target: GeometryRenderer\n    //targetName: string\n    //targetPositions: list<real>\n}",
        "description": "MorphingAnimation",
        "prefix": "MorphingAnimation",
        "scope": "source.qml"
    },
    "MouseArea": {
        "body": "\nMouseArea {\n    //acceptedButtons: Qt::MouseButtons\n    //containsMouse: bool\n    //containsPress: bool\n    //cursorShape: Qt::CursorShape\n    //drag.active: bool\n    //drag.axis: enumeration\n    //drag.filterChildren: bool\n    //drag.maximumX: real\n    //drag.maximumY: real\n    //drag.minimumX: real\n    //drag.minimumY: real\n    //drag.target: Item\n    //drag.threshold: real\n    //enabled: bool\n    //hoverEnabled: bool\n    //mouseX: real\n    //mouseY: real\n    //pressAndHoldInterval: int\n    //pressed: bool\n    //pressedButtons: MouseButtons\n    //preventStealing: bool\n    //propagateComposedEvents: bool\n    //scrollGestureEnabled: bool\n    //onCanceled: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onEntered: { }\n    //onExited: { }\n    //onPositionchanged: { }\n    //onPressandhold: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onWheel: { }\n}",
        "description": "MouseArea",
        "prefix": "MouseArea",
        "scope": "source.qml"
    },
    "MouseDevice": {
        "body": "\nMouseDevice {\n    //sensitivity: real\n}",
        "description": "MouseDevice",
        "prefix": "MouseDevice",
        "scope": "source.qml"
    },
    "MouseEvent: Qt3D": {
        "body": "\nMouseEvent: Qt3D {\n    //accepted: bool\n    //button: Buttons\n    //buttons: int\n    //modifiers: Modifiers\n    //wasHeld: bool\n    //x: int\n    //y: int\n}",
        "description": "MouseEvent: Qt3D",
        "prefix": "MouseEvent: Qt3D",
        "scope": "source.qml"
    },
    "MouseEvent: QtQuick": {
        "body": "\nMouseEvent: QtQuick {\n    //accepted: bool\n    //button: enumeration\n    //buttons: int\n    //flags: int\n    //modifiers: int\n    //source: int\n    //wasHeld: bool\n    //x: real\n    //y: real\n}",
        "description": "MouseEvent: QtQuick",
        "prefix": "MouseEvent: QtQuick",
        "scope": "source.qml"
    },
    "MouseHandler": {
        "body": "\nMouseHandler {\n    //containsMouse: bool\n    //sourceDevice: MouseDevice\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onEntered: { }\n    //onExited: { }\n    //onPositionchanged: { }\n    //onPressandhold: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onWheel: { }\n}",
        "description": "MouseHandler",
        "prefix": "MouseHandler",
        "scope": "source.qml"
    },
    "MultiPointHandler": {
        "body": "\nMultiPointHandler {\n    //acceptedDevices: int\n    //acceptedModifiers: int\n    //acceptedPointerTypes: int\n    //active: bool\n    //enabled: bool\n    //grabPermission: bool\n    //maximumPointCount: int\n    //minimumPointCount: int\n    //parent: Item\n    //pointDistanceThreshold: real\n    //target: Item\n    //onCanceled: { }\n    //onGrabchanged: { }\n}",
        "description": "MultiPointHandler",
        "prefix": "MultiPointHandler",
        "scope": "source.qml"
    },
    "MultiPointTouchArea": {
        "body": "\nMultiPointTouchArea {\n    //maximumTouchPoints: int\n    //minimumTouchPoints: int\n    //mouseEnabled: bool\n    //touchPoints: list<TouchPoint>\n    //onCanceled: { }\n    //onGesturestarted: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onTouchupdated: { }\n    //onUpdated: { }\n}",
        "description": "MultiPointTouchArea",
        "prefix": "MultiPointTouchArea",
        "scope": "source.qml"
    },
    "MultiSampleAntiAliasing": {
        "body": "\nMultiSampleAntiAliasing {\n    //childNodes: list<Node>\n    //data: list<QtQml::QtObject>\n    //propertyTrackingOverrides: QJSValue\n}",
        "description": "MultiSampleAntiAliasing",
        "prefix": "MultiSampleAntiAliasing",
        "scope": "source.qml"
    },
    "Navigator": {
        "body": "\nNavigator {\n    //active: bool\n    //currentRoute: Route\n    //currentSegment: int\n    //map: Map\n    //navigatorReady: bool\n    //plugin: Plugin\n    //positionSource: PositionSource\n    //route: Route\n    //trackPositionSource: bool\n    //onDestinationreached: { }\n    //onWaypointreached: { }\n}",
        "description": "Navigator",
        "prefix": "Navigator",
        "scope": "source.qml"
    },
    "NdefFilter": {
        "body": "\nNdefFilter {\n    //maximum: int\n    //minimum: int\n    //type: string\n    //typeNameFormat: QQmlNdefRecord::TypeNameFormat\n}",
        "description": "NdefFilter",
        "prefix": "NdefFilter",
        "scope": "source.qml"
    },
    "NdefMimeRecord": {
        "body": "\nNdefMimeRecord {\n    //uri: string\n}",
        "description": "NdefMimeRecord",
        "prefix": "NdefMimeRecord",
        "scope": "source.qml"
    },
    "NdefRecord": {
        "body": "\nNdefRecord {\n    //record: string\n    //type: string\n    //typeNameFormat: enumeration\n}",
        "description": "NdefRecord",
        "prefix": "NdefRecord",
        "scope": "source.qml"
    },
    "NdefTextRecord": {
        "body": "\nNdefTextRecord {\n    //locale: string\n    //localeMatch: enumeration\n    //text: string\n}",
        "description": "NdefTextRecord",
        "prefix": "NdefTextRecord",
        "scope": "source.qml"
    },
    "NdefUriRecord": {
        "body": "\nNdefUriRecord {\n    //uri: string\n}",
        "description": "NdefUriRecord",
        "prefix": "NdefUriRecord",
        "scope": "source.qml"
    },
    "NearField": {
        "body": "\nNearField {\n    //filter: list<NdefFilter>\n    //messageRecords: list<NdefRecord>\n    //orderMatch: bool\n    //polling: bool\n    //onTagfound: { }\n    //onTagremoved: { }\n}",
        "description": "NearField",
        "prefix": "NearField",
        "scope": "source.qml"
    },
    "NoDepthMask": {
        "body": "\nNoDepthMask {\n    //childNodes: list<Node>\n    //data: list<QtQml::QtObject>\n    //propertyTrackingOverrides: QJSValue\n}",
        "description": "NoDepthMask",
        "prefix": "NoDepthMask",
        "scope": "source.qml"
    },
    "NoDraw": {
        "body": "\nNoDraw {\n    //childNodes: list<Node>\n    //data: list<QtQml::QtObject>\n    //propertyTrackingOverrides: QJSValue\n}",
        "description": "NoDraw",
        "prefix": "NoDraw",
        "scope": "source.qml"
    },
    "Node": {
        "body": "\nNode {\n    //childNodes: list<Node>\n    //data: list<QtQml::QtObject>\n    //propertyTrackingOverrides: QJSValue\n}",
        "description": "Node",
        "prefix": "Node",
        "scope": "source.qml"
    },
    "NodeInstantiator": {
        "body": "\nNodeInstantiator {\n    //active: bool\n    //asynchronous: bool\n    //count: int\n    //delegate: QtQml::Component\n    //model: variant\n    //object: QtQml::QtObject\n    //onObjectadded: { }\n    //onObjectremoved: { }\n}",
        "description": "NodeInstantiator",
        "prefix": "NodeInstantiator",
        "scope": "source.qml"
    },
    "NormalDiffuseMapAlphaMaterial": {
        "body": "\nNormalDiffuseMapAlphaMaterial {\n    //ambient: color\n    //diffuse: TextureImage\n    //normal: TextureImage\n    //shininess: real\n    //specular: color\n    //textureScale: real\n}",
        "description": "NormalDiffuseMapAlphaMaterial",
        "prefix": "NormalDiffuseMapAlphaMaterial",
        "scope": "source.qml"
    },
    "NormalDiffuseMapMaterial": {
        "body": "\nNormalDiffuseMapMaterial {\n    //ambient: color\n    //diffuse: TextureImage\n    //normal: TextureImage\n    //shininess: real\n    //specular: color\n    //textureScale: real\n}",
        "description": "NormalDiffuseMapMaterial",
        "prefix": "NormalDiffuseMapMaterial",
        "scope": "source.qml"
    },
    "NormalDiffuseSpecularMapMaterial": {
        "body": "\nNormalDiffuseSpecularMapMaterial {\n    //ambient: color\n    //diffuse: TextureImage\n    //normal: TextureImage\n    //shininess: real\n    //specular: TextureImage\n    //textureScale: real\n}",
        "description": "NormalDiffuseSpecularMapMaterial",
        "prefix": "NormalDiffuseSpecularMapMaterial",
        "scope": "source.qml"
    },
    "Number": {
        "body": "\nNumber",
        "description": "Number",
        "prefix": "Number",
        "scope": "source.qml"
    },
    "NumberAnimation": {
        "body": "\nNumberAnimation {\n    //from: real\n    //to: real\n}",
        "description": "NumberAnimation",
        "prefix": "NumberAnimation",
        "scope": "source.qml"
    },
    "NumberKey": {
        "body": "\nNumberKey {\n    //active: bool\n    //alternativeKeys: var\n    //displayText: string\n    //effectiveAlternativeKeys: var\n    //effectiveAlternativeKeysHighlightIndex: int\n    //functionKey: bool\n    //highlighted: bool\n    //key: int\n    //keyPanelDelegate: alias\n    //noKeyEvent: bool\n    //noModifier: bool\n    //pressed: bool\n    //repeat: bool\n    //showPreview: bool\n    //smallText: string\n    //smallTextVisible: bool\n    //soundEffect: url\n    //text: string\n    //uppercased: bool\n    //weight: real\n    //onClicked: { }\n}",
        "description": "NumberKey",
        "prefix": "NumberKey",
        "scope": "source.qml"
    },
    "Object3D": {
        "body": "\nObject3D {\n    //position: vector3d\n}",
        "description": "Object3D",
        "prefix": "Object3D",
        "scope": "source.qml"
    },
    "ObjectModel": {
        "body": "\nObjectModel {\n    //count: int\n    //index: int [attached]\n    //onAppend: { }\n    //onClear: { }\n    //onInsert: { }\n    //onMove: { }\n    //onRemove: { }\n}",
        "description": "ObjectModel",
        "prefix": "ObjectModel",
        "scope": "source.qml"
    },
    "ObjectPicker": {
        "body": "\nObjectPicker {\n    //containsMouse: bool\n    //dragEnabled: bool\n    //hoverEnabled: bool\n    //pressed: bool\n    //onClicked: { }\n    //onClicked: { }\n    //onEntered: { }\n    //onExited: { }\n    //onMoved: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "ObjectPicker",
        "prefix": "ObjectPicker",
        "scope": "source.qml"
    },
    "OpacityAnimator": {
        "body": "\nOpacityAnimator {\n    //duration: int\n    //easing.amplitude: real\n    //easing.bezierCurve: list<real>\n    //easing.overshoot: real\n    //easing.period: real\n    //easing.type: enumeration\n    //from: real\n    //target: QtQuick::Item\n    //to: real\n}",
        "description": "OpacityAnimator",
        "prefix": "OpacityAnimator",
        "scope": "source.qml"
    },
    "OpacityMask": {
        "body": "\nOpacityMask {\n    //cached: bool\n    //invert: bool\n    //maskSource: variant\n    //source: variant\n}",
        "description": "OpacityMask",
        "prefix": "OpacityMask",
        "scope": "source.qml"
    },
    "OpenGLInfo": {
        "body": "\nOpenGLInfo {\n    //majorVersion: int\n    //minorVersion: int\n    //profile: enumeration\n    //renderableType: enumeration\n}",
        "description": "OpenGLInfo",
        "prefix": "OpenGLInfo",
        "scope": "source.qml"
    },
    "OrbitCameraController": {
        "body": "\nOrbitCameraController {\n    //camera: Camera\n    //linearSpeed: real\n    //lookSpeed: real\n    //zoomLimit: real\n}",
        "description": "OrbitCameraController",
        "prefix": "OrbitCameraController",
        "scope": "source.qml"
    },
    "OrientationReading": {
        "body": "\nOrientationReading {\n    //orientation: Orientation\n}",
        "description": "OrientationReading",
        "prefix": "OrientationReading",
        "scope": "source.qml"
    },
    "OrientationSensor": {
        "body": "\nOrientationSensor {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "OrientationSensor",
        "prefix": "OrientationSensor",
        "scope": "source.qml"
    },
    "Overlay": {
        "body": "\nOverlay {\n    //modal: Component [attached]\n    //modeless: Component [attached]\n    //overlay: Overlay [attached]\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "Overlay",
        "prefix": "Overlay",
        "scope": "source.qml"
    },
    "Package": {
        "body": "\nPackage {\n    //name: string [attached]\n}",
        "description": "Package",
        "prefix": "Package",
        "scope": "source.qml"
    },
    "Page": {
        "body": "\nPage {\n    //contentChildren: list<Item>\n    //contentData: list<Object>\n    //contentHeight: real\n    //contentWidth: real\n    //footer: Item\n    //header: Item\n    //title: string\n}",
        "description": "Page",
        "prefix": "Page",
        "scope": "source.qml"
    },
    "PageIndicator": {
        "body": "\nPageIndicator {\n    //count: int\n    //currentIndex: int\n    //delegate: Component\n    //interactive: bool\n}",
        "description": "PageIndicator",
        "prefix": "PageIndicator",
        "scope": "source.qml"
    },
    "Pane": {
        "body": "\nPane {\n    //contentChildren: list<Item>\n    //contentData: list<Object>\n    //contentHeight: real\n    //contentWidth: real\n}",
        "description": "Pane",
        "prefix": "Pane",
        "scope": "source.qml"
    },
    "ParallelAnimation": {
        "body": "\nParallelAnimation {\n    //alwaysRunToEnd: bool\n    //loops: int\n    //paused: bool\n    //running: bool\n    //onComplete: { }\n    //onPause: { }\n    //onRestart: { }\n    //onResume: { }\n    //onStart: { }\n    //onStarted: { }\n    //onStop: { }\n    //onStopped: { }\n}",
        "description": "ParallelAnimation",
        "prefix": "ParallelAnimation",
        "scope": "source.qml"
    },
    "Parameter": {
        "body": "\nParameter {\n    //name: QString\n    //value: QVariant\n}",
        "description": "Parameter",
        "prefix": "Parameter",
        "scope": "source.qml"
    },
    "ParentAnimation": {
        "body": "\nParentAnimation {\n    //newParent: Item\n    //target: Item\n    //via: Item\n}",
        "description": "ParentAnimation",
        "prefix": "ParentAnimation",
        "scope": "source.qml"
    },
    "ParentChange": {
        "body": "\nParentChange {\n    //height: real\n    //parent: Item\n    //rotation: real\n    //scale: real\n    //target: Item\n    //width: real\n    //x: real\n    //y: real\n}",
        "description": "ParentChange",
        "prefix": "ParentChange",
        "scope": "source.qml"
    },
    "Particle": {
        "body": "\nParticle {\n    //alpha: real\n    //autoRotate: bool\n    //ax: real\n    //ay: real\n    //blue: real\n    //currentSize: real\n    //endSize: real\n    //green: real\n    //initialAX: real\n    //initialAY: real\n    //initialVX: real\n    //initialVY: real\n    //initialX: real\n    //initialY: real\n    //lifeLeft: real\n    //lifeSpan: real\n    //red: real\n    //rotation: real\n    //rotationVelocity: real\n    //startSize: real\n    //t: real\n    //update: bool\n    //vx: real\n    //vy: real\n    //x: real\n    //xDeformationVectorX: real\n    //xDeformationVectorY: real\n    //y: real\n    //yDeformationVectorX: real\n    //yDeformationVectorY: real\n}",
        "description": "Particle",
        "prefix": "Particle",
        "scope": "source.qml"
    },
    "ParticleGroup": {
        "body": "\nParticleGroup {\n    //duration: int\n    //durationVariation: ParticleSystem\n    //name: string\n    //system: ParticleSystem\n    //to: ParticleSystem\n}",
        "description": "ParticleGroup",
        "prefix": "ParticleGroup",
        "scope": "source.qml"
    },
    "ParticlePainter": {
        "body": "\nParticlePainter {\n    //groups: list<string>\n    //system: ParticleSystem\n}",
        "description": "ParticlePainter",
        "prefix": "ParticlePainter",
        "scope": "source.qml"
    },
    "ParticleSystem": {
        "body": "\nParticleSystem {\n    //empty: bool\n    //particleStates: list<Sprite>\n    //paused: bool\n    //running: bool\n    //onPause: { }\n    //onReset: { }\n    //onRestart: { }\n    //onResume: { }\n    //onStart: { }\n    //onStop: { }\n}",
        "description": "ParticleSystem",
        "prefix": "ParticleSystem",
        "scope": "source.qml"
    },
    "Path": {
        "body": "\nPath {\n    //closed: bool\n    //pathElements: list<PathElement>\n    //startX: real\n    //startY: real\n}",
        "description": "Path",
        "prefix": "Path",
        "scope": "source.qml"
    },
    "PathAngleArc": {
        "body": "\nPathAngleArc {\n    //centerX: real\n    //centerY: real\n    //moveToStart: bool\n    //radiusX: real\n    //radiusY: real\n    //startAngle: real\n    //sweepAngle: real\n}",
        "description": "PathAngleArc",
        "prefix": "PathAngleArc",
        "scope": "source.qml"
    },
    "PathAnimation": {
        "body": "\nPathAnimation {\n    //anchorPoint: point\n    //duration: int\n    //easing.amplitude: real\n    //easing.bezierCurve: list<real>\n    //easing.overshoot: real\n    //easing.period: real\n    //easing.type: enumeration\n    //endRotation: real\n    //orientation: enumeration\n    //orientationEntryDuration: real\n    //orientationExitDuration: real\n    //path: Path\n    //target: Item\n}",
        "description": "PathAnimation",
        "prefix": "PathAnimation",
        "scope": "source.qml"
    },
    "PathArc": {
        "body": "\nPathArc {\n    //direction: enumeration\n    //radiusX: real\n    //radiusY: real\n    //relativeX: real\n    //relativeY: real\n    //useLargeArc: bool\n    //x: real\n    //xAxisRotation: real\n    //y: real\n}",
        "description": "PathArc",
        "prefix": "PathArc",
        "scope": "source.qml"
    },
    "PathAttribute": {
        "body": "\nPathAttribute {\n    //name: string\n    //value: real\n}",
        "description": "PathAttribute",
        "prefix": "PathAttribute",
        "scope": "source.qml"
    },
    "PathCubic": {
        "body": "\nPathCubic {\n    //control1X: real\n    //control1Y: real\n    //control2X: real\n    //control2Y: real\n    //relativeControl1X: real\n    //relativeControl1Y: real\n    //relativeControl2X: real\n    //relativeControl2Y: real\n    //relativeX: real\n    //relativeY: real\n    //x: real\n    //y: real\n}",
        "description": "PathCubic",
        "prefix": "PathCubic",
        "scope": "source.qml"
    },
    "PathCurve": {
        "body": "\nPathCurve {\n    //relativeX: real\n    //relativeY: real\n    //x: real\n    //y: real\n}",
        "description": "PathCurve",
        "prefix": "PathCurve",
        "scope": "source.qml"
    },
    "PathInterpolator": {
        "body": "\nPathInterpolator {\n    //angle: real\n    //path: Path\n    //progress: real\n    //x: real\n    //y: real\n}",
        "description": "PathInterpolator",
        "prefix": "PathInterpolator",
        "scope": "source.qml"
    },
    "PathLine": {
        "body": "\nPathLine {\n    //relativeX: real\n    //relativeY: real\n    //x: real\n    //y: real\n}",
        "description": "PathLine",
        "prefix": "PathLine",
        "scope": "source.qml"
    },
    "PathMove": {
        "body": "\nPathMove {\n    //relativeX: real\n    //relativeY: real\n    //x: real\n    //y: real\n}",
        "description": "PathMove",
        "prefix": "PathMove",
        "scope": "source.qml"
    },
    "PathPercent": {
        "body": "\nPathPercent {\n    //value: real\n}",
        "description": "PathPercent",
        "prefix": "PathPercent",
        "scope": "source.qml"
    },
    "PathQuad": {
        "body": "\nPathQuad {\n    //controlX: real\n    //controlY: real\n    //relativeControlX: real\n    //relativeControlY: real\n    //relativeX: real\n    //relativeY: real\n    //x: real\n    //y: real\n}",
        "description": "PathQuad",
        "prefix": "PathQuad",
        "scope": "source.qml"
    },
    "PathSvg": {
        "body": "\nPathSvg {\n    //path: string\n}",
        "description": "PathSvg",
        "prefix": "PathSvg",
        "scope": "source.qml"
    },
    "PathView": {
        "body": "\nPathView {\n    //cacheItemCount: int\n    //count: int\n    //currentIndex: int\n    //currentItem: Item\n    //delegate: Component\n    //dragMargin: real\n    //dragging: bool\n    //flickDeceleration: real\n    //flicking: bool\n    //highlight: Component\n    //highlightItem: Item\n    //highlightMoveDuration: int\n    //highlightRangeMode: enumeration\n    //interactive: bool\n    //isCurrentItem: bool [attached]\n    //maximumFlickVelocity: real\n    //model: model\n    //movementDirection: enumeration\n    //moving: bool\n    //offset: real\n    //onPath: bool [attached]\n    //path: Path\n    //pathItemCount: int\n    //preferredHighlightBegin: real\n    //preferredHighlightEnd: real\n    //snapMode: enumeration\n    //view: PathView [attached]\n    //onDecrementcurrentindex: { }\n    //onDragended: { }\n    //onDragstarted: { }\n    //onFlickended: { }\n    //onFlickstarted: { }\n    //onIncrementcurrentindex: { }\n    //onMovementended: { }\n    //onMovementstarted: { }\n    //onPositionviewatindex: { }\n}",
        "description": "PathView",
        "prefix": "PathView",
        "scope": "source.qml"
    },
    "PauseAnimation": {
        "body": "\nPauseAnimation {\n    //duration: int\n}",
        "description": "PauseAnimation",
        "prefix": "PauseAnimation",
        "scope": "source.qml"
    },
    "PercentBarSeries": {
        "body": "\nPercentBarSeries {\n    //axisX: AbstractAxis\n    //axisXTop: AbstractAxis\n    //axisY: AbstractAxis\n    //axisYRight: AbstractAxis\n    //barWidth: real\n    //count: int\n    //labelsAngle: real\n    //labelsFormat: string\n    //labelsPosition: enumeration\n    //labelsPrecision: real\n    //labelsVisible: bool\n    //onBarsetsadded: { }\n    //onBarsetsremoved: { }\n    //onClear: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "PercentBarSeries",
        "prefix": "PercentBarSeries",
        "scope": "source.qml"
    },
    "PhongAlphaMaterial": {
        "body": "\nPhongAlphaMaterial {\n    //alpha: real\n    //ambient: color\n    //diffuse: color\n    //shininess: real\n    //specular: color\n}",
        "description": "PhongAlphaMaterial",
        "prefix": "PhongAlphaMaterial",
        "scope": "source.qml"
    },
    "PhongMaterial": {
        "body": "\nPhongMaterial {\n    //ambient: color\n    //diffuse: color\n    //shininess: real\n    //specular: color\n}",
        "description": "PhongMaterial",
        "prefix": "PhongMaterial",
        "scope": "source.qml"
    },
    "PickEvent": {
        "body": "\nPickEvent {\n    //accepted: bool\n    //button: int\n    //buttons: int\n    //distance: real\n    //localIntersection: Vector3D\n    //modifiers: int\n    //position: Point2D\n    //worldIntersection: Vector3D\n}",
        "description": "PickEvent",
        "prefix": "PickEvent",
        "scope": "source.qml"
    },
    "PickLineEvent": {
        "body": "\nPickLineEvent {\n    //triangleIndex: uint\n    //vertex1Index: uint\n    //vertex2Index: uint\n}",
        "description": "PickLineEvent",
        "prefix": "PickLineEvent",
        "scope": "source.qml"
    },
    "PickPointEvent": {
        "body": "\nPickPointEvent {\n    //pointIndex: uint\n}",
        "description": "PickPointEvent",
        "prefix": "PickPointEvent",
        "scope": "source.qml"
    },
    "PickTriangleEvent": {
        "body": "\nPickTriangleEvent {\n    //triangleIndex: uint\n    //vertex1Index: uint\n    //vertex2Index: uint\n    //vertex3Index: uint\n}",
        "description": "PickTriangleEvent",
        "prefix": "PickTriangleEvent",
        "scope": "source.qml"
    },
    "PickingSettings": {
        "body": "\nPickingSettings {\n    //faceOrientationPickingMode: enumeration\n    //pickMethod: enumeration\n    //pickResultMode: enumeration\n    //worldSpaceTolerance: qreal\n}",
        "description": "PickingSettings",
        "prefix": "PickingSettings",
        "scope": "source.qml"
    },
    "Picture": {
        "body": "\nPicture {\n    //color: color\n    //source: url\n}",
        "description": "Picture",
        "prefix": "Picture",
        "scope": "source.qml"
    },
    "PieMenu": {
        "body": "\nPieMenu {\n    //activationMode: enumeration\n    //boundingItem: Item\n    //currentIndex: int\n    //currentItem: int\n    //menuItems: list<MenuItem>\n    //selectionAngle: real\n    //style: Component\n    //title: string\n    //triggerMode: int\n}",
        "description": "PieMenu",
        "prefix": "PieMenu",
        "scope": "source.qml"
    },
    "PieMenuStyle": {
        "body": "\nPieMenuStyle {\n    //background: Component\n    //backgroundColor: color\n    //cancel: Component\n    //cancelRadius: real\n    //control: PieMenu\n    //endAngle: real\n    //menuItem: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //radius: real\n    //selectionColor: color\n    //shadowColor: color\n    //shadowRadius: real\n    //shadowSpread: real\n    //startAngle: real\n    //title: Component\n}",
        "description": "PieMenuStyle",
        "prefix": "PieMenuStyle",
        "scope": "source.qml"
    },
    "PieSeries": {
        "body": "\nPieSeries {\n    //count: int\n    //endAngle: real\n    //holeSize: real\n    //horizontalPosition: real\n    //size: real\n    //startAngle: real\n    //sum: real\n    //verticalPosition: real\n    //onAdded: { }\n    //onClear: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onRemoved: { }\n    //onSliceadded: { }\n    //onSliceremoved: { }\n}",
        "description": "PieSeries",
        "prefix": "PieSeries",
        "scope": "source.qml"
    },
    "PieSlice": {
        "body": "\nPieSlice {\n    //angleSpan: real\n    //borderColor: color\n    //borderWidth: int\n    //brushFilename: string\n    //color: color\n    //explodeDistanceFactor: real\n    //exploded: bool\n    //label: string\n    //labelArmLengthFactor: real\n    //labelColor: color\n    //labelFont: font\n    //labelPosition: enumeration\n    //labelVisible: bool\n    //percentage: real\n    //startAngle: real\n    //value: real\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "PieSlice",
        "prefix": "PieSlice",
        "scope": "source.qml"
    },
    "PinchArea": {
        "body": "\nPinchArea {\n    //enabled: bool\n    //pinch.active: bool\n    //pinch.dragAxis: enumeration\n    //pinch.maximumRotation: real\n    //pinch.maximumScale: real\n    //pinch.maximumX: real\n    //pinch.maximumY: real\n    //pinch.minimumRotation: real\n    //pinch.minimumScale: real\n    //pinch.minimumX: real\n    //pinch.minimumY: real\n    //pinch.target: Item\n    //onPinchfinished: { }\n    //onPinchstarted: { }\n    //onPinchupdated: { }\n    //onSmartzoom: { }\n}",
        "description": "PinchArea",
        "prefix": "PinchArea",
        "scope": "source.qml"
    },
    "PinchEvent": {
        "body": "\nPinchEvent {\n    //accepted: bool\n    //angle: real\n    //center: QPointF\n    //point1: QPointF\n    //point2: QPointF\n    //pointCount: int\n    //previousAngle: real\n    //previousCenter: QPointF\n    //previousScale: real\n    //rotation: real\n    //scale: real\n    //startCenter: QPointF\n    //startPoint1: QPointF\n    //startPoint2: QPointF\n}",
        "description": "PinchEvent",
        "prefix": "PinchEvent",
        "scope": "source.qml"
    },
    "PinchHandler": {
        "body": "\nPinchHandler {\n    //active: bool\n    //centroid: QPointF\n    //centroidVelocity: QVector2D\n    //maximumRotation: real\n    //maximumScale: real\n    //maximumX: real\n    //maximumY: real\n    //minimumRotation: real\n    //minimumScale: real\n    //minimumTouchPoints: int\n    //minimumX: real\n    //minimumY: real\n    //pinchOrigin: real\n    //rotation: real\n    //scale: real\n    //translation: QVector2D\n}",
        "description": "PinchHandler",
        "prefix": "PinchHandler",
        "scope": "source.qml"
    },
    "Place": {
        "body": "\nPlace {\n    //attribution: string\n    //categories: list<Category>\n    //contactDetails: ContactDetails\n    //detailsFetched: bool\n    //editorialModel: EditorialModel\n    //extendedAttributes: ExtendedAttributes\n    //favorite: Place\n    //icon: Icon\n    //imageModel: ImageModel\n    //location: QtPositioning::Location\n    //name: string\n    //place: QPlace\n    //placeId: string\n    //plugin: Plugin\n    //primaryEmail: string\n    //primaryFax: string\n    //primaryPhone: string\n    //primaryWebsite: string\n    //ratings: Ratings\n    //reviewModel: ReviewModel\n    //status: enumeration\n    //supplier: Supplier\n    //visibility: enumeration\n}",
        "description": "Place",
        "prefix": "Place",
        "scope": "source.qml"
    },
    "PlaceAttribute": {
        "body": "\nPlaceAttribute {\n    //attribute: QPlaceAttribute\n    //label: string\n    //text: string\n}",
        "description": "PlaceAttribute",
        "prefix": "PlaceAttribute",
        "scope": "source.qml"
    },
    "PlaceSearchModel": {
        "body": "\nPlaceSearchModel {\n    //categories: list<Category>\n    //count: int\n    //favoritesMatchParameters: VariantMap\n    //favoritesPlugin: Plugin\n    //limit: int\n    //nextPagesAvailable: bool\n    //plugin: Plugin\n    //previousPagesAvailable: bool\n    //recommendationId: string\n    //relevanceHint: enumeration\n    //searchArea: variant\n    //searchTerm: string\n    //status: enum\n    //visibilityScope: enum\n}",
        "description": "PlaceSearchModel",
        "prefix": "PlaceSearchModel",
        "scope": "source.qml"
    },
    "PlaceSearchSuggestionModel": {
        "body": "\nPlaceSearchSuggestionModel {\n    //limit: int\n    //offset: int\n    //plugin: Plugin\n    //searchArea: geoshape\n    //searchTerm: string\n    //status: enum\n    //suggestions: stringlist\n}",
        "description": "PlaceSearchSuggestionModel",
        "prefix": "PlaceSearchSuggestionModel",
        "scope": "source.qml"
    },
    "PlaneGeometry": {
        "body": "\nPlaneGeometry {\n    //height: real\n    //indexAttribute: Attribute\n    //mirrored: bool\n    //normalAttribute: Attribute\n    //positionAttribute: Attribute\n    //resolution: size\n    //tangentAttribute: Attribute\n    //texCoordAttribute: Attribute\n    //width: real\n}",
        "description": "PlaneGeometry",
        "prefix": "PlaneGeometry",
        "scope": "source.qml"
    },
    "PlaneMesh": {
        "body": "\nPlaneMesh {\n    //height: real\n    //meshResolution: size\n    //mirrored: bool\n    //width: real\n}",
        "description": "PlaneMesh",
        "prefix": "PlaneMesh",
        "scope": "source.qml"
    },
    "PlayVariation": {
        "body": "\nPlayVariation {\n    //looping: bool\n    //maxGain: real\n    //maxPitch: real\n    //minGain: real\n    //minPitch: real\n    //sample: string\n}",
        "description": "PlayVariation",
        "prefix": "PlayVariation",
        "scope": "source.qml"
    },
    "Playlist": {
        "body": "\nPlaylist {\n    //currentIndex: int\n    //currentItemsource: url\n    //error: enumeration\n    //errorString: string\n    //itemCount: int\n    //playbackMode: enumeration\n    //readOnly: bool\n    //onItemabouttobeinserted: { }\n    //onItemabouttoberemoved: { }\n    //onItemchanged: { }\n    //onIteminserted: { }\n    //onItemremoved: { }\n    //onLoad: { }\n    //onLoadfailed: { }\n    //onLoaded: { }\n    //onNext: { }\n    //onPrevious: { }\n    //onShuffle: { }\n}",
        "description": "Playlist",
        "prefix": "Playlist",
        "scope": "source.qml"
    },
    "PlaylistItem": {
        "body": "\nPlaylistItem {\n    //source: url\n}",
        "description": "PlaylistItem",
        "prefix": "PlaylistItem",
        "scope": "source.qml"
    },
    "Plugin": {
        "body": "\nPlugin {\n    //allowExperimental: bool\n    //availableServiceProviders: stringlist\n    //isAttached: bool\n    //locales: stringlist\n    //name: string\n    //parameters: list<PluginParameter>\n    //preferred: stringlist\n    //required: enumeration\n}",
        "description": "Plugin",
        "prefix": "Plugin",
        "scope": "source.qml"
    },
    "PluginParameter": {
        "body": "\nPluginParameter {\n    //name: string\n    //value: QVariant\n}",
        "description": "PluginParameter",
        "prefix": "PluginParameter",
        "scope": "source.qml"
    },
    "PointDirection": {
        "body": "\nPointDirection {\n    //x: real\n    //xVariation: real\n    //y: real\n    //yVariation: real\n}",
        "description": "PointDirection",
        "prefix": "PointDirection",
        "scope": "source.qml"
    },
    "PointHandler": {
        "body": "\nPointHandler {\n    //acceptedButtons: int\n    //acceptedDevices: int\n    //acceptedModifiers: int\n    //acceptedPointerTypes: int\n    //active: bool\n    //enabled: bool\n    //grabPermission: bool\n    //parent: Item\n    //point: HandlerPoint\n    //target: Item\n    //onCanceled: { }\n    //onGrabchanged: { }\n}",
        "description": "PointHandler",
        "prefix": "PointHandler",
        "scope": "source.qml"
    },
    "PointLight": {
        "body": "\nPointLight {\n    //constantAttenuation: float\n    //linearAttenuation: float\n    //quadraticAttenuation: float\n}",
        "description": "PointLight",
        "prefix": "PointLight",
        "scope": "source.qml"
    },
    "PointSize": {
        "body": "\nPointSize {\n    //sizeMode: enumeration\n    //value: real\n}",
        "description": "PointSize",
        "prefix": "PointSize",
        "scope": "source.qml"
    },
    "PointerDevice": {
        "body": "\nPointerDevice {\n    //capabilities: enumeration\n    //pointerType: enumeration\n    //type: enumeration\n}",
        "description": "PointerDevice",
        "prefix": "PointerDevice",
        "scope": "source.qml"
    },
    "PointerDeviceHandler": {
        "body": "\nPointerDeviceHandler {\n    //acceptedDevices: int\n    //acceptedModifiers: int\n    //acceptedPointerTypes: int\n    //active: bool\n    //enabled: bool\n    //grabPermission: bool\n    //parent: Item\n    //target: Item\n    //onCanceled: { }\n    //onGrabchanged: { }\n}",
        "description": "PointerDeviceHandler",
        "prefix": "PointerDeviceHandler",
        "scope": "source.qml"
    },
    "PointerEvent": {
        "body": "\nPointerEvent {\n    //button: enumeration\n    //buttons: int\n    //device: PointerDevice\n    //modifiers: int\n}",
        "description": "PointerEvent",
        "prefix": "PointerEvent",
        "scope": "source.qml"
    },
    "PointerHandler": {
        "body": "\nPointerHandler {\n    //active: bool\n    //enabled: bool\n    //grabPermission: bool\n    //parent: Item\n    //target: Item\n    //onCanceled: { }\n    //onGrabchanged: { }\n}",
        "description": "PointerHandler",
        "prefix": "PointerHandler",
        "scope": "source.qml"
    },
    "PolygonOffset": {
        "body": "\nPolygonOffset {\n    //depthSteps: real\n    //scaleFactor: real\n}",
        "description": "PolygonOffset",
        "prefix": "PolygonOffset",
        "scope": "source.qml"
    },
    "Popup": {
        "body": "\nPopup {\n    //activeFocus: bool\n    //availableHeight: real\n    //availableWidth: real\n    //background: Item\n    //bottomMargin: real\n    //bottomPadding: real\n    //clip: bool\n    //closePolicy: enumeration\n    //contentChildren: list<Item>\n    //contentData: list<Object>\n    //contentHeight: real\n    //contentItem: Item\n    //contentWidth: real\n    //dim: bool\n    //enabled: bool\n    //enter: Transition\n    //exit: Transition\n    //focus: bool\n    //font: font\n    //height: real\n    //implicitHeight: real\n    //implicitWidth: real\n    //leftMargin: real\n    //leftPadding: real\n    //locale: Locale\n    //margins: real\n    //mirrored: bool\n    //modal: bool\n    //opacity: real\n    //opened: bool\n    //padding: real\n    //palette: palette\n    //parent: Item\n    //rightMargin: real\n    //rightPadding: real\n    //scale: real\n    //spacing: real\n    //topMargin: real\n    //topPadding: real\n    //transformOrigin: enumeration\n    //visible: bool\n    //width: real\n    //x: real\n    //y: real\n    //z: real\n    //onForceactivefocus: { }\n}",
        "description": "Popup",
        "prefix": "Popup",
        "scope": "source.qml"
    },
    "Position": {
        "body": "\nPosition {\n    //altitudeValid: bool\n    //coordinate: coordinate\n    //direction: double\n    //directionValid: bool\n    //horizontalAccuracy: real\n    //horizontalAccuracyValid: bool\n    //latitudeValid: bool\n    //longitudeValid: bool\n    //magneticVariation: double\n    //magneticVariationValid: bool\n    //speed: double\n    //speedValid: bool\n    //timestamp: date\n    //verticalAccuracy: real\n    //verticalAccuracyValid: bool\n    //verticalSpeed: double\n    //verticalSpeedValid: bool\n}",
        "description": "Position",
        "prefix": "Position",
        "scope": "source.qml"
    },
    "PositionSource": {
        "body": "\nPositionSource {\n    //active: bool\n    //name: string\n    //nmeaSource: url\n    //position: Position\n    //preferredPositioningMethods: enumeration\n    //sourceError: enumeration\n    //supportedPositioningMethods: enumeration\n    //updateInterval: int\n    //valid: bool\n    //onStart: { }\n    //onStop: { }\n    //onUpdate: { }\n    //onUpdatetimeout: { }\n}",
        "description": "PositionSource",
        "prefix": "PositionSource",
        "scope": "source.qml"
    },
    "Positioner": {
        "body": "\nPositioner {\n    //index: int [attached]\n    //isFirstItem: bool [attached]\n    //isLastItem: bool [attached]\n}",
        "description": "Positioner",
        "prefix": "Positioner",
        "scope": "source.qml"
    },
    "PressureReading": {
        "body": "\nPressureReading {\n    //pressure: qreal\n    //temperature: qreal\n}",
        "description": "PressureReading",
        "prefix": "PressureReading",
        "scope": "source.qml"
    },
    "PressureSensor": {
        "body": "\nPressureSensor {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "PressureSensor",
        "prefix": "PressureSensor",
        "scope": "source.qml"
    },
    "Product": {
        "body": "\nProduct {\n    //description: string\n    //identifier: string\n    //price: string\n    //status: enumeration\n    //store: object\n    //title: string\n    //type: string\n    //onOnpurchasefailed: { }\n    //onOnpurchaserestored: { }\n    //onOnpurchasesucceeded: { }\n    //onPurchase: { }\n    //onResetstatus: { }\n}",
        "description": "Product",
        "prefix": "Product",
        "scope": "source.qml"
    },
    "ProgressBar: QtQuickControls": {
        "body": "\nProgressBar: QtQuickControls {\n    //hovered: bool\n    //indeterminate: bool\n    //maximumValue: real\n    //minimumValue: real\n    //orientation: int\n    //style: Component\n    //value: real\n}",
        "description": "ProgressBar: QtQuickControls",
        "prefix": "ProgressBar: QtQuickControls",
        "scope": "source.qml"
    },
    "ProgressBar: QtQuickControls2": {
        "body": "\nProgressBar: QtQuickControls2 {\n    //from: real\n    //indeterminate: bool\n    //position: real\n    //to: real\n    //value: real\n    //visualPosition: real\n}",
        "description": "ProgressBar: QtQuickControls2",
        "prefix": "ProgressBar: QtQuickControls2",
        "scope": "source.qml"
    },
    "ProgressBarStyle": {
        "body": "\nProgressBarStyle {\n    //background: Component\n    //control: ProgressBar\n    //currentProgress: real\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //panel: Component\n    //progress: Component\n}",
        "description": "ProgressBarStyle",
        "prefix": "ProgressBarStyle",
        "scope": "source.qml"
    },
    "PropertyAction": {
        "body": "\nPropertyAction {\n    //exclude: list<Object>\n    //properties: string\n    //property: string\n    //target: Object\n    //targets: list<Object>\n    //value: any\n}",
        "description": "PropertyAction",
        "prefix": "PropertyAction",
        "scope": "source.qml"
    },
    "PropertyAnimation": {
        "body": "\nPropertyAnimation {\n    //duration: int\n    //easing.amplitude: real\n    //easing.bezierCurve: list<real>\n    //easing.overshoot: real\n    //easing.period: real\n    //easing.type: enumeration\n    //exclude: list<Object>\n    //from: variant\n    //properties: string\n    //property: string\n    //target: Object\n    //targets: list<Object>\n    //to: variant\n}",
        "description": "PropertyAnimation",
        "prefix": "PropertyAnimation",
        "scope": "source.qml"
    },
    "PropertyChanges": {
        "body": "\nPropertyChanges {\n    //explicit: bool\n    //restoreEntryValues: bool\n    //target: Object\n}",
        "description": "PropertyChanges",
        "prefix": "PropertyChanges",
        "scope": "source.qml"
    },
    "ProximityFilter": {
        "body": "\nProximityFilter {\n    //distanceThreshold: real\n    //entity: Entity\n}",
        "description": "ProximityFilter",
        "prefix": "ProximityFilter",
        "scope": "source.qml"
    },
    "ProximityReading": {
        "body": "\nProximityReading {\n    //near: bool\n}",
        "description": "ProximityReading",
        "prefix": "ProximityReading",
        "scope": "source.qml"
    },
    "ProximitySensor": {
        "body": "\nProximitySensor {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "ProximitySensor",
        "prefix": "ProximitySensor",
        "scope": "source.qml"
    },
    "QAbstractState": {
        "body": "\nQAbstractState {\n    //active: bool\n    //onEntered: { }\n    //onExited: { }\n}",
        "description": "QAbstractState",
        "prefix": "QAbstractState",
        "scope": "source.qml"
    },
    "QAbstractTransition": {
        "body": "\nQAbstractTransition {\n    //sourceState: bool\n    //targetState: QAbstractState\n    //targetStates: list<QAbstractState>\n    //onTriggered: { }\n}",
        "description": "QAbstractTransition",
        "prefix": "QAbstractTransition",
        "scope": "source.qml"
    },
    "QSignalTransition": {
        "body": "\nQSignalTransition {\n    //senderObject: QObject\n    //signal: string\n}",
        "description": "QSignalTransition",
        "prefix": "QSignalTransition",
        "scope": "source.qml"
    },
    "Qt": {
        "body": "\nQt {\n    //application: object\n    //inputMethod: object\n    //platform: object\n    //styleHints: object\n    //onBinding: { }\n    //onCalllater: { }\n    //onCalllater: { }\n    //onExit: { }\n    //onFont: { }\n    //onLocale: { }\n    //onMatrix4X4: { }\n    //onQuaternion: { }\n    //onQuit: { }\n    //onSize: { }\n    //onVector2D: { }\n    //onVector3D: { }\n    //onVector4D: { }\n}",
        "description": "Qt",
        "prefix": "Qt",
        "scope": "source.qml"
    },
    "QtMultimedia": {
        "body": "\nQtMultimedia {\n    //availableCameras: list<object>\n    //defaultCamera: object\n}",
        "description": "QtMultimedia",
        "prefix": "QtMultimedia",
        "scope": "source.qml"
    },
    "QtObject": {
        "body": "\nQtObject {\n    //objectName: string\n}",
        "description": "QtObject",
        "prefix": "QtObject",
        "scope": "source.qml"
    },
    "QtPositioning": {
        "body": "\nQtPositioning",
        "description": "QtPositioning",
        "prefix": "QtPositioning",
        "scope": "source.qml"
    },
    "QuaternionAnimation": {
        "body": "\nQuaternionAnimation {\n    //duration: int\n    //easing.amplitude: real\n    //easing.bezierCurve: list<real>\n    //easing.overshoot: real\n    //easing.period: real\n    //easing.type: enumeration\n    //exclude: list<Object>\n    //from: variant\n    //properties: string\n    //property: string\n    //target: Object\n    //targets: list<Object>\n    //to: variant\n}",
        "description": "QuaternionAnimation",
        "prefix": "QuaternionAnimation",
        "scope": "source.qml"
    },
    "QuotaRequest": {
        "body": "\nQuotaRequest {\n    //origin: url\n    //requestedSize: qint64\n}",
        "description": "QuotaRequest",
        "prefix": "QuotaRequest",
        "scope": "source.qml"
    },
    "RadialBlur": {
        "body": "\nRadialBlur {\n    //angle: real\n    //cached: bool\n    //horizontalOffset: real\n    //samples: int\n    //source: variant\n    //transparentBorder: bool\n    //verticalOffset: real\n}",
        "description": "RadialBlur",
        "prefix": "RadialBlur",
        "scope": "source.qml"
    },
    "RadialGradient: QtGraphicalEffects": {
        "body": "\nRadialGradient: QtGraphicalEffects {\n    //angle: real\n    //cached: bool\n    //gradient: Gradient\n    //horizontalOffset: real\n    //horizontalRadius: real\n    //source: variant\n    //verticalOffset: real\n    //verticalRadius: real\n}",
        "description": "RadialGradient: QtGraphicalEffects",
        "prefix": "RadialGradient: QtGraphicalEffects",
        "scope": "source.qml"
    },
    "RadialGradient: QtQuick": {
        "body": "\nRadialGradient: QtQuick {\n    //centerRadius: real\n    //centerX: real\n    //centerY: real\n    //focalRadius: real\n    //focalX: real\n    //focalY: real\n}",
        "description": "RadialGradient: QtQuick",
        "prefix": "RadialGradient: QtQuick",
        "scope": "source.qml"
    },
    "Radio": {
        "body": "\nRadio {\n    //antennaConnected: int\n    //availability: enumeration\n    //band: enumeration\n    //frequency: int\n    //frequencyStep: int\n    //maximumFrequency: int\n    //minimumFrequency: int\n    //muted: bool\n    //searching: bool\n    //signalStrength: int\n    //state: enumeration\n    //stereo: bool\n    //stereoMode: enumeration\n    //volume: int\n    //onCancelscan: { }\n    //onScandown: { }\n    //onScanup: { }\n    //onSearchallstations: { }\n    //onStart: { }\n    //onStationfound: { }\n    //onStop: { }\n    //onTunedown: { }\n    //onTuneup: { }\n}",
        "description": "Radio",
        "prefix": "Radio",
        "scope": "source.qml"
    },
    "RadioButton: QtQuickControls": {
        "body": "\nRadioButton: QtQuickControls {\n    //activeFocusOnPress: bool\n    //checked: bool\n    //exclusiveGroup: ExclusiveGroup\n    //hovered: bool\n    //pressed: bool\n    //style: Component\n    //text: string\n    //tooltip: string\n    //onClicked: { }\n}",
        "description": "RadioButton: QtQuickControls",
        "prefix": "RadioButton: QtQuickControls",
        "scope": "source.qml"
    },
    "RadioButton: QtQuickControls2": {
        "body": "\nRadioButton: QtQuickControls2 {\n    //action: Action\n    //autoExclusive: bool\n    //autoRepeat: bool\n    //autoRepeatDelay: int\n    //autoRepeatInterval: int\n    //checkable: bool\n    //checked: bool\n    //display: enumeration\n    //down: bool\n    //icon.color: color\n    //icon.height: int\n    //icon.name: string\n    //icon.source: url\n    //icon.width: int\n    //indicator: Item\n    //pressX: real\n    //pressY: real\n    //pressed: bool\n    //text: string\n    //onCanceled: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onPressandhold: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onToggled: { }\n}",
        "description": "RadioButton: QtQuickControls2",
        "prefix": "RadioButton: QtQuickControls2",
        "scope": "source.qml"
    },
    "RadioButtonStyle": {
        "body": "\nRadioButtonStyle {\n    //background: Component\n    //control: RadioButton\n    //indicator: Component\n    //label: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //spacing: int\n}",
        "description": "RadioButtonStyle",
        "prefix": "RadioButtonStyle",
        "scope": "source.qml"
    },
    "RadioData": {
        "body": "\nRadioData {\n    //alternativeFrequenciesEnabled: bool\n    //availability: enumeration\n    //programType: enumeration\n    //programTypeName: string\n    //radioText: string\n    //stationId: string\n    //stationName: string\n}",
        "description": "RadioData",
        "prefix": "RadioData",
        "scope": "source.qml"
    },
    "RadioDelegate": {
        "body": "\nRadioDelegate {\n    //highlighted: bool\n}",
        "description": "RadioDelegate",
        "prefix": "RadioDelegate",
        "scope": "source.qml"
    },
    "RangeSlider": {
        "body": "\nRangeSlider {\n    //first.handle: Item\n    //first.hovered: bool\n    //first.position: real\n    //first.pressed: bool\n    //first.value: real\n    //first.visualPosition: real\n    //from: real\n    //horizontal: bool\n    //live: bool\n    //orientation: enumeration\n    //second.handle: Item\n    //second.hovered: bool\n    //second.position: real\n    //second.pressed: bool\n    //second.value: real\n    //second.visualPosition: real\n    //snapMode: enumeration\n    //stepSize: real\n    //to: real\n    //vertical: bool\n}",
        "description": "RangeSlider",
        "prefix": "RangeSlider",
        "scope": "source.qml"
    },
    "Ratings": {
        "body": "\nRatings {\n    //average: real\n    //count: int\n    //maximum: real\n    //ratings: QPlaceRatings\n}",
        "description": "Ratings",
        "prefix": "Ratings",
        "scope": "source.qml"
    },
    "RayCaster": {
        "body": "\nRayCaster {\n    //direction: vector3D\n    //length: real\n    //origin: vector3d\n}",
        "description": "RayCaster",
        "prefix": "RayCaster",
        "scope": "source.qml"
    },
    "Rectangle": {
        "body": "\nRectangle {\n    //antialiasing: bool\n    //border.color: color\n    //border.width: int\n    //color: color\n    //gradient: Gradient\n    //radius: real\n}",
        "description": "Rectangle",
        "prefix": "Rectangle",
        "scope": "source.qml"
    },
    "RectangularGlow": {
        "body": "\nRectangularGlow {\n    //cached: bool\n    //color: color\n    //cornerRadius: real\n    //glowRadius: real\n    //spread: real\n}",
        "description": "RectangularGlow",
        "prefix": "RectangularGlow",
        "scope": "source.qml"
    },
    "RecursiveBlur": {
        "body": "\nRecursiveBlur {\n    //cached: bool\n    //loops: int\n    //progress: real\n    //radius: real\n    //source: variant\n    //transparentBorder: bool\n}",
        "description": "RecursiveBlur",
        "prefix": "RecursiveBlur",
        "scope": "source.qml"
    },
    "RegExpValidator": {
        "body": "\nRegExpValidator {\n    //regExp: regExp\n}",
        "description": "RegExpValidator",
        "prefix": "RegExpValidator",
        "scope": "source.qml"
    },
    "RegisterProtocolHandlerRequest": {
        "body": "\nRegisterProtocolHandlerRequest {\n    //origin: url\n    //scheme: string\n}",
        "description": "RegisterProtocolHandlerRequest",
        "prefix": "RegisterProtocolHandlerRequest",
        "scope": "source.qml"
    },
    "RenderCapture": {
        "body": "\nRenderCapture",
        "description": "RenderCapture",
        "prefix": "RenderCapture",
        "scope": "source.qml"
    },
    "RenderCaptureReply": {
        "body": "\nRenderCaptureReply {\n    //captureId: int\n    //complete: bool\n    //image: variant\n}",
        "description": "RenderCaptureReply",
        "prefix": "RenderCaptureReply",
        "scope": "source.qml"
    },
    "RenderPass": {
        "body": "\nRenderPass {\n    //filterKeys: list<FilterKey>\n    //parameters: list<Parameter>\n    //renderStates: list<RenderState>\n    //shaderProgram: ShaderProgram\n}",
        "description": "RenderPass",
        "prefix": "RenderPass",
        "scope": "source.qml"
    },
    "RenderPassFilter": {
        "body": "\nRenderPassFilter {\n    //matchAny: list<FilterKey>\n    //parameters: list<Parameter>\n}",
        "description": "RenderPassFilter",
        "prefix": "RenderPassFilter",
        "scope": "source.qml"
    },
    "RenderSettings": {
        "body": "\nRenderSettings {\n    //activeFrameGraph: FrameGraphNode\n    //pickingSettings: PickingSettings\n    //renderPolicy: enumeration\n}",
        "description": "RenderSettings",
        "prefix": "RenderSettings",
        "scope": "source.qml"
    },
    "RenderState": {
        "body": "\nRenderState {\n    //childNodes: list<Node>\n    //data: list<QtQml::QtObject>\n    //propertyTrackingOverrides: QJSValue\n}",
        "description": "RenderState",
        "prefix": "RenderState",
        "scope": "source.qml"
    },
    "RenderStateSet": {
        "body": "\nRenderStateSet {\n    //renderStates: list<RenderState>\n}",
        "description": "RenderStateSet",
        "prefix": "RenderStateSet",
        "scope": "source.qml"
    },
    "RenderSurfaceSelector": {
        "body": "\nRenderSurfaceSelector {\n    //externalRenderTargetSize: size\n    //surface: QSurface\n    //surfacePixelRatio: real\n}",
        "description": "RenderSurfaceSelector",
        "prefix": "RenderSurfaceSelector",
        "scope": "source.qml"
    },
    "RenderTarget": {
        "body": "\nRenderTarget {\n    //attachments: list<RenderTargetOutput>\n}",
        "description": "RenderTarget",
        "prefix": "RenderTarget",
        "scope": "source.qml"
    },
    "RenderTargetOutput": {
        "body": "\nRenderTargetOutput {\n    //attachmentPoint: enumeration\n    //face: enumeration\n    //layer: int\n    //mipLevel: int\n    //texture: Texture\n}",
        "description": "RenderTargetOutput",
        "prefix": "RenderTargetOutput",
        "scope": "source.qml"
    },
    "RenderTargetSelector": {
        "body": "\nRenderTargetSelector {\n    //drawBuffers: list<variant>\n    //target: RenderTarget\n}",
        "description": "RenderTargetSelector",
        "prefix": "RenderTargetSelector",
        "scope": "source.qml"
    },
    "Repeater": {
        "body": "\nRepeater {\n    //count: int\n    //delegate: Component\n    //model: any\n    //onItemadded: { }\n    //onItemremoved: { }\n}",
        "description": "Repeater",
        "prefix": "Repeater",
        "scope": "source.qml"
    },
    "ReviewModel": {
        "body": "\nReviewModel {\n    //batchSize: int\n    //place: Place\n    //totalCount: int\n}",
        "description": "ReviewModel",
        "prefix": "ReviewModel",
        "scope": "source.qml"
    },
    "Rotation": {
        "body": "\nRotation {\n    //angle: real\n    //axis.x: real\n    //axis.y: real\n    //axis.z: real\n    //origin.x: real\n    //origin.y: real\n}",
        "description": "Rotation",
        "prefix": "Rotation",
        "scope": "source.qml"
    },
    "RotationAnimation": {
        "body": "\nRotationAnimation {\n    //direction: enumeration\n    //from: real\n    //to: real\n}",
        "description": "RotationAnimation",
        "prefix": "RotationAnimation",
        "scope": "source.qml"
    },
    "RotationAnimator": {
        "body": "\nRotationAnimator {\n    //direction: enumeration\n}",
        "description": "RotationAnimator",
        "prefix": "RotationAnimator",
        "scope": "source.qml"
    },
    "RotationReading": {
        "body": "\nRotationReading {\n    //x: qreal\n    //y: qreal\n    //z: qreal\n}",
        "description": "RotationReading",
        "prefix": "RotationReading",
        "scope": "source.qml"
    },
    "RotationSensor": {
        "body": "\nRotationSensor {\n    //hasZ: qreal\n}",
        "description": "RotationSensor",
        "prefix": "RotationSensor",
        "scope": "source.qml"
    },
    "RoundButton": {
        "body": "\nRoundButton {\n    //radius: real\n}",
        "description": "RoundButton",
        "prefix": "RoundButton",
        "scope": "source.qml"
    },
    "Route": {
        "body": "\nRoute {\n    //bounds: georectangle\n    //distance: real\n    //path: list<coordinate>\n    //routeQuery: RouteQuery\n    //segments: list<RouteSegment>\n    //travelTime: int\n}",
        "description": "Route",
        "prefix": "Route",
        "scope": "source.qml"
    },
    "RouteManeuver": {
        "body": "\nRouteManeuver {\n    //direction: enumeration\n    //distanceToNextInstruction: real\n    //extendedAttributes: Object\n    //instructionText: string\n    //position: coordinate\n    //timeToNextInstruction: int\n    //valid: bool\n    //waypoint: coordinate\n    //waypointValid: bool\n}",
        "description": "RouteManeuver",
        "prefix": "RouteManeuver",
        "scope": "source.qml"
    },
    "RouteModel": {
        "body": "\nRouteModel {\n    //autoUpdate: bool\n    //count: int\n    //error: enumeration\n    //errorString: string\n    //measurementSystem: Locale::MeasurementSystem\n    //plugin: Plugin\n    //query: RouteQuery\n    //status: enumeration\n}",
        "description": "RouteModel",
        "prefix": "RouteModel",
        "scope": "source.qml"
    },
    "RouteQuery": {
        "body": "\nRouteQuery {\n    //excludedAreas: list<georectangle>\n    //extraParameters: VariantMap\n    //featureTypes: QList<FeatureType>\n    //maneuverDetail: enumeration\n    //numberAlternativeRoutes: int\n    //routeOptimizations: enumeration\n    //segmentDetail: enumeration\n    //travelModes: enumeration\n    //waypoints: list<coordinate>\n}",
        "description": "RouteQuery",
        "prefix": "RouteQuery",
        "scope": "source.qml"
    },
    "RouteSegment": {
        "body": "\nRouteSegment {\n    //distance: real\n    //maneuver: RouteManeuver\n    //path: list<coordinate>\n    //travelTime: int\n}",
        "description": "RouteSegment",
        "prefix": "RouteSegment",
        "scope": "source.qml"
    },
    "Row": {
        "body": "\nRow {\n    //add: Transition\n    //bottomPadding: real\n    //effectiveLayoutDirection: enumeration\n    //layoutDirection: enumeration\n    //leftPadding: real\n    //move: Transition\n    //padding: real\n    //populate: Transition\n    //rightPadding: real\n    //spacing: real\n    //topPadding: real\n    //onForcelayout: { }\n    //onPositioningcomplete: { }\n}",
        "description": "Row",
        "prefix": "Row",
        "scope": "source.qml"
    },
    "RowLayout": {
        "body": "\nRowLayout {\n    //layoutDirection: enumeration\n    //spacing: real\n}",
        "description": "RowLayout",
        "prefix": "RowLayout",
        "scope": "source.qml"
    },
    "Scale": {
        "body": "\nScale {\n    //origin.x: real\n    //origin.y: real\n    //xScale: real\n    //yScale: real\n}",
        "description": "Scale",
        "prefix": "Scale",
        "scope": "source.qml"
    },
    "ScaleAnimator": {
        "body": "\nScaleAnimator {\n    //duration: int\n    //easing.amplitude: real\n    //easing.bezierCurve: list<real>\n    //easing.overshoot: real\n    //easing.period: real\n    //easing.type: enumeration\n    //from: real\n    //target: QtQuick::Item\n    //to: real\n}",
        "description": "ScaleAnimator",
        "prefix": "ScaleAnimator",
        "scope": "source.qml"
    },
    "Scatter3D": {
        "body": "\nScatter3D {\n    //axisX: ValueAxis3D\n    //axisY: ValueAxis3D\n    //axisZ: ValueAxis3D\n    //selectedSeries: Scatter3DSeries\n    //seriesList: list<Scatter3DSeries>\n}",
        "description": "Scatter3D",
        "prefix": "Scatter3D",
        "scope": "source.qml"
    },
    "Scatter3DSeries": {
        "body": "\nScatter3DSeries {\n    //dataProxy: ScatterDataProxy\n    //invalidSelectionIndex: int\n    //itemSize: float\n    //selectedItem: int\n}",
        "description": "Scatter3DSeries",
        "prefix": "Scatter3DSeries",
        "scope": "source.qml"
    },
    "ScatterDataProxy": {
        "body": "\nScatterDataProxy {\n    //itemCount: int\n    //series: Scatter3DSeries\n}",
        "description": "ScatterDataProxy",
        "prefix": "ScatterDataProxy",
        "scope": "source.qml"
    },
    "ScatterSeries": {
        "body": "\nScatterSeries {\n    //borderColor: color\n    //borderWidth: real\n    //brushFilename: string\n    //count: int\n    //markerShape: enumeration\n    //markerSize: real\n}",
        "description": "ScatterSeries",
        "prefix": "ScatterSeries",
        "scope": "source.qml"
    },
    "Scene2D": {
        "body": "\nScene2D {\n    //entities: list<Entity>\n    //item: Item\n    //mouseEnabled: bool\n    //output: RenderTargetOutput\n    //renderPolicy: enumeration\n}",
        "description": "Scene2D",
        "prefix": "Scene2D",
        "scope": "source.qml"
    },
    "Scene3D: Qt3D": {
        "body": "\nScene3D: Qt3D {\n    //aspects: list<string>\n    //cameraAspectRatioMode: enumeration\n    //entity: Entity\n    //hoverEnabled: bool\n    //multisample: bool\n}",
        "description": "Scene3D: Qt3D",
        "prefix": "Scene3D: Qt3D",
        "scope": "source.qml"
    },
    "Scene3D: QtDataVisualization": {
        "body": "\nScene3D: QtDataVisualization {\n    //activeCamera: Camera3D\n    //activeLight: Light3D\n    //devicePixelRatio: float\n    //graphPositionQuery: point\n    //invalidSelectionPoint: point\n    //primarySubViewport: rect\n    //secondarySubViewport: rect\n    //secondarySubviewOnTop: bool\n    //selectionQueryPosition: point\n    //slicingActive: bool\n    //viewport: rect\n}",
        "description": "Scene3D: QtDataVisualization",
        "prefix": "Scene3D: QtDataVisualization",
        "scope": "source.qml"
    },
    "SceneLoader": {
        "body": "\nSceneLoader {\n    //source: url\n    //status: enumeration\n}",
        "description": "SceneLoader",
        "prefix": "SceneLoader",
        "scope": "source.qml"
    },
    "ScissorTest": {
        "body": "\nScissorTest {\n    //bottom: int\n    //height: int\n    //left: int\n    //width: int\n}",
        "description": "ScissorTest",
        "prefix": "ScissorTest",
        "scope": "source.qml"
    },
    "Screen": {
        "body": "\nScreen {\n    //desktopAvailableHeight: int [attached]\n    //desktopAvailableWidth: int [attached]\n    //devicePixelRatio: real [attached]\n    //height: int [attached]\n    //logicalPixelDensity: real\n    //manufacturer: string [attached]\n    //model: string [attached]\n    //name: string [attached]\n    //orientation: Qt::ScreenOrientation [attached]\n    //orientationUpdateMask: Qt::ScreenOrientations [attached]\n    //pixelDensity: real [attached]\n    //primaryOrientation: Qt::ScreenOrientation [attached]\n    //serialNumber: string [attached]\n    //virtualX: int [attached]\n    //virtualY: int [attached]\n    //width: int [attached]\n}",
        "description": "Screen",
        "prefix": "Screen",
        "scope": "source.qml"
    },
    "ScreenRayCaster": {
        "body": "\nScreenRayCaster {\n    //position: point\n}",
        "description": "ScreenRayCaster",
        "prefix": "ScreenRayCaster",
        "scope": "source.qml"
    },
    "ScriptAction": {
        "body": "\nScriptAction {\n    //script: script\n    //scriptName: string\n}",
        "description": "ScriptAction",
        "prefix": "ScriptAction",
        "scope": "source.qml"
    },
    "ScrollBar": {
        "body": "\nScrollBar {\n    //active: bool\n    //horizontal: ScrollBar [attached]\n    //horizontal: bool\n    //interactive: bool\n    //minimumSize: real\n    //orientation: enumeration\n    //policy: enumeration\n    //position: real\n    //pressed: bool\n    //size: real\n    //snapMode: enumeration\n    //stepSize: real\n    //vertical: ScrollBar [attached]\n    //vertical: bool\n    //visualPosition: real\n    //visualSize: real\n}",
        "description": "ScrollBar",
        "prefix": "ScrollBar",
        "scope": "source.qml"
    },
    "ScrollIndicator": {
        "body": "\nScrollIndicator {\n    //active: bool\n    //horizontal: ScrollIndicator [attached]\n    //horizontal: bool\n    //minimumSize: real\n    //orientation: enumeration\n    //position: real\n    //size: real\n    //vertical: ScrollIndicator [attached]\n    //vertical: bool\n    //visualPosition: real\n    //visualSize: real\n}",
        "description": "ScrollIndicator",
        "prefix": "ScrollIndicator",
        "scope": "source.qml"
    },
    "ScrollView: QtQuickControls": {
        "body": "\nScrollView: QtQuickControls {\n    //contentItem: Item\n    //flickableItem: Item\n    //frameVisible: bool\n    //highlightOnFocus: bool\n    //horizontalScrollBarPolicy: enumeration\n    //style: Component\n    //verticalScrollBarPolicy: enumeration\n    //viewport: Item\n}",
        "description": "ScrollView: QtQuickControls",
        "prefix": "ScrollView: QtQuickControls",
        "scope": "source.qml"
    },
    "ScrollView: QtQuickControls2": {
        "body": "\nScrollView: QtQuickControls2 {\n    //contentChildren: list<Item>\n    //contentData: list<Object>\n    //contentHeight: real\n    //contentWidth: real\n}",
        "description": "ScrollView: QtQuickControls2",
        "prefix": "ScrollView: QtQuickControls2",
        "scope": "source.qml"
    },
    "ScrollViewStyle": {
        "body": "\nScrollViewStyle {\n    //control: ScrollView\n    //corner: Component\n    //decrementControl: Component\n    //frame: Component\n    //handle: Component\n    //handleOverlap: int\n    //incrementControl: Component\n    //minimumHandleLength: int\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //scrollBarBackground: Component\n    //scrollToClickedPosition: bool\n    //transientScrollBars: bool\n}",
        "description": "ScrollViewStyle",
        "prefix": "ScrollViewStyle",
        "scope": "source.qml"
    },
    "ScxmlStateMachine": {
        "body": "\nScxmlStateMachine {\n    //dataModel: ScxmlDataModel\n    //initialValues: var\n    //initialized: bool\n    //invoked: bool\n    //invokedServices: list\n    //loader: Loader\n    //name: string\n    //parseErrors: var\n    //running: bool\n    //sessionId: string\n    //onActivestatenames: { }\n    //onCanceldelayedevent: { }\n    //onFinished: { }\n    //onInit: { }\n    //onIsactive: { }\n    //onIsdispatchabletarget: { }\n    //onLog: { }\n    //onReachedstablestate: { }\n    //onStart: { }\n    //onStatenames: { }\n    //onStop: { }\n    //onSubmitevent: { }\n    //onSubmitevent: { }\n}",
        "description": "ScxmlStateMachine",
        "prefix": "ScxmlStateMachine",
        "scope": "source.qml"
    },
    "SeamlessCubemap": {
        "body": "\nSeamlessCubemap {\n    //childNodes: list<Node>\n    //data: list<QtQml::QtObject>\n    //propertyTrackingOverrides: QJSValue\n}",
        "description": "SeamlessCubemap",
        "prefix": "SeamlessCubemap",
        "scope": "source.qml"
    },
    "SelectionListItem": {
        "body": "\nSelectionListItem {\n    //soundEffect: url\n}",
        "description": "SelectionListItem",
        "prefix": "SelectionListItem",
        "scope": "source.qml"
    },
    "SelectionListModel": {
        "body": "\nSelectionListModel",
        "description": "SelectionListModel",
        "prefix": "SelectionListModel",
        "scope": "source.qml"
    },
    "Sensor": {
        "body": "\nSensor {\n    //active: bool\n    //alwaysOn: bool\n    //availableDataRates: list<Range>\n    //axesOrientationMode: Sensor::AxesOrientationMode\n    //bufferSize: int\n    //busy: bool\n    //connectedToBackend: bool\n    //currentOrientation: int\n    //dataRate: int\n    //description: string\n    //efficientBufferSize: int\n    //error: int\n    //identifier: string\n    //maxBufferSize: int\n    //outputRange: int\n    //outputRanges: list<OutputRange>\n    //reading: SensorReading\n    //skipDuplicates: bool\n    //type: string\n    //userOrientation: int\n}",
        "description": "Sensor",
        "prefix": "Sensor",
        "scope": "source.qml"
    },
    "SensorGesture": {
        "body": "\nSensorGesture {\n    //availableGestures: stringlist\n    //enabled: bool\n    //gestures: stringlist\n    //invalidGestures: stringlist\n    //validGestures: stringlist\n    //onDetected: { }\n}",
        "description": "SensorGesture",
        "prefix": "SensorGesture",
        "scope": "source.qml"
    },
    "SensorGlobal": {
        "body": "\nSensorGlobal",
        "description": "SensorGlobal",
        "prefix": "SensorGlobal",
        "scope": "source.qml"
    },
    "SensorReading": {
        "body": "\nSensorReading {\n    //timestamp: quint64\n}",
        "description": "SensorReading",
        "prefix": "SensorReading",
        "scope": "source.qml"
    },
    "SequentialAnimation": {
        "body": "\nSequentialAnimation {\n    //alwaysRunToEnd: bool\n    //loops: int\n    //paused: bool\n    //running: bool\n    //onComplete: { }\n    //onPause: { }\n    //onRestart: { }\n    //onResume: { }\n    //onStart: { }\n    //onStarted: { }\n    //onStop: { }\n    //onStopped: { }\n}",
        "description": "SequentialAnimation",
        "prefix": "SequentialAnimation",
        "scope": "source.qml"
    },
    "Settings": {
        "body": "\nSettings {\n    //category: string\n}",
        "description": "Settings",
        "prefix": "Settings",
        "scope": "source.qml"
    },
    "ShaderEffect": {
        "body": "\nShaderEffect {\n    //blending: bool\n    //cullMode: enumeration\n    //fragmentShader: string\n    //log: string\n    //mesh: variant\n    //status: enumeration\n    //supportsAtlasTextures: bool\n    //vertexShader: string\n}",
        "description": "ShaderEffect",
        "prefix": "ShaderEffect",
        "scope": "source.qml"
    },
    "ShaderEffectSource": {
        "body": "\nShaderEffectSource {\n    //format: enumeration\n    //hideSource: bool\n    //live: bool\n    //mipmap: bool\n    //recursive: bool\n    //samples: int\n    //sourceItem: Item\n    //sourceRect: rect\n    //textureMirroring: enumeration\n    //textureSize: size\n    //wrapMode: enumeration\n    //onScheduleupdate: { }\n}",
        "description": "ShaderEffectSource",
        "prefix": "ShaderEffectSource",
        "scope": "source.qml"
    },
    "ShaderProgram": {
        "body": "\nShaderProgram {\n    //computeShaderCode: string\n    //computeShaderGraph: string\n    //fragmentShaderCode: string\n    //fragmentShaderGraph: string\n    //geometryShaderCode: string\n    //geometryShaderGraph: string\n    //log: string\n    //status: string\n    //tessellationControlShaderCode: string\n    //tessellationControlShaderGraph: string\n    //tessellationEvaluationShaderCode: string\n    //tessellationEvaluationShaderGraph: string\n    //vertexShaderCode: string\n    //vertexShaderGraph: string\n}",
        "description": "ShaderProgram",
        "prefix": "ShaderProgram",
        "scope": "source.qml"
    },
    "ShaderProgramBuilder": {
        "body": "\nShaderProgramBuilder {\n    //enabledLayers: stringlist\n    //shaderProgram: string\n}",
        "description": "ShaderProgramBuilder",
        "prefix": "ShaderProgramBuilder",
        "scope": "source.qml"
    },
    "Shape: QtQuick": {
        "body": "\nShape: QtQuick {\n    //asynchronous: bool\n    //containsMode: enumeration\n    //data: list<Object>\n    //rendererType: enumeration\n    //status: enumeration\n    //vendorExtensionsEnabled: bool\n}",
        "description": "Shape: QtQuick",
        "prefix": "Shape: QtQuick",
        "scope": "source.qml"
    },
    "ShapeGradient": {
        "body": "\nShapeGradient {\n    //spread: enumeration\n}",
        "description": "ShapeGradient",
        "prefix": "ShapeGradient",
        "scope": "source.qml"
    },
    "ShapePath": {
        "body": "\nShapePath {\n    //capStyle: enumeration\n    //dashOffset: real\n    //dashPattern: list<real>\n    //fillColor: color\n    //fillGradient: ShapeGradient\n    //fillRule: enumeration\n    //joinStyle: enumeration\n    //miterLimit: int\n    //strokeColor: color\n    //strokeStyle: enumeration\n    //strokeWidth: color\n}",
        "description": "ShapePath",
        "prefix": "ShapePath",
        "scope": "source.qml"
    },
    "ShellSurface": {
        "body": "\nShellSurface {\n    //windowType: enum\n}",
        "description": "ShellSurface",
        "prefix": "ShellSurface",
        "scope": "source.qml"
    },
    "ShellSurfaceItem": {
        "body": "\nShellSurfaceItem {\n    //moveItem: Item\n    //shellSurface: ShellSurface\n}",
        "description": "ShellSurfaceItem",
        "prefix": "ShellSurfaceItem",
        "scope": "source.qml"
    },
    "ShiftHandler": {
        "body": "\nShiftHandler {\n    //autoCapitalizationEnabled: bool\n    //sentenceEndingCharacters: string\n    //toggleShiftEnabled: bool\n}",
        "description": "ShiftHandler",
        "prefix": "ShiftHandler",
        "scope": "source.qml"
    },
    "ShiftKey": {
        "body": "\nShiftKey {\n    //active: bool\n    //alternativeKeys: var\n    //displayText: string\n    //effectiveAlternativeKeys: var\n    //effectiveAlternativeKeysHighlightIndex: int\n    //functionKey: bool\n    //highlighted: bool\n    //key: int\n    //keyPanelDelegate: alias\n    //noKeyEvent: bool\n    //noModifier: bool\n    //pressed: bool\n    //repeat: bool\n    //showPreview: bool\n    //smallText: string\n    //smallTextVisible: bool\n    //soundEffect: url\n    //text: string\n    //uppercased: bool\n    //weight: real\n    //onClicked: { }\n}",
        "description": "ShiftKey",
        "prefix": "ShiftKey",
        "scope": "source.qml"
    },
    "Shortcut": {
        "body": "\nShortcut {\n    //autoRepeat: bool\n    //context: enumeration\n    //enabled: bool\n    //nativeText: string\n    //portableText: string\n    //sequence: keysequence\n    //sequences: list<keysequence>\n    //onActivated: { }\n    //onActivatedambiguously: { }\n}",
        "description": "Shortcut",
        "prefix": "Shortcut",
        "scope": "source.qml"
    },
    "SignalSpy": {
        "body": "\nSignalSpy {\n    //count: int\n    //signalArguments: list\n    //signalName: string\n    //target: var\n    //valid: bool\n    //onClear: { }\n    //onWait: { }\n}",
        "description": "SignalSpy",
        "prefix": "SignalSpy",
        "scope": "source.qml"
    },
    "SignalTransition": {
        "body": "\nSignalTransition {\n    //guard: bool\n    //signal: signal\n}",
        "description": "SignalTransition",
        "prefix": "SignalTransition",
        "scope": "source.qml"
    },
    "SinglePointHandler": {
        "body": "\nSinglePointHandler {\n    //acceptedButtons: int\n    //acceptedDevices: int\n    //acceptedModifiers: int\n    //acceptedPointerTypes: int\n    //active: bool\n    //enabled: bool\n    //grabPermission: bool\n    //parent: Item\n    //point: HandlerPoint\n    //target: Item\n    //onCanceled: { }\n    //onGrabchanged: { }\n}",
        "description": "SinglePointHandler",
        "prefix": "SinglePointHandler",
        "scope": "source.qml"
    },
    "Skeleton": {
        "body": "\nSkeleton {\n    //rootJoint: Joint\n}",
        "description": "Skeleton",
        "prefix": "Skeleton",
        "scope": "source.qml"
    },
    "SkeletonLoader": {
        "body": "\nSkeletonLoader {\n    //source: url\n    //status: SkeletonLoader.Status\n}",
        "description": "SkeletonLoader",
        "prefix": "SkeletonLoader",
        "scope": "source.qml"
    },
    "Slider: QtQuickControls": {
        "body": "\nSlider: QtQuickControls {\n    //activeFocusOnPress: bool\n    //hovered: bool\n    //maximumValue: real\n    //minimumValue: real\n    //orientation: int\n    //pressed: bool\n    //stepSize: real\n    //style: Component\n    //tickmarksEnabled: bool\n    //updateValueWhileDragging: bool\n    //value: real\n    //wheelEnabled: bool\n}",
        "description": "Slider: QtQuickControls",
        "prefix": "Slider: QtQuickControls",
        "scope": "source.qml"
    },
    "Slider: QtQuickControls2": {
        "body": "\nSlider: QtQuickControls2 {\n    //from: real\n    //handle: Item\n    //horizontal: bool\n    //live: bool\n    //orientation: enumeration\n    //position: real\n    //pressed: bool\n    //snapMode: enumeration\n    //stepSize: real\n    //to: real\n    //value: real\n    //vertical: bool\n    //visualPosition: real\n    //onMoved: { }\n}",
        "description": "Slider: QtQuickControls2",
        "prefix": "Slider: QtQuickControls2",
        "scope": "source.qml"
    },
    "SliderStyle": {
        "body": "\nSliderStyle {\n    //control: Slider\n    //groove: Component\n    //handle: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //panel: Component\n    //tickmarks: Component\n}",
        "description": "SliderStyle",
        "prefix": "SliderStyle",
        "scope": "source.qml"
    },
    "SmoothedAnimation": {
        "body": "\nSmoothedAnimation {\n    //duration: int\n    //maximumEasingTime: int\n    //reversingMode: enumeration\n    //velocity: real\n}",
        "description": "SmoothedAnimation",
        "prefix": "SmoothedAnimation",
        "scope": "source.qml"
    },
    "SortPolicy": {
        "body": "\nSortPolicy {\n    //sortTypes: QVariantList\n}",
        "description": "SortPolicy",
        "prefix": "SortPolicy",
        "scope": "source.qml"
    },
    "Sound": {
        "body": "\nSound {\n    //attenuationModel: string\n    //category: string\n    //name: string\n    //playType: enumeration\n    //onAddplayvariation: { }\n    //onPlay: { }\n    //onPlay: { }\n    //onPlay: { }\n    //onPlay: { }\n    //onPlay: { }\n    //onPlay: { }\n    //onPlay: { }\n    //onPlay: { }\n    //onPlay: { }\n    //onPlay: { }\n    //onPlay: { }\n    //onPlay: { }\n}",
        "description": "Sound",
        "prefix": "Sound",
        "scope": "source.qml"
    },
    "SoundEffect": {
        "body": "\nSoundEffect {\n    //category: string\n    //loops: int\n    //loopsRemaining: int\n    //muted: bool\n    //playing: bool\n    //source: url\n    //status: enumeration\n    //volume: qreal\n    //onCategorychanged: { }\n    //onLoadedchanged: { }\n    //onLoopcountchanged: { }\n    //onLoopsremainingchanged: { }\n    //onMutedchanged: { }\n    //onPlay: { }\n    //onPlayingchanged: { }\n    //onSourcechanged: { }\n    //onStatuschanged: { }\n    //onStop: { }\n    //onVolumechanged: { }\n}",
        "description": "SoundEffect",
        "prefix": "SoundEffect",
        "scope": "source.qml"
    },
    "SoundInstance": {
        "body": "\nSoundInstance {\n    //direction: vector3d\n    //engine: QtAudioEngine::AudioEngine\n    //gain: vector3d\n    //pitch: vector3d\n    //position: vector3d\n    //sound: string\n    //state: enumeration\n    //velocity: vector3d\n    //onDirectionchanged: { }\n    //onGainchanged: { }\n    //onPause: { }\n    //onPitchchanged: { }\n    //onPlay: { }\n    //onPositionchanged: { }\n    //onSoundchanged: { }\n    //onStatechanged: { }\n    //onStop: { }\n    //onVelocitychanged: { }\n}",
        "description": "SoundInstance",
        "prefix": "SoundInstance",
        "scope": "source.qml"
    },
    "SpaceKey": {
        "body": "\nSpaceKey {\n    //active: bool\n    //alternativeKeys: var\n    //displayText: string\n    //effectiveAlternativeKeys: var\n    //effectiveAlternativeKeysHighlightIndex: int\n    //functionKey: bool\n    //highlighted: bool\n    //key: int\n    //keyPanelDelegate: alias\n    //noKeyEvent: bool\n    //noModifier: bool\n    //pressed: bool\n    //repeat: bool\n    //showPreview: bool\n    //smallText: string\n    //smallTextVisible: bool\n    //soundEffect: url\n    //text: string\n    //uppercased: bool\n    //weight: real\n    //onClicked: { }\n}",
        "description": "SpaceKey",
        "prefix": "SpaceKey",
        "scope": "source.qml"
    },
    "SphereGeometry": {
        "body": "\nSphereGeometry {\n    //generateTangents: bool\n    //indexAttribute: Attribute\n    //normalAttribute: Attribute\n    //positionAttribute: Attribute\n    //radius: real\n    //rings: int\n    //slices: int\n    //tangentAttribute: Attribute\n    //texCoordAttribute: Attribute\n}",
        "description": "SphereGeometry",
        "prefix": "SphereGeometry",
        "scope": "source.qml"
    },
    "SphereMesh": {
        "body": "\nSphereMesh {\n    //generateTangents: bool\n    //radius: real\n    //rings: int\n    //slices: int\n}",
        "description": "SphereMesh",
        "prefix": "SphereMesh",
        "scope": "source.qml"
    },
    "SpinBox: QtQuickControls": {
        "body": "\nSpinBox: QtQuickControls {\n    //activeFocusOnPress: bool\n    //cursorPosition: int\n    //decimals: int\n    //font: font\n    //horizontalAlignment: int\n    //hovered: bool\n    //inputMethodComposing: bool\n    //maximumValue: real\n    //menu: Component\n    //minimumValue: real\n    //prefix: string\n    //selectByMouse: bool\n    //stepSize: real\n    //style: Component\n    //suffix: string\n    //value: real\n    //onEditingfinished: { }\n}",
        "description": "SpinBox: QtQuickControls",
        "prefix": "SpinBox: QtQuickControls",
        "scope": "source.qml"
    },
    "SpinBox: QtQuickControls2": {
        "body": "\nSpinBox: QtQuickControls2 {\n    //displayText: string\n    //down.hovered: bool\n    //down.indicator: Item\n    //down.pressed: bool\n    //editable: bool\n    //from: int\n    //inputMethodComposing: bool\n    //inputMethodHints: flags\n    //stepSize: int\n    //textFromValue: function\n    //to: int\n    //up.hovered: bool\n    //up.indicator: Item\n    //up.pressed: bool\n    //validator: Validator\n    //value: int\n    //valueFromText: function\n    //wrap: bool\n    //onValuemodified: { }\n}",
        "description": "SpinBox: QtQuickControls2",
        "prefix": "SpinBox: QtQuickControls2",
        "scope": "source.qml"
    },
    "SpinBoxStyle": {
        "body": "\nSpinBoxStyle {\n    //background: Component\n    //control: SpinBox\n    //decrementControl: Component\n    //font: font\n    //horizontalAlignment: int\n    //incrementControl: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //renderType: int\n    //selectedTextColor: color\n    //selectionColor: color\n    //textColor: color\n}",
        "description": "SpinBoxStyle",
        "prefix": "SpinBoxStyle",
        "scope": "source.qml"
    },
    "SplineSeries": {
        "body": "\nSplineSeries {\n    //capStyle: Qt::PenCapStyle\n    //count: int\n    //style: Qt::PenStyle\n    //width: real\n}",
        "description": "SplineSeries",
        "prefix": "SplineSeries",
        "scope": "source.qml"
    },
    "SplitView": {
        "body": "\nSplitView {\n    //handleDelegate: Component\n    //orientation: int\n    //resizing: bool\n}",
        "description": "SplitView",
        "prefix": "SplitView",
        "scope": "source.qml"
    },
    "SpotLight": {
        "body": "\nSpotLight {\n    //constantAttenuation: float\n    //cutOffAngle: float\n    //linearAttenuation: float\n    //localDirection: vector3d\n    //quadraticAttenuation: float\n}",
        "description": "SpotLight",
        "prefix": "SpotLight",
        "scope": "source.qml"
    },
    "SpringAnimation": {
        "body": "\nSpringAnimation {\n    //damping: real\n    //epsilon: real\n    //mass: real\n    //modulus: real\n    //spring: real\n    //velocity: real\n}",
        "description": "SpringAnimation",
        "prefix": "SpringAnimation",
        "scope": "source.qml"
    },
    "Sprite": {
        "body": "\nSprite {\n    //duration: int\n    //durationVariation: int\n    //frameCount: int\n    //frameDuration: int\n    //frameDurationVariation: int\n    //frameHeight: int\n    //frameRate: qreal\n    //frameRateVariation: qreal\n    //frameSync: bool\n    //frameWidth: int\n    //frameX: int\n    //frameY: int\n    //name: string\n    //randomStart: bool\n    //reverse: bool\n    //source: url\n    //to: QVariantMap\n}",
        "description": "Sprite",
        "prefix": "Sprite",
        "scope": "source.qml"
    },
    "SpriteGoal": {
        "body": "\nSpriteGoal {\n    //goalState: string\n    //jump: bool\n    //systemStates: bool\n}",
        "description": "SpriteGoal",
        "prefix": "SpriteGoal",
        "scope": "source.qml"
    },
    "SpriteSequence": {
        "body": "\nSpriteSequence {\n    //currentSprite: string\n    //goalSprite: string\n    //interpolate: bool\n    //running: bool\n    //sprites: list<Sprite>\n    //onJumpto: { }\n}",
        "description": "SpriteSequence",
        "prefix": "SpriteSequence",
        "scope": "source.qml"
    },
    "Stack": {
        "body": "\nStack {\n    //index: int [attached]\n    //status: enumeration [attached]\n    //view: StackView [attached]\n}",
        "description": "Stack",
        "prefix": "Stack",
        "scope": "source.qml"
    },
    "StackLayout": {
        "body": "\nStackLayout {\n    //count: int\n    //currentIndex: int\n}",
        "description": "StackLayout",
        "prefix": "StackLayout",
        "scope": "source.qml"
    },
    "StackView: QtQuickControls": {
        "body": "\nStackView: QtQuickControls {\n    //busy: bool\n    //currentItem: Item\n    //delegate: StackViewDelegate\n    //depth: int\n    //initialItem: var\n}",
        "description": "StackView: QtQuickControls",
        "prefix": "StackView: QtQuickControls",
        "scope": "source.qml"
    },
    "StackView: QtQuickControls2": {
        "body": "\nStackView: QtQuickControls2 {\n    //busy: bool\n    //currentItem: Item\n    //depth: int\n    //empty: bool\n    //index: int [attached]\n    //initialItem: var\n    //popEnter: Transition\n    //popExit: Transition\n    //pushEnter: Transition\n    //pushExit: Transition\n    //replaceEnter: Transition\n    //replaceExit: Transition\n    //status: enumeration [attached]\n    //view: StackView [attached]\n    //visible: bool [attached]\n    //onActivated: { }\n    //onActivating: { }\n    //onDeactivated: { }\n    //onDeactivating: { }\n    //onRemoved: { }\n}",
        "description": "StackView: QtQuickControls2",
        "prefix": "StackView: QtQuickControls2",
        "scope": "source.qml"
    },
    "StackViewDelegate": {
        "body": "\nStackViewDelegate {\n    //popTransition: Component\n    //pushTransition: Component\n    //replaceTransition: Component\n}",
        "description": "StackViewDelegate",
        "prefix": "StackViewDelegate",
        "scope": "source.qml"
    },
    "StackedBarSeries": {
        "body": "\nStackedBarSeries {\n    //axisX: AbstractAxis\n    //axisXTop: AbstractAxis\n    //axisY: AbstractAxis\n    //axisYRight: AbstractAxis\n    //barWidth: real\n    //count: int\n    //labelsAngle: real\n    //labelsFormat: string\n    //labelsPosition: enumeration\n    //labelsPrecision: real\n    //labelsVisible: bool\n    //onBarsetsadded: { }\n    //onBarsetsremoved: { }\n    //onClear: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "StackedBarSeries",
        "prefix": "StackedBarSeries",
        "scope": "source.qml"
    },
    "State: QtQml": {
        "body": "\nState: QtQml {\n    //childMode: enumeration\n    //errorState: QAbstractState\n    //initialState: QAbstractState\n    //onFinished: { }\n}",
        "description": "State: QtQml",
        "prefix": "State: QtQml",
        "scope": "source.qml"
    },
    "State: QtQuick": {
        "body": "\nState: QtQuick {\n    //changes: list<Change>\n    //extend: string\n    //name: string\n    //when: bool\n}",
        "description": "State: QtQuick",
        "prefix": "State: QtQuick",
        "scope": "source.qml"
    },
    "StateChangeScript": {
        "body": "\nStateChangeScript {\n    //name: string\n    //script: script\n}",
        "description": "StateChangeScript",
        "prefix": "StateChangeScript",
        "scope": "source.qml"
    },
    "StateGroup": {
        "body": "\nStateGroup {\n    //state: string\n    //states: list<State>\n    //transitions: list<Transition>\n}",
        "description": "StateGroup",
        "prefix": "StateGroup",
        "scope": "source.qml"
    },
    "StateMachine": {
        "body": "\nStateMachine {\n    //errorString: string\n    //globalRestorePolicy: enumeration\n    //running: bool\n    //onStart: { }\n    //onStarted: { }\n    //onStop: { }\n    //onStopped: { }\n}",
        "description": "StateMachine",
        "prefix": "StateMachine",
        "scope": "source.qml"
    },
    "StateMachineLoader": {
        "body": "\nStateMachineLoader {\n    //source: url\n    //stateMachine: ScxmlStateMachine\n}",
        "description": "StateMachineLoader",
        "prefix": "StateMachineLoader",
        "scope": "source.qml"
    },
    "StatusBar": {
        "body": "\nStatusBar {\n    //contentItem: Item\n    //style: Component\n}",
        "description": "StatusBar",
        "prefix": "StatusBar",
        "scope": "source.qml"
    },
    "StatusBarStyle": {
        "body": "\nStatusBarStyle {\n    //background: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //panel: Component\n}",
        "description": "StatusBarStyle",
        "prefix": "StatusBarStyle",
        "scope": "source.qml"
    },
    "StatusIndicator": {
        "body": "\nStatusIndicator {\n    //active: bool\n    //color: color\n    //on: alias\n    //style: Component\n}",
        "description": "StatusIndicator",
        "prefix": "StatusIndicator",
        "scope": "source.qml"
    },
    "StatusIndicatorStyle": {
        "body": "\nStatusIndicatorStyle {\n    //color: color\n    //control: StatusIndicator\n    //indicator: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n}",
        "description": "StatusIndicatorStyle",
        "prefix": "StatusIndicatorStyle",
        "scope": "source.qml"
    },
    "StencilMask": {
        "body": "\nStencilMask {\n    //backOutputMask: int\n    //frontOutputMask: int\n}",
        "description": "StencilMask",
        "prefix": "StencilMask",
        "scope": "source.qml"
    },
    "StencilOperation": {
        "body": "\nStencilOperation {\n    //back: StencilOperationArguments\n    //front: StencilOperationArguments\n}",
        "description": "StencilOperation",
        "prefix": "StencilOperation",
        "scope": "source.qml"
    },
    "StencilOperationArguments": {
        "body": "\nStencilOperationArguments {\n    //allTestsPassOperation: enumeration\n    //depthTestFailureOperation: enumeration\n    //faceMode: enumeration\n    //stencilTestFailureOperation: enumeration\n}",
        "description": "StencilOperationArguments",
        "prefix": "StencilOperationArguments",
        "scope": "source.qml"
    },
    "StencilTest": {
        "body": "\nStencilTest {\n    //back: StencilTestArguments\n    //front: StencilTestArguments\n}",
        "description": "StencilTest",
        "prefix": "StencilTest",
        "scope": "source.qml"
    },
    "StencilTestArguments": {
        "body": "\nStencilTestArguments {\n    //comparisonMask: int\n    //faceMode: enumeration\n    //referenceValue: int\n    //stencilFunction: enumeration\n}",
        "description": "StencilTestArguments",
        "prefix": "StencilTestArguments",
        "scope": "source.qml"
    },
    "Store": {
        "body": "\nStore {\n    //onRestorepurchases: { }\n}",
        "description": "Store",
        "prefix": "Store",
        "scope": "source.qml"
    },
    "String": {
        "body": "\nString",
        "description": "String",
        "prefix": "String",
        "scope": "source.qml"
    },
    "Supplier": {
        "body": "\nSupplier {\n    //icon: PlaceIcon\n    //name: string\n    //supplier: QPlaceSupplier\n    //supplierId: string\n    //url: url\n}",
        "description": "Supplier",
        "prefix": "Supplier",
        "scope": "source.qml"
    },
    "Surface3D": {
        "body": "\nSurface3D {\n    //axisX: ValueAxis3D\n    //axisY: ValueAxis3D\n    //axisZ: ValueAxis3D\n    //flipHorizontalGrid: bool\n    //selectedSeries: Surface3DSeries\n    //seriesList: list<Surface3DSeries>\n}",
        "description": "Surface3D",
        "prefix": "Surface3D",
        "scope": "source.qml"
    },
    "Surface3DSeries": {
        "body": "\nSurface3DSeries {\n    //dataProxy: SurfaceDataProxy\n    //drawMode: DrawFlag\n    //flatShadingEnabled: bool\n    //flatShadingSupported: bool\n    //invalidSelectionPosition: point\n    //selectedPoint: point\n    //textureFile: string\n}",
        "description": "Surface3DSeries",
        "prefix": "Surface3DSeries",
        "scope": "source.qml"
    },
    "SurfaceDataProxy": {
        "body": "\nSurfaceDataProxy {\n    //columnCount: int\n    //rowCount: int\n    //series: Surface3DSeries\n}",
        "description": "SurfaceDataProxy",
        "prefix": "SurfaceDataProxy",
        "scope": "source.qml"
    },
    "SwipeDelegate": {
        "body": "\nSwipeDelegate {\n    //pressed: bool [attached]\n    //swipe.behind: Component\n    //swipe.behindItem: Item\n    //swipe.complete: bool\n    //swipe.enabled: bool\n    //swipe.left: Component\n    //swipe.leftItem: Item\n    //swipe.position: real\n    //swipe.right: Component\n    //swipe.rightItem: Item\n    //swipe.transition: Transition\n    //onClicked: { }\n}",
        "description": "SwipeDelegate",
        "prefix": "SwipeDelegate",
        "scope": "source.qml"
    },
    "SwipeView": {
        "body": "\nSwipeView {\n    //horizontal: bool\n    //index: int [attached]\n    //interactive: bool\n    //isCurrentItem: bool [attached]\n    //isNextItem: bool [attached]\n    //isPreviousItem: bool [attached]\n    //orientation: enumeration\n    //vertical: bool\n    //view: SwipeView [attached]\n}",
        "description": "SwipeView",
        "prefix": "SwipeView",
        "scope": "source.qml"
    },
    "Switch: QtQuickControls": {
        "body": "\nSwitch: QtQuickControls {\n    //activeFocusOnPress: bool\n    //checked: bool\n    //exclusiveGroup: ExclusiveGroup\n    //pressed: bool\n    //style: Component\n    //onClicked: { }\n}",
        "description": "Switch: QtQuickControls",
        "prefix": "Switch: QtQuickControls",
        "scope": "source.qml"
    },
    "Switch: QtQuickControls2": {
        "body": "\nSwitch: QtQuickControls2 {\n    //position: real\n    //visualPosition: real\n}",
        "description": "Switch: QtQuickControls2",
        "prefix": "Switch: QtQuickControls2",
        "scope": "source.qml"
    },
    "SwitchDelegate": {
        "body": "\nSwitchDelegate {\n    //position: real\n    //visualPosition: real\n}",
        "description": "SwitchDelegate",
        "prefix": "SwitchDelegate",
        "scope": "source.qml"
    },
    "SwitchStyle": {
        "body": "\nSwitchStyle {\n    //groove: Component\n    //handle: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n}",
        "description": "SwitchStyle",
        "prefix": "SwitchStyle",
        "scope": "source.qml"
    },
    "SymbolModeKey": {
        "body": "\nSymbolModeKey {\n    //active: bool\n    //alternativeKeys: var\n    //displayText: string\n    //effectiveAlternativeKeys: var\n    //effectiveAlternativeKeysHighlightIndex: int\n    //functionKey: bool\n    //highlighted: bool\n    //key: int\n    //keyPanelDelegate: alias\n    //noKeyEvent: bool\n    //noModifier: bool\n    //pressed: bool\n    //repeat: bool\n    //showPreview: bool\n    //smallText: string\n    //smallTextVisible: bool\n    //soundEffect: url\n    //text: string\n    //uppercased: bool\n    //weight: real\n    //onClicked: { }\n}",
        "description": "SymbolModeKey",
        "prefix": "SymbolModeKey",
        "scope": "source.qml"
    },
    "SystemPalette": {
        "body": "\nSystemPalette {\n    //alternateBase: color\n    //base: color\n    //button: color\n    //buttonText: color\n    //colorGroup: enumeration\n    //dark: color\n    //highlight: color\n    //highlightedText: color\n    //light: color\n    //mid: color\n    //midlight: color\n    //shadow: color\n    //text: color\n    //window: color\n    //windowText: color\n}",
        "description": "SystemPalette",
        "prefix": "SystemPalette",
        "scope": "source.qml"
    },
    "Tab": {
        "body": "\nTab {\n    //title: string\n}",
        "description": "Tab",
        "prefix": "Tab",
        "scope": "source.qml"
    },
    "TabBar": {
        "body": "\nTabBar {\n    //contentHeight: real\n    //contentWidth: real\n    //index: int [attached]\n    //position: enumeration [attached]\n    //position: enumeration\n    //tabBar: TabBar [attached]\n}",
        "description": "TabBar",
        "prefix": "TabBar",
        "scope": "source.qml"
    },
    "TabButton": {
        "body": "\nTabButton {\n    //action: Action\n    //autoExclusive: bool\n    //autoRepeat: bool\n    //autoRepeatDelay: int\n    //autoRepeatInterval: int\n    //checkable: bool\n    //checked: bool\n    //display: enumeration\n    //down: bool\n    //icon.color: color\n    //icon.height: int\n    //icon.name: string\n    //icon.source: url\n    //icon.width: int\n    //indicator: Item\n    //pressX: real\n    //pressY: real\n    //pressed: bool\n    //text: string\n    //onCanceled: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onPressandhold: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onToggled: { }\n}",
        "description": "TabButton",
        "prefix": "TabButton",
        "scope": "source.qml"
    },
    "TabView": {
        "body": "\nTabView {\n    //contentItem: Item\n    //count: int\n    //currentIndex: int\n    //frameVisible: bool\n    //tabPosition: int\n    //tabsVisible: bool\n}",
        "description": "TabView",
        "prefix": "TabView",
        "scope": "source.qml"
    },
    "TabViewStyle": {
        "body": "\nTabViewStyle {\n    //control: TabView\n    //frame: Component\n    //frameOverlap: int\n    //leftCorner: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //rightCorner: Component\n    //tab: Component\n    //tabBar: Component\n    //tabOverlap: int\n    //tabsAlignment: int\n    //tabsMovable: bool\n}",
        "description": "TabViewStyle",
        "prefix": "TabViewStyle",
        "scope": "source.qml"
    },
    "TableView": {
        "body": "\nTableView {\n    //alternatingRowColors: bool\n    //backgroundVisible: bool\n    //columnCount: int\n    //contentFooter: Component\n    //contentHeader: Component\n    //currentRow: int\n    //headerDelegate: Component\n    //headerVisible: bool\n    //itemDelegate: Component\n    //model: model\n    //rowCount: int\n    //rowDelegate: Component\n    //section.criteria: enumeration\n    //section.delegate: Component\n    //section.labelPositioning: enumeration\n    //section.property: string\n    //selection: Selection\n    //selectionMode: int\n    //sortIndicatorColumn: int\n    //sortIndicatorOrder: int\n    //sortIndicatorVisible: bool\n    //onActivated: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onPressandhold: { }\n}",
        "description": "TableView",
        "prefix": "TableView",
        "scope": "source.qml"
    },
    "TableViewColumn": {
        "body": "\nTableViewColumn {\n    //delegate: Component\n    //elideMode: int\n    //horizontalAlignment: int\n    //movable: bool\n    //resizable: bool\n    //role: string\n    //title: string\n    //visible: bool\n    //width: int\n}",
        "description": "TableViewColumn",
        "prefix": "TableViewColumn",
        "scope": "source.qml"
    },
    "TableViewStyle": {
        "body": "\nTableViewStyle {\n    //activateItemOnSingleClick: bool\n    //alternateBackgroundColor: color\n    //backgroundColor: color\n    //highlightedTextColor: color\n    //textColor: color\n}",
        "description": "TableViewStyle",
        "prefix": "TableViewStyle",
        "scope": "source.qml"
    },
    "TapHandler": {
        "body": "\nTapHandler {\n    //acceptedButtons: int\n    //acceptedDevices: int\n    //acceptedModifiers: int\n    //acceptedPointerTypes: int\n    //active: bool\n    //enabled: bool\n    //gesturePolicy: enumeration\n    //grabPermission: bool\n    //longPressThreshold: real\n    //parent: Item\n    //point: HandlerPoint\n    //pressed: bool\n    //tapCount: int\n    //target: Item\n    //timeHeld: real\n    //onCanceled: { }\n    //onDoubletapped: { }\n    //onGrabchanged: { }\n    //onLongpressed: { }\n    //onSingletapped: { }\n    //onTapped: { }\n}",
        "description": "TapHandler",
        "prefix": "TapHandler",
        "scope": "source.qml"
    },
    "TapReading": {
        "body": "\nTapReading {\n    //doubleTap: bool\n    //tapDirection: TapDirection\n}",
        "description": "TapReading",
        "prefix": "TapReading",
        "scope": "source.qml"
    },
    "TapSensor": {
        "body": "\nTapSensor {\n    //returnDoubleTapEvents: bool\n}",
        "description": "TapSensor",
        "prefix": "TapSensor",
        "scope": "source.qml"
    },
    "TargetDirection": {
        "body": "\nTargetDirection {\n    //magnitude: real\n    //magnitudeVariation: real\n    //proportionalMagnitude: bool\n    //targetItem: Item\n    //targetVariation: real\n    //targetX: real\n    //targetY: real\n}",
        "description": "TargetDirection",
        "prefix": "TargetDirection",
        "scope": "source.qml"
    },
    "TaskbarButton": {
        "body": "\nTaskbarButton {\n    //overlay.accessibleDescription: string\n    //overlay.iconSource: url\n    //progress.maximum: int\n    //progress.minimum: int\n    //progress.paused: bool\n    //progress.stopped: bool\n    //progress.value: int\n    //progress.visible: bool\n}",
        "description": "TaskbarButton",
        "prefix": "TaskbarButton",
        "scope": "source.qml"
    },
    "Technique": {
        "body": "\nTechnique {\n    //filterKeys: list<FilterKey>\n    //graphicsApiFilter: GraphicsApiFilter\n    //parameters: list<Parameter>\n    //renderPasses: list<RenderPass>\n}",
        "description": "Technique",
        "prefix": "Technique",
        "scope": "source.qml"
    },
    "TechniqueFilter": {
        "body": "\nTechniqueFilter {\n    //matchAll: list<FilterKey>\n    //parameters: list<Parameter>\n}",
        "description": "TechniqueFilter",
        "prefix": "TechniqueFilter",
        "scope": "source.qml"
    },
    "TestCase": {
        "body": "\nTestCase {\n    //completed: bool\n    //name: string\n    //optional: bool\n    //running: bool\n    //when: bool\n    //windowShown: bool\n    //onCleanup: { }\n    //onCleanuptestcase: { }\n    //onCompare: { }\n    //onExpectfail: { }\n    //onExpectfailcontinue: { }\n    //onFail: { }\n    //onFuzzycompare: { }\n    //onIgnorewarning: { }\n    //onInit: { }\n    //onInittestcase: { }\n    //onKeyclick: { }\n    //onKeypress: { }\n    //onKeyrelease: { }\n    //onKeysequence: { }\n    //onMouseclick: { }\n    //onMousedoubleclick: { }\n    //onMousedoubleclicksequence: { }\n    //onMousedrag: { }\n    //onMousemove: { }\n    //onMousepress: { }\n    //onMouserelease: { }\n    //onMousewheel: { }\n    //onSkip: { }\n    //onSleep: { }\n    //onTrycompare: { }\n    //onTryverify: { }\n    //onVerify: { }\n    //onWait: { }\n    //onWaitforrendering: { }\n    //onWarn: { }\n}",
        "description": "TestCase",
        "prefix": "TestCase",
        "scope": "source.qml"
    },
    "Text": {
        "body": "\nText {\n    //advance: size\n    //baseUrl: url\n    //bottomPadding: real\n    //clip: bool\n    //color: color\n    //contentHeight: real\n    //contentWidth: real\n    //effectiveHorizontalAlignment: enumeration\n    //elide: enumeration\n    //font.bold: bool\n    //font.capitalization: enumeration\n    //font.family: string\n    //font.hintingPreference: enumeration\n    //font.italic: bool\n    //font.kerning: bool\n    //font.letterSpacing: real\n    //font.pixelSize: int\n    //font.pointSize: real\n    //font.preferShaping: bool\n    //font.strikeout: bool\n    //font.styleName: string\n    //font.underline: bool\n    //font.weight: enumeration\n    //font.wordSpacing: real\n    //fontInfo.bold: bool\n    //fontInfo.family: string\n    //fontInfo.italic: bool\n    //fontInfo.pixelSize: string\n    //fontInfo.pointSize: real\n    //fontInfo.styleName: string\n    //fontInfo.weight: int\n    //fontSizeMode: enumeration\n    //horizontalAlignment: enumeration\n    //hoveredLink: string\n    //leftPadding: real\n    //lineCount: int\n    //lineHeight: real\n    //lineHeightMode: enumeration\n    //linkColor: color\n    //maximumLineCount: int\n    //minimumPixelSize: int\n    //minimumPointSize: int\n    //padding: real\n    //renderType: enumeration\n    //rightPadding: real\n    //style: enumeration\n    //styleColor: color\n    //text: string\n    //textFormat: enumeration\n    //topPadding: real\n    //truncated: bool\n    //verticalAlignment: enumeration\n    //wrapMode: enumeration\n    //onDolayout: { }\n    //onForcelayout: { }\n    //onLinelaidout: { }\n    //onLinkactivated: { }\n    //onLinkat: { }\n    //onLinkhovered: { }\n}",
        "description": "Text",
        "prefix": "Text",
        "scope": "source.qml"
    },
    "TextArea: QtQuickControls": {
        "body": "\nTextArea: QtQuickControls {\n    //activeFocusOnPress: bool\n    //backgroundVisible: bool\n    //baseUrl: url\n    //canPaste: bool\n    //canRedo: bool\n    //canUndo: bool\n    //contentHeight: real\n    //contentWidth: real\n    //cursorPosition: int\n    //cursorRectangle: rect\n    //effectiveHorizontalAlignment: enumeration\n    //font: font\n    //horizontalAlignment: enumeration\n    //hoveredLink: string\n    //inputMethodComposing: bool\n    //inputMethodHints: enumeration\n    //length: int\n    //lineCount: int\n    //menu: Component\n    //readOnly: bool\n    //selectByKeyboard: bool\n    //selectByMouse: bool\n    //selectedText: string\n    //selectionEnd: int\n    //selectionStart: int\n    //tabChangesFocus: bool\n    //text: string\n    //textColor: color\n    //textDocument: TextDocument\n    //textFormat: enumeration\n    //textMargin: real\n    //verticalAlignment: enumeration\n    //wrapMode: enumeration\n    //onEditingfinished: { }\n    //onLinkactivated: { }\n    //onLinkhovered: { }\n}",
        "description": "TextArea: QtQuickControls",
        "prefix": "TextArea: QtQuickControls",
        "scope": "source.qml"
    },
    "TextArea: QtQuickControls2": {
        "body": "\nTextArea: QtQuickControls2 {\n    //background: Item\n    //flickable: TextArea [attached]\n    //focusReason: enumeration\n    //hoverEnabled: bool\n    //hovered: bool\n    //palette: palette\n    //placeholderText: string\n    //onPressandhold: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "TextArea: QtQuickControls2",
        "prefix": "TextArea: QtQuickControls2",
        "scope": "source.qml"
    },
    "TextAreaStyle": {
        "body": "\nTextAreaStyle {\n    //backgroundColor: color\n    //control: TextArea\n    //font: font\n    //renderType: int\n    //selectedTextColor: color\n    //selectionColor: color\n    //textColor: color\n    //textMargin: real\n}",
        "description": "TextAreaStyle",
        "prefix": "TextAreaStyle",
        "scope": "source.qml"
    },
    "TextEdit": {
        "body": "\nTextEdit {\n    //activeFocusOnPress: bool\n    //baseUrl: url\n    //bottomPadding: real\n    //canPaste: bool\n    //canRedo: bool\n    //canUndo: bool\n    //color: color\n    //contentHeight: real\n    //contentWidth: real\n    //cursorDelegate: Component\n    //cursorPosition: int\n    //cursorRectangle: rectangle\n    //cursorVisible: bool\n    //effectiveHorizontalAlignment: enumeration\n    //font.bold: bool\n    //font.capitalization: enumeration\n    //font.family: string\n    //font.hintingPreference: enumeration\n    //font.italic: bool\n    //font.kerning: bool\n    //font.letterSpacing: real\n    //font.pixelSize: int\n    //font.pointSize: real\n    //font.preferShaping: bool\n    //font.strikeout: bool\n    //font.styleName: string\n    //font.underline: bool\n    //font.weight: enumeration\n    //font.wordSpacing: real\n    //horizontalAlignment: enumeration\n    //hoveredLink: string\n    //inputMethodComposing: bool\n    //inputMethodHints: enumeration\n    //leftPadding: real\n    //length: int\n    //lineCount: int\n    //mouseSelectionMode: enumeration\n    //overwriteMode: bool\n    //padding: real\n    //persistentSelection: bool\n    //preeditText: string\n    //readOnly: bool\n    //renderType: enumeration\n    //rightPadding: real\n    //selectByKeyboard: bool\n    //selectByMouse: bool\n    //selectedText: string\n    //selectedTextColor: color\n    //selectionColor: color\n    //selectionEnd: int\n    //selectionStart: int\n    //tabStopDistance: real\n    //text: string\n    //textDocument: TextDocument\n    //textFormat: enumeration\n    //textMargin: real\n    //topPadding: real\n    //verticalAlignment: enumeration\n    //wrapMode: enumeration\n    //onClear: { }\n    //onCopy: { }\n    //onCut: { }\n    //onDeselect: { }\n    //onEditingfinished: { }\n    //onInsert: { }\n    //onIsrighttoleft: { }\n    //onLinkactivated: { }\n    //onLinkat: { }\n    //onLinkhovered: { }\n    //onMovecursorselection: { }\n    //onPaste: { }\n    //onRedo: { }\n    //onSelect: { }\n    //onSelectall: { }\n    //onSelectword: { }\n    //onUndo: { }\n}",
        "description": "TextEdit",
        "prefix": "TextEdit",
        "scope": "source.qml"
    },
    "TextField: QtQuickControls": {
        "body": "\nTextField: QtQuickControls {\n    //acceptableInput: bool\n    //activeFocusOnPress: bool\n    //canPaste: bool\n    //canRedo: bool\n    //canUndo: bool\n    //cursorPosition: int\n    //cursorRectangle: rect\n    //displayText: string\n    //echoMode: enumeration\n    //effectiveHorizontalAlignment: enumeration\n    //font: font\n    //horizontalAlignment: enumeration\n    //hovered: bool\n    //inputMask: string\n    //inputMethodComposing: bool\n    //inputMethodHints: enumeration\n    //length: int\n    //maximumLength: int\n    //menu: Component\n    //placeholderText: string\n    //readOnly: bool\n    //selectByMouse: bool\n    //selectedText: string\n    //selectionEnd: int\n    //selectionStart: int\n    //style: Component\n    //text: string\n    //textColor: color\n    //validator: Validator\n    //verticalAlignment: enumeration\n    //onAccepted: { }\n    //onEditingfinished: { }\n}",
        "description": "TextField: QtQuickControls",
        "prefix": "TextField: QtQuickControls",
        "scope": "source.qml"
    },
    "TextField: QtQuickControls2": {
        "body": "\nTextField: QtQuickControls2 {\n    //background: Item\n    //focusReason: enumeration\n    //hoverEnabled: bool\n    //hovered: bool\n    //palette: palette\n    //placeholderText: string\n    //onPressandhold: { }\n    //onPressed: { }\n    //onReleased: { }\n}",
        "description": "TextField: QtQuickControls2",
        "prefix": "TextField: QtQuickControls2",
        "scope": "source.qml"
    },
    "TextFieldStyle": {
        "body": "\nTextFieldStyle {\n    //background: Component\n    //control: TextField\n    //font: font\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //passwordCharacter: string\n    //placeholderTextColor: color\n    //renderType: int\n    //selectedTextColor: color\n    //selectionColor: color\n    //textColor: color\n}",
        "description": "TextFieldStyle",
        "prefix": "TextFieldStyle",
        "scope": "source.qml"
    },
    "TextInput": {
        "body": "\nTextInput {\n    //acceptableInput: bool\n    //activeFocusOnPress: bool\n    //autoScroll: bool\n    //bottomPadding: real\n    //canPaste: bool\n    //canRedo: bool\n    //canUndo: bool\n    //color: color\n    //contentHeight: real\n    //contentWidth: real\n    //cursorDelegate: Component\n    //cursorPosition: int\n    //cursorRectangle: rectangle\n    //cursorVisible: bool\n    //displayText: string\n    //echoMode: enumeration\n    //effectiveHorizontalAlignment: enumeration\n    //font.bold: bool\n    //font.capitalization: enumeration\n    //font.family: string\n    //font.hintingPreference: enumeration\n    //font.italic: bool\n    //font.kerning: bool\n    //font.letterSpacing: real\n    //font.pixelSize: int\n    //font.pointSize: real\n    //font.preferShaping: bool\n    //font.strikeout: bool\n    //font.styleName: string\n    //font.underline: bool\n    //font.weight: enumeration\n    //font.wordSpacing: real\n    //horizontalAlignment: enumeration\n    //inputMask: string\n    //inputMethodComposing: bool\n    //inputMethodHints: enumeration\n    //leftPadding: real\n    //length: int\n    //maximumLength: int\n    //mouseSelectionMode: enumeration\n    //overwriteMode: bool\n    //padding: real\n    //passwordCharacter: string\n    //passwordMaskDelay: int\n    //persistentSelection: bool\n    //preeditText: string\n    //readOnly: bool\n    //renderType: enumeration\n    //rightPadding: real\n    //selectByMouse: bool\n    //selectedText: string\n    //selectedTextColor: color\n    //selectionColor: color\n    //selectionEnd: int\n    //selectionStart: int\n    //text: string\n    //topPadding: real\n    //validator: Validator\n    //verticalAlignment: enumeration\n    //wrapMode: enumeration\n    //onAccepted: { }\n    //onClear: { }\n    //onCopy: { }\n    //onCut: { }\n    //onDeselect: { }\n    //onEditingfinished: { }\n    //onEnsurevisible: { }\n    //onInsert: { }\n    //onIsrighttoleft: { }\n    //onMovecursorselection: { }\n    //onPaste: { }\n    //onRedo: { }\n    //onRemove: { }\n    //onSelect: { }\n    //onSelectall: { }\n    //onSelectword: { }\n    //onTextedited: { }\n    //onUndo: { }\n}",
        "description": "TextInput",
        "prefix": "TextInput",
        "scope": "source.qml"
    },
    "TextMetrics": {
        "body": "\nTextMetrics {\n    //advanceWidth: real\n    //boundingRect: rect\n    //elide: enumeration\n    //elideWidth: real\n    //elidedText: string\n    //font: font\n    //height: real\n    //text: string\n    //tightBoundingRect: rect\n    //width: real\n}",
        "description": "TextMetrics",
        "prefix": "TextMetrics",
        "scope": "source.qml"
    },
    "TextureImage: Qt3D": {
        "body": "\nTextureImage: Qt3D {\n    //face: enumeration\n    //layer: int\n    //mipLevel: int\n    //source: url\n    //status: enumeration\n}",
        "description": "TextureImage: Qt3D",
        "prefix": "TextureImage: Qt3D",
        "scope": "source.qml"
    },
    "TextureImage: QtCanvas3D": {
        "body": "\nTextureImage: QtCanvas3D {\n    //errorString(): string\n    //height(): int\n    //imageState(): TextureImageState\n    //src(): url\n    //width(): int\n}",
        "description": "TextureImage: QtCanvas3D",
        "prefix": "TextureImage: QtCanvas3D",
        "scope": "source.qml"
    },
    "TextureImageFactory": {
        "body": "\nTextureImageFactory",
        "description": "TextureImageFactory",
        "prefix": "TextureImageFactory",
        "scope": "source.qml"
    },
    "Theme3D": {
        "body": "\nTheme3D {\n    //ambientLightStrength: real\n    //backgroundColor: color\n    //backgroundEnabled: bool\n    //baseColors: list<ThemeColor>\n    //baseGradients: list<ColorGradient>\n    //colorStyle: Theme3D.ColorStyle\n    //font: font\n    //gridEnabled: bool\n    //gridLineColor: color\n    //highlightLightStrength: real\n    //labelBackgroundColor: color\n    //labelBackgroundEnabled: bool\n    //labelBorderEnabled: bool\n    //labelTextColor: color\n    //lightColor: color\n    //lightStrength: real\n    //multiHighlightColor: color\n    //multiHighlightGradient: ColorGradient\n    //singleHighlightColor: color\n    //singleHighlightGradient: ColorGradient\n    //type: Theme3D.Theme\n    //windowColor: color\n}",
        "description": "Theme3D",
        "prefix": "Theme3D",
        "scope": "source.qml"
    },
    "ThemeColor": {
        "body": "\nThemeColor {\n    //color: color\n}",
        "description": "ThemeColor",
        "prefix": "ThemeColor",
        "scope": "source.qml"
    },
    "ThresholdMask": {
        "body": "\nThresholdMask {\n    //cached: bool\n    //maskSource: variant\n    //source: variant\n    //spread: real\n    //threshold: real\n}",
        "description": "ThresholdMask",
        "prefix": "ThresholdMask",
        "scope": "source.qml"
    },
    "ThumbnailToolBar": {
        "body": "\nThumbnailToolBar {\n    //iconicLivePreviewSource: url\n    //iconicNotificationsEnabled: bool\n    //iconicThumbnailSource: url\n    //onIconiclivepreviewrequested: { }\n    //onIconicthumbnailrequested: { }\n}",
        "description": "ThumbnailToolBar",
        "prefix": "ThumbnailToolBar",
        "scope": "source.qml"
    },
    "ThumbnailToolButton": {
        "body": "\nThumbnailToolButton {\n    //dismissOnClick: bool\n    //enabled: bool\n    //flat: bool\n    //iconSource: url\n    //interactive: bool\n    //tooltip: string\n    //visible: bool\n    //onClicked: { }\n}",
        "description": "ThumbnailToolButton",
        "prefix": "ThumbnailToolButton",
        "scope": "source.qml"
    },
    "TiltReading": {
        "body": "\nTiltReading {\n    //xRotation: qreal\n    //yRotation: qreal\n}",
        "description": "TiltReading",
        "prefix": "TiltReading",
        "scope": "source.qml"
    },
    "TiltSensor": {
        "body": "\nTiltSensor {\n    //onCalibrate: { }\n}",
        "description": "TiltSensor",
        "prefix": "TiltSensor",
        "scope": "source.qml"
    },
    "TimeoutTransition": {
        "body": "\nTimeoutTransition {\n    //timeout: int\n}",
        "description": "TimeoutTransition",
        "prefix": "TimeoutTransition",
        "scope": "source.qml"
    },
    "Timer": {
        "body": "\nTimer {\n    //interval: int\n    //repeat: bool\n    //running: bool\n    //triggeredOnStart: bool\n    //onRestart: { }\n    //onStart: { }\n    //onStop: { }\n    //onTriggered: { }\n}",
        "description": "Timer",
        "prefix": "Timer",
        "scope": "source.qml"
    },
    "ToggleButton": {
        "body": "\nToggleButton {\n    //isDefault: bool\n    //menu: Menu\n}",
        "description": "ToggleButton",
        "prefix": "ToggleButton",
        "scope": "source.qml"
    },
    "ToggleButtonStyle": {
        "body": "\nToggleButtonStyle {\n    //checkedDropShadowColor: color\n    //checkedGradient: Gradient\n    //control: ToggleButton\n    //inactiveGradient: Gradient\n    //uncheckedDropShadowColor: color\n    //uncheckedGradient: Gradient\n}",
        "description": "ToggleButtonStyle",
        "prefix": "ToggleButtonStyle",
        "scope": "source.qml"
    },
    "ToolBar: QtQuickControls": {
        "body": "\nToolBar: QtQuickControls {\n    //contentItem: Item\n}",
        "description": "ToolBar: QtQuickControls",
        "prefix": "ToolBar: QtQuickControls",
        "scope": "source.qml"
    },
    "ToolBar: QtQuickControls2": {
        "body": "\nToolBar: QtQuickControls2 {\n    //position: enumeration\n}",
        "description": "ToolBar: QtQuickControls2",
        "prefix": "ToolBar: QtQuickControls2",
        "scope": "source.qml"
    },
    "ToolBarStyle": {
        "body": "\nToolBarStyle {\n    //background: Component\n    //menuButton: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //panel: Component\n}",
        "description": "ToolBarStyle",
        "prefix": "ToolBarStyle",
        "scope": "source.qml"
    },
    "ToolButton: QtQuickControls": {
        "body": "\nToolButton: QtQuickControls {\n    //action: Action\n    //activeFocusOnPress: bool\n    //checkable: bool\n    //checked: bool\n    //exclusiveGroup: ExclusiveGroup\n    //hovered: bool\n    //iconName: string\n    //iconSource: url\n    //isDefault: bool\n    //menu: Menu\n    //pressed: bool\n    //style: Component\n    //text: string\n    //tooltip: string\n    //onClicked: { }\n}",
        "description": "ToolButton: QtQuickControls",
        "prefix": "ToolButton: QtQuickControls",
        "scope": "source.qml"
    },
    "ToolButton: QtQuickControls2": {
        "body": "\nToolButton: QtQuickControls2 {\n    //flat: bool\n    //highlighted: bool\n}",
        "description": "ToolButton: QtQuickControls2",
        "prefix": "ToolButton: QtQuickControls2",
        "scope": "source.qml"
    },
    "ToolSeparator": {
        "body": "\nToolSeparator {\n    //horizontal: bool\n    //orientation: enumeration\n    //vertical: bool\n}",
        "description": "ToolSeparator",
        "prefix": "ToolSeparator",
        "scope": "source.qml"
    },
    "ToolTip": {
        "body": "\nToolTip {\n    //delay: int [attached]\n    //delay: int\n    //text: string [attached]\n    //text: string\n    //timeout: int [attached]\n    //timeout: int\n    //toolTip: ToolTip [attached]\n    //visible: bool [attached]\n}",
        "description": "ToolTip",
        "prefix": "ToolTip",
        "scope": "source.qml"
    },
    "Torch": {
        "body": "\nTorch {\n    //enabled: bool\n    //power: int\n}",
        "description": "Torch",
        "prefix": "Torch",
        "scope": "source.qml"
    },
    "TorusGeometry": {
        "body": "\nTorusGeometry {\n    //indexAttribute: Attribute\n    //minorRadius: real\n    //normalAttribute: Attribute\n    //positionAttribute: Attribute\n    //radius: real\n    //rings: int\n    //slices: int\n    //texCoordAttribute: Attribute\n}",
        "description": "TorusGeometry",
        "prefix": "TorusGeometry",
        "scope": "source.qml"
    },
    "TorusMesh": {
        "body": "\nTorusMesh {\n    //minorRadius: real\n    //radius: real\n    //rings: int\n    //slices: int\n}",
        "description": "TorusMesh",
        "prefix": "TorusMesh",
        "scope": "source.qml"
    },
    "TouchEventSequence": {
        "body": "\nTouchEventSequence",
        "description": "TouchEventSequence",
        "prefix": "TouchEventSequence",
        "scope": "source.qml"
    },
    "TouchInputHandler3D": {
        "body": "\nTouchInputHandler3D {\n    //rotationEnabled: bool\n    //selectionEnabled: bool\n    //zoomAtTargetEnabled: bool\n    //zoomEnabled: bool\n}",
        "description": "TouchInputHandler3D",
        "prefix": "TouchInputHandler3D",
        "scope": "source.qml"
    },
    "TouchPoint": {
        "body": "\nTouchPoint {\n    //area: rectangle\n    //ellipseDiameters: size\n    //pointId: int\n    //pressed: bool\n    //pressure: real\n    //previousX: real\n    //previousY: real\n    //rotation: real\n    //sceneX: real\n    //sceneY: real\n    //startX: real\n    //startY: real\n    //uniqueId: PointingDeviceUniqueId\n    //velocity: vector2d\n    //x: real\n    //y: real\n}",
        "description": "TouchPoint",
        "prefix": "TouchPoint",
        "scope": "source.qml"
    },
    "Trace": {
        "body": "\nTrace {\n    //channels: list<strings>\n    //isCanceled: bool\n    //isFinal: bool\n    //length: int\n    //traceId: int\n}",
        "description": "Trace",
        "prefix": "Trace",
        "scope": "source.qml"
    },
    "TraceCanvas": {
        "body": "\nTraceCanvas {\n    //autoDestroy: bool\n    //autoDestroyDelay: int\n    //renderFunction: var\n    //trace: var\n    //onRendersmoothedline: { }\n}",
        "description": "TraceCanvas",
        "prefix": "TraceCanvas",
        "scope": "source.qml"
    },
    "TraceInputArea": {
        "body": "\nTraceInputArea {\n    //boundingBox: rect\n    //canvasType: string\n    //horizontalRulers: var\n    //patternRecognitionMode: int\n    //verticalRulers: var\n}",
        "description": "TraceInputArea",
        "prefix": "TraceInputArea",
        "scope": "source.qml"
    },
    "TraceInputKey": {
        "body": "\nTraceInputKey {\n    //boundingBox: alias\n    //canvasType: alias\n    //horizontalRulers: alias\n    //patternRecognitionMode: alias\n    //verticalRulers: alias\n    //weight: real\n}",
        "description": "TraceInputKey",
        "prefix": "TraceInputKey",
        "scope": "source.qml"
    },
    "TraceInputKeyPanel": {
        "body": "\nTraceInputKeyPanel {\n    //control: Item\n    //traceMargins: real\n}",
        "description": "TraceInputKeyPanel",
        "prefix": "TraceInputKeyPanel",
        "scope": "source.qml"
    },
    "TrailEmitter": {
        "body": "\nTrailEmitter {\n    //emitHeight: real\n    //emitRatePerParticle: real\n    //emitShape: Shape\n    //emitWidth: real\n    //follow: string\n    //velocityFromMovement: qreal\n    //onEmitfollowparticles: { }\n}",
        "description": "TrailEmitter",
        "prefix": "TrailEmitter",
        "scope": "source.qml"
    },
    "Transaction": {
        "body": "\nTransaction {\n    //errorString: string\n    //failureReason: enum\n    //orderId: string\n    //product: object\n    //status: enum\n    //timestamp: time\n}",
        "description": "Transaction",
        "prefix": "Transaction",
        "scope": "source.qml"
    },
    "Transform: Qt3D": {
        "body": "\nTransform: Qt3D {\n    //matrix: matrix4x4\n    //rotation: quaternion\n    //rotationX: real\n    //rotationY: real\n    //rotationZ: real\n    //scale: real\n    //scale3D: vector3d\n    //translation: vector3d\n}",
        "description": "Transform: Qt3D",
        "prefix": "Transform: Qt3D",
        "scope": "source.qml"
    },
    "Transition": {
        "body": "\nTransition {\n    //animations: list<Animation>\n    //enabled: bool\n    //from: string\n    //reversible: bool\n    //running: bool\n    //to: string\n}",
        "description": "Transition",
        "prefix": "Transition",
        "scope": "source.qml"
    },
    "Translate": {
        "body": "\nTranslate {\n    //x: real\n    //y: real\n}",
        "description": "Translate",
        "prefix": "Translate",
        "scope": "source.qml"
    },
    "TreeView": {
        "body": "\nTreeView {\n    //alternatingRowColors: bool\n    //backgroundVisible: bool\n    //columnCount: int\n    //contentFooter: Component\n    //contentHeader: Component\n    //currentIndex: QModelIndex\n    //headerDelegate: Component\n    //headerVisible: bool\n    //itemDelegate: Component\n    //model: QAbstractItemModel\n    //rootIndex: QModelIndex\n    //rowDelegate: Component\n    //section.criteria: enumeration\n    //section.delegate: Component\n    //section.labelPositioning: enumeration\n    //section.property: string\n    //selection: ItemSelectionModel\n    //selectionMode: int\n    //sortIndicatorColumn: int\n    //sortIndicatorOrder: int\n    //sortIndicatorVisible: bool\n    //onActivated: { }\n    //onClicked: { }\n    //onCollapsed: { }\n    //onDoubleclicked: { }\n    //onExpanded: { }\n    //onPressandhold: { }\n}",
        "description": "TreeView",
        "prefix": "TreeView",
        "scope": "source.qml"
    },
    "TreeViewStyle": {
        "body": "\nTreeViewStyle {\n    //activateItemOnSingleClick: bool\n    //alternateBackgroundColor: color\n    //backgroundColor: color\n    //branchDelegate: Component\n    //control: TreeView\n    //headerDelegate: Component\n    //highlightedTextColor: color\n    //indentation: int\n    //itemDelegate: Component\n    //rowDelegate: Component\n    //textColor: color\n}",
        "description": "TreeViewStyle",
        "prefix": "TreeViewStyle",
        "scope": "source.qml"
    },
    "Tumbler: QtQuickControls2": {
        "body": "\nTumbler: QtQuickControls2 {\n    //count: int\n    //currentIndex: int\n    //currentItem: Item\n    //delegate: Component\n    //displacement: real [attached]\n    //model: variant\n    //moving: bool\n    //tumbler: Tumbler [attached]\n    //visibleItemCount: int\n    //wrap: bool\n}",
        "description": "Tumbler: QtQuickControls2",
        "prefix": "Tumbler: QtQuickControls2",
        "scope": "source.qml"
    },
    "Tumbler: QtQuickExtras": {
        "body": "\nTumbler: QtQuickExtras {\n    //columnCount: int\n    //style: Component\n}",
        "description": "Tumbler: QtQuickExtras",
        "prefix": "Tumbler: QtQuickExtras",
        "scope": "source.qml"
    },
    "TumblerColumn": {
        "body": "\nTumblerColumn {\n    //activeFocus: bool\n    //columnForeground: Component\n    //currentIndex: int\n    //delegate: Component\n    //highlight: Component\n    //model: var\n    //role: string\n    //visible: bool\n    //width: real\n}",
        "description": "TumblerColumn",
        "prefix": "TumblerColumn",
        "scope": "source.qml"
    },
    "TumblerStyle": {
        "body": "\nTumblerStyle {\n    //background: Component\n    //columnForeground: Component\n    //control: Tumbler\n    //delegate: Component\n    //foreground: Component\n    //frame: Component\n    //highlight: Component\n    //padding.bottom: int\n    //padding.left: int\n    //padding.right: int\n    //padding.top: int\n    //separator: Component\n    //spacing: real\n    //visibleItemCount: int\n}",
        "description": "TumblerStyle",
        "prefix": "TumblerStyle",
        "scope": "source.qml"
    },
    "Turbulence": {
        "body": "\nTurbulence {\n    //noiseSource: url\n    //strength: real\n}",
        "description": "Turbulence",
        "prefix": "Turbulence",
        "scope": "source.qml"
    },
    "UniformAnimator": {
        "body": "\nUniformAnimator {\n    //uniform: string\n}",
        "description": "UniformAnimator",
        "prefix": "UniformAnimator",
        "scope": "source.qml"
    },
    "User": {
        "body": "\nUser {\n    //name: string\n    //user: QPlaceUser\n    //userId: string\n}",
        "description": "User",
        "prefix": "User",
        "scope": "source.qml"
    },
    "VBarModelMapper": {
        "body": "\nVBarModelMapper {\n    //firstBarSetColumn: int\n    //firstRow: int\n    //lastBarSetColumn: int\n    //model: SomeModel\n    //rowCount: int\n    //series: AbstractBarSeries\n}",
        "description": "VBarModelMapper",
        "prefix": "VBarModelMapper",
        "scope": "source.qml"
    },
    "VBoxPlotModelMapper": {
        "body": "\nVBoxPlotModelMapper {\n    //firstBoxSetColumn: int\n    //firstRow: int\n    //lastBoxSetColumn: int\n    //model: SomeModel\n    //rowCount: int\n    //series: AbstractBarSeries\n}",
        "description": "VBoxPlotModelMapper",
        "prefix": "VBoxPlotModelMapper",
        "scope": "source.qml"
    },
    "VCandlestickModelMapper": {
        "body": "\nVCandlestickModelMapper {\n    //closeRow: int\n    //firstSetColumn: int\n    //highRow: int\n    //lastSetColumn: int\n    //lowRow: int\n    //model: QAbstractItemModel\n    //openRow: int\n    //series: CandlestickSeries\n    //timestampRow: int\n}",
        "description": "VCandlestickModelMapper",
        "prefix": "VCandlestickModelMapper",
        "scope": "source.qml"
    },
    "VPieModelMapper": {
        "body": "\nVPieModelMapper {\n    //firstRow: int\n    //labelsColumn: int\n    //model: SomeModel\n    //rowCount: int\n    //series: PieSeries\n    //valuesColumn: int\n}",
        "description": "VPieModelMapper",
        "prefix": "VPieModelMapper",
        "scope": "source.qml"
    },
    "VXYModelMapper": {
        "body": "\nVXYModelMapper {\n    //firstRow: int\n    //model: SomeModel\n    //rowCount: int\n    //series: XYSeries\n    //xColumn: int\n    //yColumn: int\n}",
        "description": "VXYModelMapper",
        "prefix": "VXYModelMapper",
        "scope": "source.qml"
    },
    "ValueAxis": {
        "body": "\nValueAxis {\n    //labelFormat: real\n    //max: real\n    //min: real\n    //minorTickCount: int\n    //tickCount: int\n    //onApplynicenumbers: { }\n    //onRangechanged: { }\n}",
        "description": "ValueAxis",
        "prefix": "ValueAxis",
        "scope": "source.qml"
    },
    "ValueAxis3D": {
        "body": "\nValueAxis3D {\n    //formatter: ValueAxis3DFormatter\n    //labelFormat: string\n    //reversed: bool\n    //segmentCount: int\n    //subSegmentCount: int\n}",
        "description": "ValueAxis3D",
        "prefix": "ValueAxis3D",
        "scope": "source.qml"
    },
    "Vector3dAnimation": {
        "body": "\nVector3dAnimation {\n    //from: vector3d\n    //to: vector3d\n}",
        "description": "Vector3dAnimation",
        "prefix": "Vector3dAnimation",
        "scope": "source.qml"
    },
    "VertexBlendAnimation": {
        "body": "\nVertexBlendAnimation {\n    //interpolator: real\n    //morphTargets: list<MorphTarget>\n    //target: GeometryRenderer\n    //targetName: string\n    //targetPositions: list<real>\n}",
        "description": "VertexBlendAnimation",
        "prefix": "VertexBlendAnimation",
        "scope": "source.qml"
    },
    "Video": {
        "body": "\nVideo {\n    //audioRole: enumeration\n    //autoLoad: bool\n    //autoPlay: bool\n    //availability: enumeration\n    //bufferProgress: real\n    //customAudioRole: string\n    //duration: int\n    //error: enumeration\n    //errorString: string\n    //fillMode: enumeration\n    //hasAudio: bool\n    //hasVideo: bool\n    //loops: int\n    //metaData: object\n    //muted: bool\n    //notifyInterval: int\n    //orientation: int\n    //playbackRate: real\n    //playbackState: enumeration\n    //playlist: Playlist\n    //position: int\n    //seekable: bool\n    //source: url\n    //status: enumeration\n    //volume: real\n    //onPause: { }\n    //onPaused: { }\n    //onPlay: { }\n    //onPlaying: { }\n    //onSeek: { }\n    //onStop: { }\n    //onStopped: { }\n    //onSupportedaudioroles: { }\n}",
        "description": "Video",
        "prefix": "Video",
        "scope": "source.qml"
    },
    "VideoOutput": {
        "body": "\nVideoOutput {\n    //autoOrientation: bool\n    //contentRect: rectangle\n    //fillMode: enumeration\n    //filters: list<object>\n    //orientation: int\n    //source: variant\n    //sourceRect: rectangle\n}",
        "description": "VideoOutput",
        "prefix": "VideoOutput",
        "scope": "source.qml"
    },
    "ViewTransition": {
        "body": "\nViewTransition {\n    //destination: point [attached]\n    //index: int [attached]\n    //item: item [attached]\n    //targetIndexes: list [attached]\n    //targetItems: list [attached]\n}",
        "description": "ViewTransition",
        "prefix": "ViewTransition",
        "scope": "source.qml"
    },
    "Viewport": {
        "body": "\nViewport {\n    //gamma: rect\n    //normalizedRect: rect\n}",
        "description": "Viewport",
        "prefix": "Viewport",
        "scope": "source.qml"
    },
    "VirtualKeyboardSettings": {
        "body": "\nVirtualKeyboardSettings {\n    //activeLocales: list<string>\n    //availableLocales: list<string>\n    //fullScreenMode: bool\n    //locale: string\n    //styleName: string\n    //wordCandidateList.alwaysVisible: bool\n    //wordCandidateList.autoHideDelay: int\n}",
        "description": "VirtualKeyboardSettings",
        "prefix": "VirtualKeyboardSettings",
        "scope": "source.qml"
    },
    "Wander": {
        "body": "\nWander {\n    //affectedParameter: AffectableParameter\n    //pace: real\n    //xVariance: real\n    //yVariance: real\n}",
        "description": "Wander",
        "prefix": "Wander",
        "scope": "source.qml"
    },
    "WaylandClient": {
        "body": "\nWaylandClient {\n    //compositor: WaylandCompositor\n    //groupId: int\n    //processId: int\n    //userId: int\n}",
        "description": "WaylandClient",
        "prefix": "WaylandClient",
        "scope": "source.qml"
    },
    "WaylandCompositor": {
        "body": "\nWaylandCompositor {\n    //created: bool\n    //defaultOutput: WaylandOutput\n    //defaultSeat: WaylandSeat\n    //extensions: list\n    //retainedSelection: bool\n    //socketName: string\n    //useHardwareIntegrationExtension: bool\n    //onDestroyclient: { }\n    //onDestroyclientforsurface: { }\n}",
        "description": "WaylandCompositor",
        "prefix": "WaylandCompositor",
        "scope": "source.qml"
    },
    "WaylandHardwareLayer": {
        "body": "\nWaylandHardwareLayer {\n    //stackingLevel: int\n}",
        "description": "WaylandHardwareLayer",
        "prefix": "WaylandHardwareLayer",
        "scope": "source.qml"
    },
    "WaylandOutput": {
        "body": "\nWaylandOutput {\n    //automaticFrameCallback: bool\n    //availableGeometry: rect\n    //compositor: WaylandCompositor\n    //geometry: rect\n    //manufacturer: string\n    //model: string\n    //physicalSize: size\n    //position: point\n    //scaleFactor: int\n    //sizeFollowsWindow: bool\n    //subpixel: enum\n    //transform: enum\n    //window: Window\n}",
        "description": "WaylandOutput",
        "prefix": "WaylandOutput",
        "scope": "source.qml"
    },
    "WaylandQuickItem": {
        "body": "\nWaylandQuickItem {\n    //compositor: WaylandCompositor\n    //focusOnClick: bool\n    //origin: enum\n    //paintEnabled: bool\n    //sizeFollowsSurface: bool\n    //subsurfaceHandler: object\n    //surface: WaylandSurface\n    //onSetprimary: { }\n}",
        "description": "WaylandQuickItem",
        "prefix": "WaylandQuickItem",
        "scope": "source.qml"
    },
    "WaylandSeat": {
        "body": "\nWaylandSeat",
        "description": "WaylandSeat",
        "prefix": "WaylandSeat",
        "scope": "source.qml"
    },
    "WaylandSurface": {
        "body": "\nWaylandSurface {\n    //bufferScale: size\n    //client: WaylandClient\n    //contentOrientation: enum\n    //cursorSurface: bool\n    //hasContent: bool\n    //origin: enum\n    //size: size\n    //onChildadded: { }\n    //onSurfacedestroyed: { }\n}",
        "description": "WaylandSurface",
        "prefix": "WaylandSurface",
        "scope": "source.qml"
    },
    "WaylandView": {
        "body": "\nWaylandView {\n    //allowDiscardFrontBuffer: bool\n    //bufferLocked: bool\n    //output: WaylandOutput\n    //surface: WaylandSurface\n}",
        "description": "WaylandView",
        "prefix": "WaylandView",
        "scope": "source.qml"
    },
    "Waypoint": {
        "body": "\nWaypoint {\n    //altitude: real\n    //bearing: real\n    //coordinate: coordinate\n    //latitude: real\n    //longitude: real\n    //metadata: VariantMap\n}",
        "description": "Waypoint",
        "prefix": "Waypoint",
        "scope": "source.qml"
    },
    "WebChannel": {
        "body": "\nWebChannel {\n    //id: QString [attached]\n    //registeredObjects: QQmlListProperty<QObject>\n    //transports: QQmlListProperty<QObject>\n}",
        "description": "WebChannel",
        "prefix": "WebChannel",
        "scope": "source.qml"
    },
    "WebEngine": {
        "body": "\nWebEngine {\n    //defaultProfile: WebEngineProfile\n    //settings: WebEngineSettings\n}",
        "description": "WebEngine",
        "prefix": "WebEngine",
        "scope": "source.qml"
    },
    "WebEngineCertificateError": {
        "body": "\nWebEngineCertificateError {\n    //description: string\n    //error: enumeration\n    //overridable: bool\n    //url: url\n}",
        "description": "WebEngineCertificateError",
        "prefix": "WebEngineCertificateError",
        "scope": "source.qml"
    },
    "WebEngineDownloadItem": {
        "body": "\nWebEngineDownloadItem {\n    //id: int\n    //interruptReason: enumeration\n    //interruptReasonString: string\n    //isFinished: bool\n    //isPaused: bool\n    //isSavePageDownload: bool\n    //mimeType: string\n    //path: string\n    //receivedBytes: int\n    //savePageFormat: enumeration\n    //state: enumeration\n    //totalBytes: int\n    //type: enumeration\n}",
        "description": "WebEngineDownloadItem",
        "prefix": "WebEngineDownloadItem",
        "scope": "source.qml"
    },
    "WebEngineHistory": {
        "body": "\nWebEngineHistory {\n    //backItems: WebEngineHistoryListModel\n    //forwardItems: WebEngineHistoryListModel\n    //items: WebEngineHistoryListModel\n}",
        "description": "WebEngineHistory",
        "prefix": "WebEngineHistory",
        "scope": "source.qml"
    },
    "WebEngineLoadRequest": {
        "body": "\nWebEngineLoadRequest {\n    //errorCode: int\n    //errorDomain: enumeration\n    //errorString: string\n    //status: enumeration\n    //url: url\n}",
        "description": "WebEngineLoadRequest",
        "prefix": "WebEngineLoadRequest",
        "scope": "source.qml"
    },
    "WebEngineNavigationRequest": {
        "body": "\nWebEngineNavigationRequest {\n    //action: enumeration\n    //isMainFrame: bool\n    //navigationType: enumeration\n    //url: url\n}",
        "description": "WebEngineNavigationRequest",
        "prefix": "WebEngineNavigationRequest",
        "scope": "source.qml"
    },
    "WebEngineNewViewRequest": {
        "body": "\nWebEngineNewViewRequest {\n    //destination: WebEngineView::NewViewDestination\n    //requestedUrl: QUrl\n    //userInitiated: bool\n    //onOpenin: { }\n}",
        "description": "WebEngineNewViewRequest",
        "prefix": "WebEngineNewViewRequest",
        "scope": "source.qml"
    },
    "WebEngineProfile": {
        "body": "\nWebEngineProfile {\n    //cachePath: string\n    //httpAcceptLanguage: string\n    //httpCacheMaximumSize: int\n    //httpCacheType: enumeration\n    //httpUserAgent: string\n    //offTheRecord: bool\n    //persistentCookiesPolicy: enumeration\n    //persistentStoragePath: string\n    //spellCheckEnabled: bool\n    //spellCheckLanguages: list<string>\n    //storageName: string\n    //userScripts: list<WebEngineScript>\n    //onDownloadfinished: { }\n    //onDownloadrequested: { }\n}",
        "description": "WebEngineProfile",
        "prefix": "WebEngineProfile",
        "scope": "source.qml"
    },
    "WebEngineScript": {
        "body": "\nWebEngineScript {\n    //injectionPoint: enumeration\n    //name: string\n    //runOnSubframes: int\n    //sourceCode: string\n    //sourceUrl: url\n    //worldId: enumeration\n}",
        "description": "WebEngineScript",
        "prefix": "WebEngineScript",
        "scope": "source.qml"
    },
    "WebEngineSettings": {
        "body": "\nWebEngineSettings {\n    //accelerated2dCanvasEnabled: bool\n    //allowGeolocationOnInsecureOrigins: bool\n    //allowRunningInsecureContent: bool\n    //allowWindowActivationFromJavaScript: bool\n    //autoLoadIconsForPage: bool\n    //autoLoadImages: bool\n    //defaultTextEncoding: string\n    //errorPageEnabled: bool\n    //focusOnNavigationEnabled: bool\n    //fullscreenSupportEnabled: bool\n    //hyperlinkAuditingEnabled: bool\n    //javascriptCanAccessClipboard: bool\n    //javascriptCanOpenWindows: bool\n    //javascriptCanPaste: bool\n    //javascriptEnabled: bool\n    //linksIncludedInFocusChain: bool\n    //localContentCanAccessFileUrls: bool\n    //localContentCanAccessRemoteUrls: bool\n    //localStorageEnabled: bool\n    //playbackRequiresUserGesture: bool\n    //pluginsEnabled: bool\n    //printElementBackgrounds: bool\n    //screenCaptureEnabled: bool\n    //showScrollBars: bool\n    //spatialNavigationEnabled: bool\n    //touchIconsEnabled: bool\n    //unknownUrlSchemePolicy: WebEngineSettings::UnknownUrlSchemePolicy\n    //webGLEnabled: bool\n    //webRTCPublicInterfacesOnly: bool\n}",
        "description": "WebEngineSettings",
        "prefix": "WebEngineSettings",
        "scope": "source.qml"
    },
    "WebEngineView": {
        "body": "\nWebEngineView {\n    //ErrorDomain: enumeration\n    //Feature: enumeration\n    //FindFlags: enumeration\n    //JavaScriptConsoleMessageLevel: enumeration\n    //LoadStatus: enumeration\n    //NewViewDestination: enumeration\n    //PrintedPageOrientation: enumeration\n    //PrintedPageSizeId: enumeration\n    //RenderProcessTerminationStatus: enumeration\n    //WebAction: enumeration\n    //activeFocusOnPress: bool\n    //audioMuted: bool\n    //backgroundColor: bool\n    //canGoBack: bool\n    //canGoForward: bool\n    //contentsSize: size\n    //devToolsView: WebEngineView\n    //icon: url\n    //inspectedView: WebEngineView\n    //isFullScreen: bool\n    //loadProgress: int\n    //loading: bool\n    //navigationHistory: WebEngineHistory\n    //profile: WebEngineProfile\n    //recentlyAudible: bool\n    //scrollPosition: point\n    //settings: WebEngineSettings\n    //title: string\n    //url: url\n    //userScripts: list<WebEngineScript>\n    //webChannel: QQmlWebChannel\n    //webChannelWorld: int\n    //zoomFactor: real\n    //onActivefocusonpresschanged: { }\n    //onAudiomutedchanged: { }\n    //onAuthenticationdialogrequested: { }\n    //onBackgroundcolorchanged: { }\n    //onCertificateerror: { }\n    //onColordialogrequested: { }\n    //onContextmenurequested: { }\n    //onFeaturepermissionrequested: { }\n    //onFiledialogrequested: { }\n    //onFormvalidationmessagerequested: { }\n    //onFullscreenrequested: { }\n    //onGeometrychangerequested: { }\n    //onJavascriptconsolemessage: { }\n    //onJavascriptdialogrequested: { }\n    //onLinkhovered: { }\n    //onLoadingchanged: { }\n    //onNavigationrequested: { }\n    //onNewviewrequested: { }\n    //onPdfprintingfinished: { }\n    //onQuotarequested: { }\n    //onRecentlyaudiblechanged: { }\n    //onRegisterprotocolhandlerrequested: { }\n    //onRenderprocessterminated: { }\n    //onWasrecentlyaudiblechanged: { }\n    //onWindowcloserequested: { }\n}",
        "description": "WebEngineView",
        "prefix": "WebEngineView",
        "scope": "source.qml"
    },
    "WebSocket": {
        "body": "\nWebSocket {\n    //active: bool\n    //errorString: QString\n    //status: Status\n    //url: QUrl\n    //onBinarymessagereceived: { }\n    //onStatuschanged: { }\n    //onTextmessagereceived: { }\n}",
        "description": "WebSocket",
        "prefix": "WebSocket",
        "scope": "source.qml"
    },
    "WebSocketServer": {
        "body": "\nWebSocketServer {\n    //accept: bool\n    //errorString: QString\n    //host: QString\n    //listen: bool\n    //name: QString\n    //port: int\n    //url: QUrl\n    //onClientconnected: { }\n}",
        "description": "WebSocketServer",
        "prefix": "WebSocketServer",
        "scope": "source.qml"
    },
    "WebView": {
        "body": "\nWebView {\n    //canGoBack: bool\n    //canGoForward: bool\n    //loadProgress: int\n    //loading: bool\n    //title: string\n    //url: url\n    //onLoadingchanged: { }\n}",
        "description": "WebView",
        "prefix": "WebView",
        "scope": "source.qml"
    },
    "WebViewLoadRequest": {
        "body": "\nWebViewLoadRequest {\n    //errorString: string\n    //status: enumeration\n    //url: url\n}",
        "description": "WebViewLoadRequest",
        "prefix": "WebViewLoadRequest",
        "scope": "source.qml"
    },
    "WheelEvent: Qt3D": {
        "body": "\nWheelEvent: Qt3D {\n    //accepted: bool\n    //angleDelta: Point\n    //buttons: int\n    //modifiers: Modifiers\n    //x: int\n    //y: int\n}",
        "description": "WheelEvent: Qt3D",
        "prefix": "WheelEvent: Qt3D",
        "scope": "source.qml"
    },
    "WheelEvent: QtQuick": {
        "body": "\nWheelEvent: QtQuick {\n    //accepted: bool\n    //angleDelta: point\n    //buttons: int\n    //inverted: int\n    //modifiers: int\n    //pixelDelta: point\n    //x: real\n    //y: real\n}",
        "description": "WheelEvent: QtQuick",
        "prefix": "WheelEvent: QtQuick",
        "scope": "source.qml"
    },
    "Window": {
        "body": "\nWindow {\n    //active: bool [attached]\n    //active: bool\n    //activeFocusItem: Item [attached]\n    //activeFocusItem: Item\n    //color: color\n    //contentItem: Item\n    //contentItem: Item [attached]\n    //contentOrientation: Qt::ScreenOrientation\n    //data: list<Object>\n    //flags: Qt::WindowFlags\n    //height: int\n    //height: int [attached]\n    //maximumHeight: int\n    //maximumWidth: int\n    //minimumHeight: int\n    //minimumWidth: int\n    //modality: Qt::WindowModality\n    //opacity: real\n    //screen: variant\n    //title: string\n    //visibility: QWindow::Visibility [attached]\n    //visibility: QWindow::Visibility\n    //visible: bool\n    //width: int\n    //width: int [attached]\n    //window: Window [attached]\n    //x: int\n    //y: int\n    //onAlert: { }\n    //onClose: { }\n    //onClosing: { }\n    //onHide: { }\n    //onLower: { }\n    //onRaise: { }\n    //onRequestactivate: { }\n    //onShow: { }\n    //onShowfullscreen: { }\n    //onShowmaximized: { }\n    //onShowminimized: { }\n    //onShownormal: { }\n}",
        "description": "Window",
        "prefix": "Window",
        "scope": "source.qml"
    },
    "WlShell": {
        "body": "\nWlShell",
        "description": "WlShell",
        "prefix": "WlShell",
        "scope": "source.qml"
    },
    "WlShellSurface": {
        "body": "\nWlShellSurface {\n    //className: string\n    //shell: WlShell\n    //surface: WaylandSurface\n    //title: string\n    //windowType: enum\n}",
        "description": "WlShellSurface",
        "prefix": "WlShellSurface",
        "scope": "source.qml"
    },
    "WorkerScript": {
        "body": "\nWorkerScript {\n    //source: url\n    //onMessage: { }\n    //onSendmessage: { }\n}",
        "description": "WorkerScript",
        "prefix": "WorkerScript",
        "scope": "source.qml"
    },
    "XAnimator": {
        "body": "\nXAnimator {\n    //duration: int\n    //easing.amplitude: real\n    //easing.bezierCurve: list<real>\n    //easing.overshoot: real\n    //easing.period: real\n    //easing.type: enumeration\n    //from: real\n    //target: QtQuick::Item\n    //to: real\n}",
        "description": "XAnimator",
        "prefix": "XAnimator",
        "scope": "source.qml"
    },
    "XYPoint": {
        "body": "\nXYPoint {\n    //x: real\n    //y: real\n}",
        "description": "XYPoint",
        "prefix": "XYPoint",
        "scope": "source.qml"
    },
    "XYSeries": {
        "body": "\nXYSeries {\n    //axisAngular: AbstractAxis\n    //axisRadial: AbstractAxis\n    //axisX: AbstractAxis\n    //axisXTop: AbstractAxis\n    //axisY: AbstractAxis\n    //axisYRight: AbstractAxis\n    //color: color\n    //pointLabelsClipping: bool\n    //pointLabelsColor: font\n    //pointLabelsFont: font\n    //pointLabelsFormat: string\n    //pointLabelsVisible: bool\n    //pointsVisible: bool\n    //onAppend: { }\n    //onClicked: { }\n    //onDoubleclicked: { }\n    //onHovered: { }\n    //onInsert: { }\n    //onPointadded: { }\n    //onPointremoved: { }\n    //onPointreplaced: { }\n    //onPointsremoved: { }\n    //onPointsreplaced: { }\n    //onPressed: { }\n    //onReleased: { }\n    //onRemove: { }\n    //onRemove: { }\n    //onRemovepoints: { }\n    //onReplace: { }\n}",
        "description": "XYSeries",
        "prefix": "XYSeries",
        "scope": "source.qml"
    },
    "XdgPopupV5": {
        "body": "\nXdgPopupV5 {\n    //parentSurface: WaylandSurface\n    //position: point\n    //shell: XdgShellV5\n    //surface: WaylandSurface\n}",
        "description": "XdgPopupV5",
        "prefix": "XdgPopupV5",
        "scope": "source.qml"
    },
    "XdgPopupV6": {
        "body": "\nXdgPopupV6 {\n    //anchorEdges: enumeration\n    //anchorRect: rect\n    //configuredGeometry: rect\n    //flipConstraints: enumeration\n    //gravityEdges: rect\n    //offset: point\n    //parentXdgSurface: XdgSurfaceV6\n    //positionerSize: size\n    //resizeConstraints: enumeration\n    //slideConstraints: enumeration\n    //unconstrainedPosition: point\n    //xdgSurface: XdgSurfaceV6\n}",
        "description": "XdgPopupV6",
        "prefix": "XdgPopupV6",
        "scope": "source.qml"
    },
    "XdgShellV5": {
        "body": "\nXdgShellV5",
        "description": "XdgShellV5",
        "prefix": "XdgShellV5",
        "scope": "source.qml"
    },
    "XdgShellV6": {
        "body": "\nXdgShellV6 {\n    //onPong: { }\n    //onPopupcreated: { }\n    //onToplevelcreated: { }\n    //onXdgsurfacecreated: { }\n}",
        "description": "XdgShellV6",
        "prefix": "XdgShellV6",
        "scope": "source.qml"
    },
    "XdgSurfaceV5": {
        "body": "\nXdgSurfaceV5 {\n    //parentSurface: XdgSurfaceV5\n    //shell: XdgShellV5\n    //surface: WaylandSurface\n    //title: string\n    //windowType: enumeration\n    //onSettoplevel: { }\n    //onSettransient: { }\n}",
        "description": "XdgSurfaceV5",
        "prefix": "XdgSurfaceV5",
        "scope": "source.qml"
    },
    "XdgSurfaceV6": {
        "body": "\nXdgSurfaceV6 {\n    //popup: XdgPopupV6\n    //shell: XdgShellV6\n    //surface: WaylandSurface\n    //toplevel: XdgToplevelV6\n    //windowGeometry: rect\n    //windowType: enum\n}",
        "description": "XdgSurfaceV6",
        "prefix": "XdgSurfaceV6",
        "scope": "source.qml"
    },
    "XdgToplevelV6": {
        "body": "\nXdgToplevelV6 {\n    //activated: bool\n    //appId: string\n    //fullscreen: bool\n    //maxSize: size\n    //maximized: bool\n    //minSize: size\n    //parentToplevel: XdgToplevelV6\n    //resizing: bool\n    //title: string\n}",
        "description": "XdgToplevelV6",
        "prefix": "XdgToplevelV6",
        "scope": "source.qml"
    },
    "XmlListModel": {
        "body": "\nXmlListModel {\n    //count: int\n    //namespaceDeclarations: string\n    //progress: real\n    //query: string\n    //roles: list<XmlRole>\n    //source: url\n    //status: enumeration\n    //xml: string\n    //onErrorstring: { }\n    //onReload: { }\n}",
        "description": "XmlListModel",
        "prefix": "XmlListModel",
        "scope": "source.qml"
    },
    "XmlRole": {
        "body": "\nXmlRole {\n    //isKey: bool\n    //name: string\n    //query: string\n}",
        "description": "XmlRole",
        "prefix": "XmlRole",
        "scope": "source.qml"
    },
    "YAnimator": {
        "body": "\nYAnimator {\n    //duration: int\n    //easing.amplitude: real\n    //easing.bezierCurve: list<real>\n    //easing.overshoot: real\n    //easing.period: real\n    //easing.type: enumeration\n    //from: real\n    //target: QtQuick::Item\n    //to: real\n}",
        "description": "YAnimator",
        "prefix": "YAnimator",
        "scope": "source.qml"
    },
    "ZoomBlur": {
        "body": "\nZoomBlur {\n    //cached: bool\n    //horizontalOffset: real\n    //length: real\n    //samples: int\n    //source: variant\n    //transparentBorder: bool\n    //verticalOffset: real\n}",
        "description": "ZoomBlur",
        "prefix": "ZoomBlur",
        "scope": "source.qml"
    }
}
